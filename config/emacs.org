#+title: emacs customization
* Who am I?
  #+begin_src emacs-lisp
    (setq user-full-name "Hоàng Đức Hiếu"
          user-login-name "hdhoang"
          user-mail-address "hdhoang@zahe.me"
          pkgbuild-user-mail-address "arch@zahe.me")
  #+end_src
* Start up
  #+begin_src emacs-lisp
    (server-mode t)
    (desktop-save-mode t)
    (setq
     auto-save-default nil
     confirm-kill-emacs #'yes-or-no
     delete-by-moving-to-trash t
     load-prefer-newer t
     make-backup-files nil
     desktop-load-locked-desktop t ;  Load locked desktop from crashed emacs
     inhibit-startup-screen t)
  #+end_src
  Package management
  #+begin_src emacs-lisp
    (setq package-archives
          '(("gnu" . "https://elpa.gnu.org/packages/")
            ("marmalade" . "https://marmalade-repo.org/packages/")
            ("melpa" . "http://melpa.org/packages/")))
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    (use-package paradox
      :config (progn
                (setq paradox-github-token t)
                (setq paradox-execute-asynchronously nil)))
    (use-package evil
      :config (evil-set-initial-state 'paradox-menu-mode 'emacs))
  #+end_src
* Input
  #+begin_src emacs-lisp
    (set-language-environment "UTF-8")
    (setq-default buffer-file-coding-system 'unix)
    (setq-default sentence-end-double-space nil)
    (setq default-input-method "vietnamese-telex")
    (global-set-key (kbd "C-\\") 'toggle-input-method)
    (use-package aggressive-indent
      :ensure
      :config (global-aggressive-indent-mode))
    (defalias #'vb #'revert-buffer)
  #+end_src
** Ace-window
   #+begin_src emacs-lisp
     (use-package ace-window
       :ensure
       :bind ("C-x o" . ace-window))
   #+end_src
** Evil
   #+begin_src emacs-lisp
     (use-package evil
       :ensure
       :bind (("C-v" . evil-scroll-down)
              ("M-v" . evil-scroll-up))
       :config
       (progn
         (evil-mode t)
         (dolist (state '(normal motion))
           (evil-define-key state global-map
             (kbd "<SPC>") #'evil-scroll-down
             (kbd "S-<SPC>") #'evil-scroll-up))
         (dolist (state '(insert motion normal))
           (evil-define-key state global-map
             (kbd "C-t") #'transpose-chars
             (kbd "C-d") #'delete-char
             (kbd "C-k") #'kill-line
             (kbd "C-y") #'evil-paste-before
             (kbd "C-e") #'end-of-line
             (kbd "C-f") #'forward-char   (kbd "C-b") #'backward-char
             (kbd "C-n") #'next-line      (kbd "C-p") #'previous-line
             (kbd "C-r") #'isearch-backward))
         (evil-define-key 'motion help-mode-map
           (kbd "<tab>") #'forward-button)))
   #+end_src
** Flycheck
   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure
       :config (global-flycheck-mode))
   #+end_src
** Helm
   #+begin_src emacs-lisp
     (use-package helm-proc
       :ensure
       :config (progn
                 (require 'helm-config)
                 (helm-mode 1)
                 (define-key shell-mode-map (kbd "M-r") #'helm-comint-input-ring))
       :bind (("C-h SPC" . helm-all-mark-rings)
              ("C-x b" . helm-mini)
              ("C-x C-b" . helm-buffers-list)
              ("C-x C-f" . helm-find-files)
              ("C-c g" . helm-do-grep)
              ("C-c p" . helm-proc)
              ("M-s o" . helm-occur)
              ("M-x" . helm-M-x)))
     (use-package evil
       :config (dolist (state '(insert motion normal))
                 (evil-define-key state global-map
                   (kbd "M-y") #'helm-show-kill-ring)))
   #+end_src
** Quickrun
   #+begin_src emacs-lisp
     (use-package quickrun
       :ensure
       :bind ("C-c q" . quickrun))
     (use-package evil
       :config (evil-set-initial-state 'quickrun/mode 'emacs))
   #+end_src
** Smartparens
   #+begin_src emacs-lisp
     (use-package smartparens
       :ensure
       :config (progn (require 'smartparens-config)
                      (smartparens-global-mode t)))
   #+end_src
** Expand-region
   #+begin_src emacs-lisp
     (use-package expand-region
       :ensure
       :bind ("C-=" . er/expand-region))
   #+end_src
** Other convenient bindings
   #+begin_src emacs-lisp
     (defalias 'yes-or-no-p #'y-or-n-p)
     (defalias 'dabbrev-expand #'hippie-expand)
     (global-set-key (kbd "<M-f4>") #'delete-frame)
   #+end_src
* Major modes
  #+begin_src emacs-lisp
    (dolist (assoc '(("\\.service\\'" . conf-windows-mode)
                     ("\\.socket\\'" . conf-windows-mode)
                     ("\\.timer\\'" . conf-windows-mode)
                     ("\\.directory\\'" . conf-windows-mode)))
      (add-to-list 'auto-mode-alist assoc))
    (use-package pkgbuild-mode
      :mode ("\\.install\\'" . sh-mode))
  #+end_src
** Desktop files
   #+begin_src emacs-lisp
     (add-hook 'conf-windows-mode-hook
               '(lambda ()
                  (setq comment-start "#")
                  (glasses-mode t)))
   #+end_src
** Dired
   #+begin_src emacs-lisp
     (use-package dired+
       :ensure
       :config (require 'dired+))
     (eval-after-load "dired"
       '(define-key dired-mode-map (kbd "RET") #'dired-do-async-shell-command))
     (setq dired-recursive-copies 'always
           dired-recursive-deletes 'always
           dired-guess-shell-alist-user
           '(("." "xdg-open;")))
   #+end_src
** Docview
   #+begin_src emacs-lisp
     (use-package doc-view
       :config (progn
                 (define-key doc-view-mode-map (kbd "<mouse-1>") 'doc-view-scroll-up-or-next-page)
                 (define-key doc-view-mode-map (kbd "<mouse-3>") 'doc-view-scroll-down-or-previous-page)))
     (setq doc-view-cache-directory (expand-file-name "~/.docview"))
     (use-package evil
       :config (add-hook 'view-mode-hook #'evil-emacs-state))
   #+end_src
** ERC
   #+begin_src emacs-lisp
     (setq erc-autojoin-channels-alist '(("freenode" "#lojban" "#jbopre" "#vnluser"))
                erc-hide-list '("JOIN" "PART" "QUIT"))
     (use-package evil
       :config (evil-set-initial-state 'erc-mode 'normal))
   #+end_src
** Magit
   Enter commit buffer in insert state
   #+begin_src emacs-lisp
     (use-package magit
       :ensure
       :bind ("C-x g" . magit-status))
     (use-package evil
       :config (evil-set-initial-state 'git-commit-mode 'insert))
     (setq vc-follow-symlinks t)
     (defun fix-cygwin-magit-dir (dir)
       "cygwin/msys2 git confuses emacs into opening \"d:/d/git\". Fix that"
       (replace-regexp-in-string "\\([a-z]\\):/\\1" "\\1:" dir))
     (advice-add 'magit-get-top-dir :filter-return #'fix-cygwin-magit-dir)
   #+end_src
** Org
   #+begin_src emacs-lisp
     (setq org-M-RET-may-split-line nil
           org-latex-default-packages-alist (delete '("AUTO" "inputenc" t)
                                                    org-latex-default-packages-alist)
           org-latex-packages-alist '(("" "libertine" t))
           org-latex-pdf-process '("xelatex %f")
           org-src-fontify-natively t
           org-use-speed-commands t)
     (add-hook 'org-mode-hook '(lambda ()
                                 (add-hook 'before-save-hook 'org-align-all-tags
                                           :local t)))
     (add-to-list 'org-babel-load-languages '(sql . t))
   #+end_src
** Rust
   #+begin_src emacs-lisp
     (use-package rust-mode
       :ensure
       :mode "\\.rs\\'")
     (use-package flycheck-rust
       :config (flycheck-rust-setup))
  #+end_src
** Shell
   #+begin_src emacs-lisp
     (defun shell--prev-buffer (func name)
       "Switch back to the previous buffer if already in shell"
       (if (string= (buffer-name) "*shell*")
         (switch-to-prev-buffer)
         (apply func name)))
     (advice-add 'shell :around #'shell--prev-buffer)
     (if (eq system-type 'windows-nt)
         (setq shell-file-name "bash")
       (setq shell-file-name "zsh"))
     (global-set-key (kbd "C-x M-m") #'shell)
     (global-set-key (kbd "C-x M-t") #'term)
     (define-key comint-mode-map (kbd "<SPC>") #'comint-magic-space)
   #+end_src
** SQL
*** Connections
    #+begin_src emacs-lisp
      (setq sql-connection-alist '(
          ("selfoss"
            (sql-product 'mysql)
            (sql-user "selfoss")
            (sql-database "selfoss")
            (sql-server "192.168.1.54"))))
    #+end_src
* Appearance
  Set terminal title
  #+begin_src emacs-lisp
    (add-hook 'post-command-hook
              '(lambda ()
                 (unless window-system
                   (send-string-to-terminal (concat "\033]2; " (buffer-name) "\007")))))
  #+end_src
  #+begin_src emacs-lisp
    (setq frame-title-format "%f"
          visible-bell t
          calendar-week-start-day 1)
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (blink-cursor-mode -1)
    (show-paren-mode t)
    (setq undo-tree-mode-lighter ""
          magit-auto-revert-mode-lighter "")
  #+end_src
  #+begin_src emacs-lisp
    (use-package color-theme-sanityinc-solarized
      :ensure
      :config (load-theme 'sanityinc-solarized-light t))
  #+end_src
  On newer Windows, use Consolas
  #+begin_src emacs-lisp
    (when (eq window-system 'w32)
      (if (> window-system-version 5)
          (set-default-font "Consolas-12" :frames t)
        (set-default-font "Lucida Console-10" :frames t)))
  #+end_src
