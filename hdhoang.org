#+STARTUP: showall
#+PROPERTY: header-args+ :cache yes
#+PROPERTY: header-args+ :comments org
#+PROPERTY: header-args+ :mkdirp yes
#+PROPERTY: header-args+ :noweb yes
#+PROPERTY: header-args+ :results silent
#+PROPERTY: header-args+ :tangle-mode 384
#+PROPERTY: header-args:text+ :eval no
* Hoàng Đức Hiếu
  :PROPERTIES:
  :EXPORT_OPTIONS: toc:nil date:nil arch:nil num:nil author:nil email:t tags:nil
  :END:
#+EMAIL: 1988 / +84-166-241-9526 / cv@hdhoang.space
#+SELECT_TAGS: vi
#+LATEX_CLASS_OPTIONS: [twocolumn]
#+LATEX_HEADER: \usepackage{libertine}
#+LATEX_HEADER: \usepackage{xcolor-solarized, sectsty}
#+LATEX_HEADER: \usepackage[pagecolor={solarized-base3}]{pagecolor}
#+LATEX: \sectionfont{\color{solarized-blue}}
#+LATEX: \subsectionfont{\color{solarized-cyan}}
#+LATEX: \vspace*{-197pt}\includegraphics{Pictures/mug/img078}
#+LATEX_HEADER: \usepackage{titling}
#+LATEX_HEADER: \pretitle{\begin{flushright}\LARGE}
#+LATEX_HEADER: \posttitle{\par\end{flushright}}
#+LATEX_HEADER: \preauthor{\begin{flushright}}
#+LATEX_HEADER: \postauthor{\end{flushright}}
#+LATEX_HEADER: \pagenumbering{gobble}
** Education								 :en:
   - 2014 - now :: Studying System Administration and software testing
                   at Bachkhoa-Aptech (graduating 2016H2)
   - 2013 - 2014 :: Finished K12 and completed accounting course at
                    Quang Trung private school
   - 2007 - 2012 :: Self-learned various topics
     - Programming languages (Python, shells, HTML5, Emacs Lisp, Rust)
     - History of free software
     - Hanoi GNU/Linux user community
     - Wing-chun martial art
     - The constructed logical language Lojban
   - 2006 - 2007 :: Freshman in computer programming at Monash
                    College, Australia (earned Distinction and High
                    Distinction in most subjects)
   - 2003 - 2006 :: Chu Van An Highschool, majoring in English
#+LATEX: \newpage
** Tiểu sử								 :vi:
   - 2014 - nay :: học quản trị mạng và kiểm thử phần mềm tại
                   Bachkhoa-APTECH (dự kiến tốt nghiệp năm 2016)
#+LATEX: \newpage
** Qualifications and skills						 :en:
*** IT skills
   - In-depth GNU/Linux usage and administration, experienced in
     self-hosting web sites (ownCloud on Debian Apache, ArchLinux nginx)
   - Comprehensive network understanding (routing, firewall, encryption)
   - Using version control systems, especially git
   - Contributing to free software projects ([[https://www.openhub.net/accounts/hdhoang/positions][hdhoang on OpenHub]])
   - Office equipment troubleshooting
*** Language skills
   - Fluency in English (990 in TOEIC, 2015)
   - Elementary Japanese (N4 equivalent)
*** Others
   - Self-teaching discipline
   - Strong interest in learning new topics
** Kĩ năng								 :vi:
*** Kĩ năng IT
     - Sử dụng và quản trị các hệ thống GNU/Linux chuyên sâu, tự quản
       trị dịch vụ web (owncloud, Debian Apache, ArchLinux nginx)
     - Hiểu biết rõ hệ thống mạng (định tuyến, tường lửa)
     - Sử dụng hệ thống quản lí phiên bản, đặc biệt là git
     - Đóng góp vào các dự án phần mềm tự do ([[https://www.openhub.net/accounts/hdhoang][hdhoang trên OpenHub]])
     - Xử lý vấn đề các thiết bị văn phòng
*** Kĩ năng ngôn ngữ
     - Tiếng Anh thuần thục (TOEIC 990, 2015)
     - Tiếng Nhật cơ bản (tương đương N4)
** Interests								 :en:
   - Exploring science, history, and natural subjects
   - Science-fiction novels, rational fanfictions
   - Electric guitar riffs
   - Frequent blood donor until no longer eligible
** Sở thích								 :vi:
    - Khám phá các chủ đề khoa học, lịch sử, tự nhiên
    - Tiểu thuyết khoa học viễn tưởng, ???
    - Nghe solo guitar điện
    - Thường xuyên hiến máu cho đến khi hết khả năng

* Places and names
  #+NAME: username
  #+BEGIN_SRC text
    hdhoang
  #+END_SRC

  #+NAME: domain
  #+BEGIN_SRC text
    <<username>>.space
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
    (setq user-mail-address "<<username>>@<<domain>>")
  #+END_SRC

  #+NAME: storage
  #+BEGIN_SRC text
    /home/<<username>>/sync
  #+END_SRC

  #+NAME: videos
  #+BEGIN_SRC text
    /home/<<username>>/Public/Videos
  #+END_SRC

  #+NAME: prefix
  #+BEGIN_SRC text
    10.117.14.
  #+END_SRC

  #+NAME: prefix6
  #+BEGIN_SRC text
    2001:470:36:62a::
  #+END_SRC

  #+NAME: system_ctl
  #+BEGIN_SRC text
    systemctl --system --no-pager
  #+END_SRC

  #+NAME: user_ctl
  #+BEGIN_SRC text
    systemctl --user --no-pager
  #+END_SRC

  #+NAME: pacman
  #+BEGIN_SRC text
    yaourt --noconfirm --needed
  #+END_SRC

  #+NAME: ytdl
  #+BEGIN_SRC text
    youtube-dl --format "[height <=? 480]" --output <<videos>>/"%(uploader)s %(upload_date)s %(title)s@%(id)s.%(ext)s"
  #+END_SRC

* Blog
  :PROPERTIES:
  :EXPORT_OPTIONS: toc:nil num:nil
  :END:

  #+BEGIN_SRC css :tangle ~/Public/blog.css
    body {
        background: #fdf6e3; color: #657b83;
        margin: 0 25%;
        line-height: 1.5;
    }
    pre {
        padding: 1em;
        border: dotted 1px #657b83;
        border-right: none;
    }
    .src-rust::before,
    .src-python::before {
        content: attr(class);
        display: block;
        float: right;
    }
  #+END_SRC

** hdhoang
   :PROPERTIES:
   :EXPORT_FILE_NAME: ~/Public/index
   :END:
   Elsewhere on the net:
   - hdhoang ::
     + [[https://telegram.me/hdhoang][Telegram]]
     + [[https://www.openhub.net/accounts/hdhoang][OpenHub]]
     + [[https://gitlab.com/u/hdhoang][GitLab]]
     + [[https://www.linkedin.com/in/hdhoang][LinkedIn]]
     + [[https://github.com/hdhoang?tab%3Dactivity][GitHub]]
     + [[http://www.last.fm/user/hdhoang][Last.fm]]
     + [[https://facebook.com/hdh000][Facebook]]
   - lasigmaz ::
     + [[https://twitter.com/lasigmaz][Twitter]]
     + [[https://steamcommunity.com/id/lasigmaz][Steam]]

   I have a maybe-blog:
   - [[file:vanity-irc.org][Showing a custom hostname to Freenode]]
   - [[file:borrow-die.org][Borrow checker analogy]]
   - [[file:luser.org][Writing an IRC bot]]

** Consumption
*** <2016-01-18 Mon> Rạng Đông A55N2/5W (42,200đ)
** Borrow-checking with friends
   :PROPERTIES:
   :EXPORT_FILE_NAME: ~/Public/borrow-die
   :END:

   #+BEGIN_SRC rust :tangle ~/Public/die.rs
     #[derive(Debug)]
     enum D3 { One, Two, Three }
     impl D3 {
         fn peek(self: &D3, name: &str) {
             println!("{} sees that it's {:?}.", name, self);
         }
     }
   #+END_SRC

   Our main character, named Max, has a d3.

   #+BEGIN_SRC rust :tangle ~/Public/die.rs
     fn main() {
         print!("Hi, I'm Max. ");
         let mut die = D3::Two;
         die.peek("Max");
   #+END_SRC

   Max can rolls his die:

   #+BEGIN_SRC rust :tangle ~/Public/die.rs
         die = D3::One;
         die.peek("Max");
   #+END_SRC

   Max invites Alice and Bob over for a game of dice. The die is on the table and everyone can see what it's showing.

   #+BEGIN_SRC rust :tangle ~/Public/die.rs
         'table: loop {
             let bob = &die;
             bob.peek("Bob");
             die.peek("Everyone"); // same thing
             break 'table; // that's enough peeking for now
         }
    #+END_SRC

    It's Alice's turn, she picks up the die and rolls.

    #+BEGIN_SRC rust :tangle ~/Public/die.rs
         'alices_turn: loop {
             let alice = &mut die;
             *alice = D3::Three;
             alice.peek("Alice");
             break 'alices_turn;
         }
    #+END_SRC

    It lands on the table and now everyone sees what Alice rolled.

    #+BEGIN_SRC rust :tangle ~/Public/die.rs
         die.peek("Max");
     }
   #+END_SRC

   [[file:borrow-die.rs][Full code.]]
** Vanity plate on IRC
   :PROPERTIES:
   :EXPORT_FILE_NAME: ~/Public/vanity-irc
   :END:
*** Ingredients:
    - An IPv6 block whose PTR you can delegate (I use Hurricane Electric's [[https://tunnelbroker.net][tunnelbroker service]])
    - A hostname whose AAAA you can change (I'm using a full domain, hosted on [[https://cloudflare.com][CloudFlare]], but it should works [[https://freedns.afraid.org][with subdomains]])
    - I'm using a Debian machine to connect to Freenode
*** Recipes:
    1. Request an IPv6 tunnel with HE
    2. Delegate its rDNS to [[https://dns.he.net][dns.he.net]]
    3. Match forward and reverse DNS between an address and your hostname:

       #+BEGIN_SRC sh :results replace
         bash -c 'diff <(nslookup test-plate.hdhoang.space.) <(nslookup 2001:470:36:62a::cccc)'
       #+END_SRC

       #+RESULTS[b43b6d2d898df8156aa60d0405a8b2f68660f12d]:

       - Choose an address, point it to your hostname
       - Add the address to the hostname's AAAA records
    6. Connect to Freenode with that address as the source, for example:

       #+BEGIN_SRC sh
         for fn in $(dig +short -t aaaa chat.freenode.net); do
             ip -6 route add $fn src $address dev $tunnel_interface;
         done;

       #+END_SRC
       or

       #+BEGIN_SRC sh
         ip -6 route replace default src $address dev $tunnel_interface
       #+END_SRC

** IRC bot
   :PROPERTIES:
   :EXPORT_FILE_NAME: ~/Public/luser
   :END:
   [[irc:chat.freenode.net/#vnluser][#vnluser]] used to have a bot to grab link titles and search google.
   It didn't work very well with Vietnamese characters, so it was
   retired. Here's a replacement in rust and python. Its name is

   #+NAME: botname
   #+BEGIN_SRC text
     luser
   #+END_SRC

   There are several things it could improve on:
    - [X] Handle gzip responses (news.zing.vn and baomoi.com): These
      sites always return gzip-encoded HTML, even when Accept-Encoding
      doesn't list it. You can check by comparing =curl= vs =curl
      --compressed=.
    - [ ] Configurable multiple channels support, possibly as
      commandline arguments, should also set owners.
    - [ ] Reading secrets from files: API keys, identify passwords,
      channel passwords.
    - [ ] Tests: It would be difficult to interface with IRC servers,
      but at least the handling functions should be tested.
    - [ ] CLI interface: Like chatbot's, this will speed up testing.
    - [X] NYtimes access: The cookie needs to be periodically rebaked.
      Theoretically cloaking as googlebot should work.
    - [ ] Pod titles in rust: Quick-xml doesn't return the attributes
      iterator currently.
    - [ ] Reconnection on ping timeout: [[https://github.com/aatxe/irc/blob/46f9136c93063e8abb01b063df53897615007791/src/client/server/mod.rs#L208][IrcServer should already
      reconnect automatically]], but possibly ipv6 tunneling is
      interfering.

   Compilation to ARMv7 is a bit tricky:

    1. Set up [[https://github.com/japaric/rust-cross][cross-compilation toolchain]]
    2. Copy the target's =/usr/include/openssl=, =lib{crypto,ssl,z}.so= to $PWD
    3. Run cargo with:
       #+BEGIN_SRC sh
         TARGET_CFLAGS="-I $PWD" cargo rustc --release --target armv7-unknown-linux-gnueabihf -- -C linker=arm-linux-gnueabihf-gcc -lz -L $PWD
       #+END_SRC
    4. Copy =target/armv7-unknown-linux-gnueabihf/release/luser= to the target

   You can run tests for the python version:

   #+NAME: doctest_luser
   #+BEGIN_SRC sh
     python -m doctest ~/Public/<<botname>>.py
   #+END_SRC

   Now on to the code. Unfortunately, tangling from this Org source
   loses indentations, so the python code can't be commented on line
   by line. Here are the API keys and rust build setup:

   #+NAME: wolframalpha_key
   #+BEGIN_SRC text
     3JEW42-4XXE264A93
   #+END_SRC

   #+NAME: yandex_key
   #+BEGIN_SRC text
     trnsl.1.1.20160210T093900Z.c6eacf09bbb65cfb.cc28de2ba798bc3bc118e9f8201b6e6cea697810
   #+END_SRC

   #+BEGIN_SRC conf :tangle ~/Public/luser.toml
     [package]
     name = "<<botname>>"
     version = "0.1.0"
     authors = ["Hoàng Đức Hiếu <<username>>@<<domain>>"]

     [dependencies]
     irc = "*"
     scraper = "*"
     hyper = "*"
     regex = "*"
     quick-xml = "*"
     rustc-serialize = "*"
     url = "*"
   #+END_SRC

   Importing dependencies. Python really comes with batteries.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     extern crate regex;
     extern crate irc;
     extern crate scraper;
     extern crate hyper;
     extern crate quick_xml;
     extern crate rustc_serialize;
     extern crate url;

     use regex::Regex;
     use irc::client::prelude::{IrcServer, Server, ServerExt, Config, Command, Response};
     use hyper::client::Client;
     use std::io::Read;
     use std::collections::HashMap;
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     # -*- coding: utf-8 -*-
     # external batteries
     from bs4 import BeautifulSoup
     from irc import bot, connection

     from collections import defaultdict
     from sys import version_info
     from random import randint
     from gzip import GzipFile
     import xml.etree.ElementTree as ET
     import json
     import os

     if version_info.major == 3:
         from urllib.request import urlopen, build_opener, HTTPCookieProcessor
         from urllib.parse import quote
         from http.client import HTTPConnection
     else:
         from urllib2 import urlopen, quote, build_opener, HTTPCookieProcessor
         from httplib import HTTPConnection
         from StringIO import StringIO
         import sys
         reload(sys)
         sys.setdefaultencoding('utf8')
   #+END_SRC

   Set up logging.

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     import logging
     import logging.handlers
     logger = logging.getLogger(__file__)

     def setup_logging(filename, path=None, verbose=False):
         if not path:
             path = os.path.dirname(os.path.realpath(__file__))
         file_log = logging.handlers.TimedRotatingFileHandler(
             os.path.join(path, filename),
             when="midnight",
             backupCount=31)
         file_log.setLevel(logging.DEBUG if verbose else logging.INFO)
         file_log.setFormatter(logging.Formatter(
             '%(asctime)-15s (%(name)s) %(message)s'))
         logger.addHandler(file_log)
   #+END_SRC

   Set up connection details. People should claim their names here.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     const NAME: &'static str = "<<botname>>";
     fn main() {
         let freenode = IrcServer::from_config(Config {
                            owners: Some(vec![env!("USER").into()]),
                            nickname: Some(NAME.into()),
                            alt_nicks: Some((0..10).map(|n| format!("{}-{}", NAME, n)).collect()),
                            server: Some("chat.freenode.net".into()),
                            port: Some(8000),
                            channels: Some(vec![format!("#vn{}", NAME), format!("#{}-test", NAME)]),
                            ..Default::default()
                        })
                            .unwrap();
         freenode.identify().unwrap();
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     NAME = "<<botname>>"
     <<botname>> = bot.SingleServerIRCBot([("chat.freenode.net", 8000)], NAME, NAME
                                          connect_factory=connection.Factory(ipv6=True))

     def main():
         setup_logging("<<botname>>.log")
         <<botname>>.start()

     def change_nick(c, e):
         new_nick = '{}-{}'.format(NAME, str(randint(0, 9)))
         print("Changing nick to", new_nick)
         c.nick(new_nick)
     <<botname>>.on_nicknameinuse = change_nick

     <<botname>>.on_nickcollision = lambda c, _: c.reconnect()

     def join_channels(c, e):
         c.join("#{}-test".format(NAME))
         c.join("#vn" + NAME)
     <<botname>>.on_welcome = join_channels
   #+END_SRC

   Handling scaffolding

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
         let get_title = &get_title;
         let wolframalpha = &wolframalpha;
         let google = &google;
         let translate = &translate;
         let handlers = [Handler(Regex::new(TITLE_REGEX).unwrap(), get_title),
                         Handler(Regex::new(WA_REGEX).unwrap(), wolframalpha),
                         Handler(Regex::new(GOOGLE_REGEX).unwrap(), google),
                         Handler(Regex::new(TRANSLATE_REGEX).unwrap(), translate)];

   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def handle(c, e, msg):
         try:
             if 'http' in msg:
                 c.privmsg(e.target, title(msg))
             if msg[0] not in ('.', '!', ':'): return
             if msg[1:6] == 'tell ':
                 source = e.source.nick
                 (target, _, line) = msg[6:].partition(' ')
                 return relay_msg[target].append((source, line))
             reply = ''
             if msg[1:3] == 'g ':
                 reply = google(msg[3:])
             if msg[1:4] == 'wa ':
                 reply = wolframalpha(msg[4:])
             if msg[1:4] == 'tr ':
                 (lang, _, text) = msg[4:].partition(' ')
                 reply = translate(lang, text)
             if reply:
                 # Keep PRIVMSG under 512bytes
                 c.privmsg(e.target, reply[:512 - len(e.target) - 50])
         except Exception as e:
             logger.error('%s causes: %s' % (msg, str(e)))
   #+END_SRC

   List other lusers, and update that list when one joins or quits.
   This list is used by the lusers to decide whether to handle
   unaddressed messages. If the length of the IRC prefix
   'nick!user@host' for a message indexes to its name, that luser
   responses.

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     <<botname>>s = []
     def list_<<botname>>s(c, e):
         for <<botname>> in filter(lambda n: n.startswith(NAME),
                                   e.arguments[-1].split(' ')):
             if <<botname>> not in <<botname>>s:
                 <<botname>>s.append(<<botname>>)
         <<botname>>s.sort()
     <<botname>>.on_namreply = list_<<botname>>s
   #+END_SRC

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
         let mut last_lines = HashMap::new();
         let mut <<botname>>s = vec![];
         'messages: for message in freenode.iter() {
             let msg = message.unwrap();
             if let Command::Response(Response::RPL_NAMREPLY, _, Some(ref names)) = msg.command {
                 <<botname>>s.extend(names.split(' ')
                                    .filter(|n| n.starts_with(NAME))
                                    .map(String::from));
                 <<botname>>s.sort();
                 <<botname>>s.dedup();
                 if !<<botname>>s.contains(&freenode.current_nickname().into()) {
                     let _ = freenode.reconnect();
                 }
                 continue 'messages;
             }
             if let Some(nick) = msg.source_nickname() {
   #+END_SRC

   Ignore bots and freenode

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
                 if nick.contains("bot") || nick.contains("freenode") {
                     continue 'messages;
                 }
   #+END_SRC

   Update <<botname>>s list

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
                 if nick.starts_with(NAME) {
                     let nick = String::from(nick);
                     match msg.command {
   #+END_SRC

   Do not merge the following arms. Otherwise a join #c1 -> insert ->
   join #c2 -> remove sequence might happen.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
                         Command::JOIN(..) => {
                             if let Err(idx) = <<botname>>s.binary_search(&nick) {
                                 <<botname>>s.insert(idx, nick)
                             }
                         }

   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     relay_msg = defaultdict(list) # dict<nick, [(source, line)]>
     def relay(c, target, nick):
         for (source, line) in relay_msg[nick]:
             c.privmsg(target, "{}: <{}> {}".format(nick, source, line))
         del relay_msg[nick]
     <<botname>>.on_nick = lambda c, e: relay(c, "#vn<<botname>>", e.target)
   #+END_SRC

   The next lambdas are abusing python logical operator, but they read
   like English.

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def <<botname>>_joins(e):
         if e.source.nick not in <<botname>>s:
             <<botname>>s.append(e.source.nick)
             <<botname>>s.sort()

     def on_join(c, e):
         nick = e.source.nick
         if nick.startswith(NAME):
             return <<botname>>_joins(e)
         relay(c, e.target, nick)
     <<botname>>.on_join = on_join
   #+END_SRC

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
                         Command::QUIT(..) => {
                             if let Ok(idx) = <<botname>>s.binary_search(&nick) {
                                 <<botname>>s.remove(idx);
                             }
                         }
                         _ => (),
                     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     <<botname>>.on_quit = lambda c, e: e.source.startswith(NAME) and <<botname>>s.remove(e.source.nick)
   #+END_SRC

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
                     continue 'messages;
                 }
             }
   #+END_SRC

   Actual message processing. Ignore the other lusers.

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     last_lines = defaultdict(list) # dict<nick, line>
     def on_pubmsg(c, e):
         nick = e.source.nick
         if nick.startswith(NAME): return
         my_nick = c.get_nickname()
         msg = e.arguments[0]
         if msg == "report!":
             return c.privmsg(e.target, report())
         def handling(e):
             return <<botname>>s[len(e.source) % len(<<botname>>s)] == my_nick
         if msg.startswith('s/'):
             parts = msg.split('/')
             if (len(parts) >= 3 and handling(e)
                 and parts[1] in last_lines[nick]):
                 return c.privmsg(e.target, "{} meant: {}".format(
                     nick, last_lines[nick].replace(parts[1], parts[2])))
         else:
             last_lines[nick] = msg
         addressed = msg.startswith(my_nick)
         if addressed or handling(e):
             if addressed:
                 msg = msg[len(my_nick) + 2:]  # remove addressing
             handle(c, e, msg)
     <<botname>>.on_pubmsg = on_pubmsg
   #+END_SRC

   =trimmed_line= is here to hoist the trimmed line out of its
   assignment block. Rust: the compiler knows better than you do.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
             let channel;
             let trimmed_line;
             let mut line;

             if let Command::PRIVMSG(ref target, ref message) = msg.command {
                 channel = target;
                 line = message
             } else {
                 continue 'messages;
             }

             if line == "report!" {
                 freenode.send(Command::PRIVMSG(channel.clone(),
                                                format!("operated by {} with source code {}",
                                                        freenode.config()
                                                                .owners
                                                                .as_ref()
                                                                .map(|v| v.join(", "))
                                                                .unwrap_or("someone anonymous"
                                                                               .into()),
                                                        post_source_code())))
                         .unwrap();
                 continue 'messages;
             }
             if line.starts_with("s/") {
                 let parts = line.split('/').collect::<Vec<_>>();
                 if parts.len() < 3 {
                     continue 'messages;
                 }
                 if let Some(old_line) = last_lines.get(&msg.source_nickname().map(String::from)) {
                     if <<botname>>s[msg.prefix.clone().unwrap().len() % <<botname>>s.len()] ==
                        freenode.current_nickname() {
                         freenode.send(Command::PRIVMSG(channel.clone(),
                                                        format!("{} meant to say \"{}\"",
                                                                msg.source_nickname().unwrap(),
                                                                (old_line as &str)
                                                                    .replace(parts[1], parts[2]))))
                                 .unwrap();
                     }
                 }
             } else {
                 last_lines.insert(msg.source_nickname().map(String::from), line.clone());
             }

             let addressed = line.starts_with(freenode.current_nickname());
             if addressed ||
                <<botname>>s[msg.prefix.unwrap().len() % <<botname>>s.len()] == freenode.current_nickname() {
                 if addressed {
                     trimmed_line = line[freenode.current_nickname().len() + 2..].into();
                     line = &trimmed_line;
                 }
                 'handling: for h in &handlers {
                     if h.can_handle(line) {
                         match h.run(line) {
                             Err(e) => println!("{:?} causes {:?}", line, e),
                             Ok(reply) => {
                                 if !reply.is_empty() {
                                     freenode.send(Command::PRIVMSG(channel.clone(), reply)).unwrap();
                                     continue 'messages;
                                 }
                             }
                         }
                     }
                 }
             }
         }
     }
   #+END_SRC

   Rust handler scaffolding: casting into a common =Error= type and
   associating regexes with their handling function. Rust is
   surprisingly more object-happy than python.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     #[derive(Debug)]
     enum Error {
         Data(String),
         Io(std::io::Error),
         Hyper(hyper::error::Error),
         Xml(quick_xml::error::Error),
         Json(rustc_serialize::json::ParserError),
     }

     struct Handler<'a>(Regex, &'a (Fn(&Regex, &str) -> Result<String, Error>));
     impl<'a> Handler<'a> {
         fn can_handle(&self, line: &str) -> bool {
             self.0.is_match(&line)
         }
         fn run(&self, line: &str) -> Result<String, Error> {
             self.1(&self.0, &line)
         }
     }
   #+END_SRC

   Get title from URLs. The rust version only grabs the first URL in
   each message. Some uninteresting domains are ignored:

   #+NAME: uninteresting
   #+BEGIN_SRC text
     "imgur.com/", "smbc-comics.com/", "libgen.io/"
   #+END_SRC

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     const TITLE_REGEX: &'static str = r"https?:[^\s]+";
     fn get_title(regex: &Regex, line: &str) -> Result<String, Error> {
         use hyper::header::{UserAgent, Cookie, CookiePair};
         use scraper::{Html, Selector};

         let url = regex.captures(&line).unwrap().expand("$0");
         if [<<uninteresting>>].iter().any(|domain| url.contains(domain)) {
             return Ok(String::new());
         }
         let mut response = try!(Client::new()
                                 .get(&url)
                                 .header(UserAgent("Firefox".into()))
                                 .header(Cookie(vec![CookiePair::new(// cookie to access NYtimes articles
                                     "NYT-S".into(),
                                     "0MOTYRtE4oUSHDXrmvxADeHEluv5kUWdpUdeFz9\
                                      JchiAKuaKkdl/6loIV.Ynx4rkFI"
                                         .into())]))
                                 .send()
                                 .map_err(Error::Hyper));
         let mut body = [0; 50_000];
         response.read_exact(&mut body).ok();
         if let Some(title_elem) = Html::parse_fragment(&String::from_utf8_lossy(&body))
                                       .select(&Selector::parse("title").unwrap())
                                       .next() {
             Ok(title_elem.first_child()
                          .unwrap()
                          .value()
                          .as_text()
                          .unwrap()
                          .replace("\n", " ")
                          .trim()
                          .into())
         } else {
             Err(Error::Data("Response has no title".into()))
         }
     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def title(text):
         """
         Retrieve titles from URL in text.

         TODO This case should ignore the 404.
         >>> print(title('https://hdhoang.space/404 https://hdhoang.space/')) # doctest: +IGNORE_EXCEPTION_DETAIL
         Traceback (most recent call last):
           ...
         urllib.error.HTTPError: HTTP Error 404: Not Found

         >>> print(title('https://hdhoang.space/luser.html https://hdhoang.space/luser.html'))
         IRC bot / IRC bot

         >>> print(title('http://www.nytimes.com/2016/01/26/business/marvin-minsky-pioneer-in-artificial-intelligence-dies-at-88.html'))
         Marvin Minsky, Pioneer in Artificial Intelligence, Dies at 88 - The New York Times

         >>> print(title('http://www.baomoi.com/bao-nhieu-tan-bot-trung-quoc-da-duoc-nhap-ve-lam-tra-o-long-tea-plus/c/18486151.epi'))
         Bao nhiêu tấn bột Trung Quốc đã được nhập về làm trà Ô long TEA Plus? - GĐ&XH;

         >>> print(title('http://news.zing.vn/chi-tiet-ban-do-cam-duong-dip-29-o-ha-noi-post574142.html'))
         Chi tiết bản đồ cấm đường dịp 2/9 ở Hà Nội - Thời sự - Zing.vn

         >>> print(title('https://www.facebook.com/photo.php?fbid=261863914155282&set=a.261860180822322.1073742015.100009950253866&type=3&theater'))
         Vo Thanh Thuy - Vo Thanh Thuy added 10 new photos to the... | Facebook
         """
         titles = []
         urls = filter(lambda w: w.startswith('http'), text.split())
         for u in urls:
             if any(d in u
                    for d in [<<uninteresting>>]):
                 continue
             request = build_opener(HTTPCookieProcessor())
             request.addheaders = [('Accept-Encoding', 'gzip'), ('User-Agent', 'Mozilla/5.0')]
             response = request.open(u)
             if response.info().get('Content-Encoding') == 'gzip':
                 if version_info.major == 3:
                     response = GzipFile(fileobj=response)
                 else:
                     response = GzipFile(fileobj=StringIO(response.read()))
             title = BeautifulSoup(response.read(50000), 'html.parser').title
             response.close()
             if title: titles.append(title.string.replace('\n', '').strip())
         return ' / '.join(titles)
   #+END_SRC

   Ask Wolfram|Alpha, the knowledge engine.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     const WA_REGEX: &'static str = concat!(r"^(\.|!|:)", "wa (?P<query>.+)");
     fn wolframalpha(regex: &Regex, line: &str) -> Result<String, Error> {
         use hyper::header::ContentLength;
         use quick_xml::{XmlReader, Event};

         let mut response = try!(Client::new()
                                     .get(&regex.captures(&line)
                                                .unwrap()
                                                .expand("http://api.wolframalpha.\
                                                         com/v2/query?format=plaintext&appid=\
                                                         <<wolframalpha_key>>&input=$query"))
                                     .send()
                                     .map_err(Error::Hyper));
         let mut xml =
             String::with_capacity(**response.headers.get::<ContentLength>().unwrap() as usize);
         try!(response.read_to_string(&mut xml).map_err(Error::Io));
         let tree = XmlReader::from_str(&xml).trim_text(true);
         let mut answers = vec![];
         for event in tree {
             match event {
                 Ok(Event::Start(ref elem)) if elem.name() == b"pod" => {
                     answers.push(String::from_utf8(try!(elem.attributes()
                                                             .next()
                                                             .unwrap()
                                                             .map_err(Error::Xml))
                                                        .1
                                                        .into())
                                      .unwrap() + ": ")
                 }
                 Ok(Event::Text(elem)) =>{
                     answers.push(try!(elem.into_string().map_err(Error::Xml)) + " /")
                 }
                 _ => (),
             }
         }
         Ok(answers.join(" "))
     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def wolframalpha(text):
         """
         Query WolframAlpha about text.

         >>> print(wolframalpha('mass of sol'))
         Input interpretation: Sun | mass / Result: 1.988435×10^30 kg  (kilograms) / Unit conversions: 4.383749×10^30 lb  (pounds) / 2.191874×10^27 sh tn  (short tons) / 1.988435×10^33 grams / 1 M_☉  (solar ma http://wolframalpha.com/?input=mass%20of%20sol

         Check URL encoding:
         >>> print(wolframalpha('4+6'))
         Input: 4+6 / Result: 10 / Number name: ten / Number line: Manipulatives illustration:  | + |  |  |  4 |  | 6 |  | 10 / Typical human computation times: age 6:  5.3 seconds  |  age 8:  2.6 seconds  |  age 10:  1.7 seconds  |   age 18:  0.93 seconds (ignoring concentration, repetition, variations in education, etc.) / 

         >>> print(wolframalpha('é'))
         Input interpretation: é  (character) / Visual form: Name: Latin small letter e with acute / Positions in alphabets: Czech | 9th letter (33rd letter from the end) Slovak | 12th letter (35th letter from http://wolframalpha.com/?input=%C3%A9
         """
         r = urlopen(
             'http://api.wolframalpha.com/v2/query?format=plaintext&appid=<<wolframalpha_key>>&input='
             + quote(text))
         tree = ET.parse(r)
         reply = ''
         for n in tree.iter():
             if n.tag == 'pod':
                 reply += n.attrib['title'] + ': '
             if n.tag == 'plaintext' and n.text and len(n.text.strip()):
                 reply += n.text + ' / '
         if len(reply) > 512:
             reply = reply[:200] + " http://wolframalpha.com/?input=" + quote(text)
         r.close()
         return reply.replace('\n', ' ')
   #+END_SRC

   Returns the first Google result.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     const GOOGLE_REGEX: &'static str = concat!(r"^(\.|!|:)", "g (?P<query>.+)");
     fn google(regex: &Regex, line: &str) -> Result<String, Error> {
         use rustc_serialize::json::Json;
         // API: https://developers.google.com/web-search/docs/#code-snippets
         let mut response = try!(Client::new()
                                     .get(&regex.captures(&line)
                                                .unwrap()
                                                .expand("https://ajax.googleapis.\
                                                         com/ajax/services/search/web?v=1.\
                                                         0&rsz=1&q=$query"))
                                     .send()
                                     .map_err(Error::Hyper));
         let json = try!(Json::from_reader(&mut response).map_err(Error::Json));
         let results = try!(json.search("results").ok_or(Error::Data("No results".into())));
         if results.as_array().unwrap().is_empty() {
             return Ok("No results".into());
         }
         let url = try!(results[0]
                            .find("unescapedUrl")
                            .ok_or(Error::Data("No url".into()))
                            .map(|j| j.as_string().unwrap()));
         let title = try!(results[0]
                              .find("titleNoFormatting")
                              .ok_or(Error::Data("No title".into()))
                              .map(|j| j.as_string().unwrap()));
         Ok(format!("{} {}", title, url))
     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def google(text):
         """
         Retrieve the first result from a google for text.

         >>> print(google('á'))
         Á - Wikipedia, the free encyclopedia https://en.wikipedia.org/wiki/%C3%81

         >>> print(google('naesuth no result here'))
         0 result
         """
         r = urlopen(
             'https://ajax.googleapis.com/ajax/services/search/web?v=1.0&rsz=1&q=' +
             quote(text))
         data = json.loads(r.read().decode())['responseData']
         r.close()
         if not data['results']:
             return '0 result'
         return data['results'][0]['titleNoFormatting'] + \
         ' ' +  data['results'][0]['unescapedUrl']
   #+END_SRC

   Translates using [[https://tech.yandex.com/translate/doc/dg/reference/translate-docpage/][Yandex]]:

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     const TRANSLATE_REGEX: &'static str = concat!(r"^(\.|!|:)", "tr (?P<lang>[^ ]+) (?P<text>.+)");
     fn translate(regex: &Regex, line: &str) -> Result<String, Error> {
         use rustc_serialize::json::Json;
         let mut response = try!(Client::new()
                                     .get(&regex.captures(&line)
                                                .unwrap()
                                                .expand("https://translate.yandex.\
                                                                  net/api/v1.5/tr.\
                                                                  json/translate?key=<<yandex_key>>&text=$text&\
                                                                  lang=$lang"))
                                     .send()
                                     .map_err(Error::Hyper));
         let json = try!(Json::from_reader(&mut response).map_err(Error::Json));
         let reply = match json.find("code").unwrap().as_u64().unwrap() {
             200 => {
                 format!("{}: {}",
                         json.find("lang").unwrap().as_string().unwrap(),
                         json.find("text").unwrap()[0].as_string().unwrap())
             }
             501 => json.find("message").unwrap().as_string().unwrap().into(),
             _ => format!("{:?}", json.as_string()),
         };
         Ok(reply)
     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def translate(direction, text):
         """
         Translate text according to direction.

         >>> print(translate('la-en', 'ad astra per aspera'))
         la-en: to the stars through rough

         >>> print(translate('vi', "you think you're good?"))
         en-vi: ngươi nghĩ ngươi giỏi không?

         >>> print(translate('en', 'mày nghĩ mày ngon?'))
         vi-en: you think you're so tough?

         >>> print(translate('jbo', 'hello')) # doctest: +IGNORE_EXCEPTION_DETAIL
         Traceback (most recent call last):
           ...
         urllib.error.HTTPError: HTTP Error 400: BAD REQUEST
         """
         if not text:
             return 'Missing text'
         r = urlopen(
             'https://translate.yandex.net/api/v1.5/tr.json/translate?key=<<yandex_key>>&text={}&lang={}'
             .format(
                 quote(text), direction))
         data = json.loads(r.read().decode())
         r.close()
         return data['lang'] + ": " + data['text'][0]
   #+END_SRC

   Posts its own source code:

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     fn post_source_code() -> String {
         use url::form_urlencoded;
         let form = [("read:1", "3"),
                     ("name:1", "main.rs"),
                     ("f:1", include_str!("main.rs")),
                     ("read:2", "3"),
                     ("name:2", "Cargo.toml"),
                     ("f:2", include_str!("../Cargo.toml"))];
         let result = Client::new()
                          .post("http://ix.io")
                          .body(&form_urlencoded::serialize(form.iter()))
                          .send();
         match result {
             Ok(mut response) => {
                 let mut reply = String::new();
                 let _ = response.read_to_string(&mut reply);
                 reply.replace('\n', " ")
             }
             Err(e) => format!("unable to post: {:?}", e),
         }
     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def report():
         """
         Return owner and source code

         >>> print(report()) # doctest: +ELLIPSIS
         operated by ... with source code http://ix.io/...
         """
         conn = HTTPConnection('ix.io')
         conn.request(
             'POST', '/',
             'read:1=3&name:1=<<botname>>.py&f:1=' + quote(open(__file__).read()))
         return "operated by {} with source code {}".format(
                 os.getenv('USER'), conn.getresponse().read().decode().strip())
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     if __name__ == '__main__':
         main()
   #+END_SRC

* OpenVPN
  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S openvpn
  #+END_SRC

  #+NAME: openvpn_common
  #+BEGIN_SRC conf
    dev tun
    topology subnet
    persist-key
    persist-tun
    keepalive 10 30
    tls-version-min 1.2
    tls-cipher TLS-DHE-RSA-WITH-AES-128-CBC-SHA
    <tls-auth>
    <<ta_key>>
    </tls-auth>
    <ca>
    -----BEGIN CERTIFICATE-----
    MIIEYTCCA0mgAwIBAgIJAPxrcItU3yz8MA0GCSqGSIb3DQEBCwUAMH0xCzAJBgNV
    BAYTAlZOMQswCQYDVQQIEwJITjEOMAwGA1UEBxMFSGFOb2kxDTALBgNVBAoTBHph
    aGUxEDAOBgNVBAMTB3phaGUgQ0ExEDAOBgNVBCkTB3phaGUubWUxHjAcBgkqhkiG
    9w0BCQEWD2hkaG9hbmdAemFoZS5tZTAeFw0xNTA5MjYxMTM0NTRaFw0yNTA5MjMx
    MTM0NTRaMH0xCzAJBgNVBAYTAlZOMQswCQYDVQQIEwJITjEOMAwGA1UEBxMFSGFO
    b2kxDTALBgNVBAoTBHphaGUxEDAOBgNVBAMTB3phaGUgQ0ExEDAOBgNVBCkTB3ph
    aGUubWUxHjAcBgkqhkiG9w0BCQEWD2hkaG9hbmdAemFoZS5tZTCCASIwDQYJKoZI
    hvcNAQEBBQADggEPADCCAQoCggEBANXOfdISWeotIr3neKpj6IGBlCLMEBNtMB1r
    bTIgkxe9tnNd4jBufq6duLK91ioqcJiAxMLRovYtaRTOpQit5/PnAm2Iwu3u2mGX
    EftWEBSVt437NMVA6L2Jemv1lp81vmzJIODgPQ9elrNteQ3ccAMCpuj/l6PhGeFq
    JvK+dNIJcm2+xM15S6ESwjsZxwijiT3TMJAjXJPC5R3gpULoTHrphPGrS/0RIq9c
    Bd/+4Q7k1MguPK2XSKHiJnUIkQJ/m/XGT2iXVEzhOsHZ8vlaNq1xBzTko10nEb7I
    sOQjuH4GCZMeoYnF3egg534fg+BYPAecuKglqdIpnm4+syJsrR0CAwEAAaOB4zCB
    4DAdBgNVHQ4EFgQUsDCM7/aJ6AjPVQPEbdDTiTa9WIswgbAGA1UdIwSBqDCBpYAU
    sDCM7/aJ6AjPVQPEbdDTiTa9WIuhgYGkfzB9MQswCQYDVQQGEwJWTjELMAkGA1UE
    CBMCSE4xDjAMBgNVBAcTBUhhTm9pMQ0wCwYDVQQKEwR6YWhlMRAwDgYDVQQDEwd6
    YWhlIENBMRAwDgYDVQQpEwd6YWhlLm1lMR4wHAYJKoZIhvcNAQkBFg9oZGhvYW5n
    QHphaGUubWWCCQD8a3CLVN8s/DAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUA
    A4IBAQAKkiDOWmwu1D+qbCSYaSxiMfJ70FyA/o+AuCDeaGxKdFLZ2JQgYK/az3y8
    tGQKBc6AdUY7BoN1Ab/6TOz+hWvmyNOOvq2AMgt2bHHA+JquRZMdgw59OtbB2BjC
    vBs2cxRJWdmv8aSltcqVpm2HNHy3mzcq8i0CdFluxDV+zQmvhGVypAipYTlhdi0l
    KLJlB+3fqS5GQB0wPmkV2N6WJdm0NfoTbBOCXwVb4ChyrgryQaOQi5nu8wO9tzeO
    kK/jQJRFKpdwBYqAe0Q/JP95pVjctyiVFg97ppvQ557QFcY1pHapAwhyBmxYiLak
    W4pz42IduC2pnZ3ut4C7UzpeDMRr
    -----END CERTIFICATE-----
    </ca>
  #+END_SRC

* SSH
  :PROPERTIES:
  :header-args+: :tangle ~/.ssh/config
  :END:

  SSH encryption settings by https://stribika.github.io/2015/01/04/secure-secure-shell.html

  #+BEGIN_SRC conf
    Host *
    KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
    Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
    MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,hmac-ripemd160,umac-128@openssh.com,hmac-sha1
  #+END_SRC

  Machines
  #+BEGIN_SRC conf :tangle ~/.ssh/known_hosts
    <<prefix>>1 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBL5T08oNKjMm7yWA0zqqqSwl6Vn0nlpoAlpP9USh0NewyfVO/xOGgkUWIlUU8p85Z3zK9YY3pl0zfQQrQHvp88Y=
    <<prefix>>185 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMCCrxVyoz4ekNh2zAbr2JzvJdojMMoHYnbo20Qjn3sW+P7FUuuiknzbX0aX81BZWdKFwspNLJAXHLoiS8zy8Wc=
  #+END_SRC

  #+BEGIN_SRC conf
    Host <<prefix>>1
    User root
    IdentityFile ~/.ssh/kub
  #+END_SRC

  #+BEGIN_SRC elisp :tangle ~/.emacs
    (eval-after-load 'tramp
      '(add-to-list 'tramp-default-method-alist '("vorme" nil "scp")))
  #+END_SRC

  #+BEGIN_SRC conf
    Host <<prefix>>185
    User <<username>>
    IdentityFile ~/.ssh/kub
  #+END_SRC

  #+BEGIN_SRC elisp :tangle ~/.emacs
    (eval-after-load 'tramp
      '(add-to-list 'tramp-default-proxies-alist '("<<prefix>>185" "root" "/ssh:<<prefix>>185:")))
  #+END_SRC

* GUI

  #+BEGIN_SRC sh :tangle ~/.pam_environment
    CUPS_SERVER=kub:631
    BROWSER=firefox

    PATH=$HOME/.multirust/toolchains/nightly/bin:$PATH
    RUST_BACKTRACE=1
  #+END_SRC

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S fcitx-{gtk2,gtk3,qt4,qt5,kkc,unikey}
  #+END_SRC

  #+BEGIN_SRC sh :tangle ~/.pam_environment
    XMODIFIERS=@im=fcitx
    QT_IM_MODULE=fcitx
    GTK_IM_MODULE=fcitx
  #+END_SRC

  #+BEGIN_SRC conf :tangle ~/.config/fcitx/config
    [Hotkey]
    # Trigger Input Method
    TriggerKey=ALT_Z
    # Use extra trigger key only after using it to inactivate
    # Available Value:
    # True False
    #UseExtraTriggerKeyOnlyWhenUseItToInactivate=True
    # Extra key for trigger input method
    # Available Value:
    # R_CTRL
    # R_SHIFT
    # L_SHIFT
    # L_CTRL
    # ALT_L_SHIFT
    # ALT_R_SHIFT
    # CTRL Both
    # SHIFT Both
    # L_ALT
    # R_ALT
    # ALT Both
    # Left Super
    # Right Super
    # Super Both
    # Ctrl+Left Super
    # Ctrl+Right Super
    # Super+Left Ctrl
    # Super+Right Ctrl
    # Disabled
    # Custom
    SwitchKey=Disabled
    # Custom switch key
    #CustomSwitchKey=
    # Activate input method
    #ActivateKey=
    # Inactivate Input Method
    #InactivateKey=
    # Enable Hotkey to scroll Between Input Method
    # Available Value:
    # True False
    #IMSwitchKey=True
    # Include Inactivate when scrolling between Input Method
    # Available Value:
    # True False
    IMSwitchIncludeInactive=True
    # Scroll between Input Method
    # Available Value:
    # CTRL_SHIFT
    # ALT_SHIFT
    # CTRL_SUPER
    # ALT_SUPER
    #IMSwitchHotkey=CTRL_SHIFT
    # Reload configuration
    #ReloadConfig=CTRL_5
    # Interval of Two Key Input
    #TimeInterval=250
    # Switching Virtual Keyboard
    #VKSwitchKey=CTRL_ALT_B
    # Switching Remind Mode
    #RemindSwitchKey=
    # Switching Full Width Character Mode
    #FullWidthSwitchKey=
    # Switch Full Width Punc Mode
    #PuncSwitchKey=CTRL_.
    # Prev Page
    #PrevPageKey=- UP
    # Next Page
    #NextPageKey== DOWN
    # Choose Second and Third Candidate Word
    #SecondThirdCandWordKey=
    # Saving All Config and Input History
    #SaveAllKey=CTRL_ALT_S
    # Switch Embeded Preedit
    #SwitchPreedit=CTRL_ALT_P
    # Previous Candidate Word
    #PrevWord=SHIFT_TAB
    # Next Candidate Word
    #NextWord=TAB

    [Program]
    # Seconds sleep before fcitx really start
    #DelayStart=0
    # Share State Among Window
    # Available Value:
    # No
    # All
    # PerProgram
    ShareStateAmongWindow=All
    # Default Input Method State
    # Available Value:
    # Inactive
    # Active
    #DefaultInputMethodState=Inactive

    [Output]
    # Type half width Punc After a Number
    # Available Value:
    # True False
    #HalfPuncAfterNumber=True
    # Disable Paging in Remind Mode
    # Available Value:
    # True False
    #RemindModeDisablePaging=True
    # Commit when toggle state
    # Available Value:
    # True False
    #SendTextWhenSwitchEng=True
    # Candidate Word Number
    #CandidateWordNumber=5
    # Give the tips of Phrase
    # Available Value:
    # True False
    #PhraseTips=True
    # Do not commit preedit text when unfocus a window
    # Available Value:
    # True False
    #DontCommitPreeditWhenUnfocus=False

    [Appearance]
    # Show Input Method Hint After Input method changed
    # Available Value:
    # True False
    #ShowInputWindowAfterTriggering=True
    # Show Input Method Hint After Input method changed and Focus in
    # Available Value:
    # True False
    #ShowInputWindowWhenFocusIn=False
    # Input Method Hint will be only shown when state is active
    # Available Value:
    # True False
    #ShowInputWindowOnlyWhenActive=True
    # Show Input Speed
    # Available Value:
    # True False
    #ShowInputSpeed=False
    # Show Version
    # Available Value:
    # True False
    #ShowVersion=False
    # Do not show input window if there is only preedit string
    # Available Value:
    # True False
    #HideInputWindowWhenOnlyPreeditString=False
    # Do not show input window if there is only one candidate and preedit
    # Available Value:
    # True False
    #HideInputWindowWhenOnlyOneCandidate=False
  #+END_SRC

  #+BEGIN_SRC sh :tangle ~/.config/openbox/autostart
    fcitx &
  #+END_SRC

  #+BEGIN_SRC sh :tangle ~/.config/openbox/autostart
    compton &
    xbacklight =30 &
    tint2 &
    kwalletd &
    lxpolkit &
    firefox &
    gpg-agent --enable-ssh-support --daemon emacs &
    quasselclient &
    yakuake &
    keepass &
    pragha -p &
    viber &
  #+END_SRC

** kwin
   :PROPERTIES:
   :header-args+: :tangle ~/.config/kwinrulesrc
   :END:

   #+BEGIN_SRC conf
     [1]
     Description=Window settings for firefox
     shortcut=F5
     shortcutrule=2
     windowrole=browser
     windowrolematch=1
     wmclass=navigator firefox
     wmclasscomplete=true
     wmclassmatch=1
   #+END_SRC

   Put emacs on F4

   #+BEGIN_SRC conf
     [2]
     Description=Application settings for emacs
     shortcut=F4
     shortcutrule=2
     wmclass=emacs
     wmclasscomplete=false
     wmclassmatch=1
   #+END_SRC

   Put konsole on F6

   #+BEGIN_SRC conf
     [3]
     Description=Application settings for konsole
     shortcut=F6
     shortcutrule=2
     wmclass=konsole
     wmclasscomplete=false
     wmclassmatch=1
   #+END_SRC

   #+BEGIN_SRC conf
     [4]
     Description=No border on anything
     noborder=true
     noborderrule=2
   #+END_SRC

   #+BEGIN_SRC conf
     [General]
     count=4
   #+END_SRC

* Git
  #+BEGIN_SRC conf :tangle .git/config
    [core]
            repositoryformatversion = 0
            filemode = true
            bare = false
            logallrefupdates = true
    [remote "origin"]
            url = https://gitlab.com/<<username>>/<<username>>
            pushUrl = gitlab.com:<<username>>/<<username>>
            pushUrl = github.com:<<username>>/<<username>>
            pushUrl = bitbucket.org:<<username>>/<<username>>
            fetch = +refs/heads/*:refs/remotes/origin/*
    [branch "master"]
            remote = origin
            merge = refs/heads/master
  #+END_SRC

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S git
  #+END_SRC

  #+BEGIN_SRC conf :tangle ~/.gitconfig
    [user]
    name = Hoàng Đức Hiếu
    email = <<username>>@<<domain>>
    [color]
    ui = auto
    [core]
    eol = lf
    whitespace = trailing-space,space-before-tab
    [alias]
    ml = log --reverse --topo-order ORIG_HEAD..
    [merge]
    conflictstyle = diff3
    [push]
    default = simple
    [pull]
    rebase = true
    [rebase]
    stat = true
  #+END_SRC

  Code hosting sites:

  #+BEGIN_SRC conf :tangle ~/.ssh/known_hosts
    github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
    bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
    gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
  #+END_SRC

  #+BEGIN_SRC conf :tangle ~/.ssh/config
    Host gitlab.com github.com bitbucket.org
    User git
    IdentityFile ~/.ssh/git
    Host git.kde.org
    User git
    IdentityFile ~/.ssh/kde
    Host heroku.com
    IdentityFile ~/.ssh/heroku
  #+END_SRC

  Magit is awesome.

  #+BEGIN_SRC elisp :tangle ~/.emacs
    (eval-after-load 'use-package
      '(progn
         (use-package magit
           :bind ("C-x g" . magit-status)
           :config
           (setq magit-save-repository-buffers 'dontask
                 magit-push-always-verify nil))))
  #+END_SRC

* Crawl

  #+BEGIN_SRC conf :tangle ~/.crawlrc
    tile_full_screen = false
    autopickup_exceptions += <tomahawk, <throwing net, <javelin, <rock, <immol
    autopickup_exceptions += <misc, <ego, <artefact, <mutagenic
  #+END_SRC

* ArchLinux
  Pacman config

  #+NAME: pacman_common
  #+BEGIN_SRC conf
    [options]
    VerbosePkgLists
    UseSyslog
    CheckSpace
    HoldPkg = pacman glibc
    SigLevel = Required DatabaseOptional
    LocalFileSigLevel = Optional

    [core]
    Include = /etc/pacman.d/mirrorlist
    [extra]
    Include = /etc/pacman.d/mirrorlist
    [community]
    Include = /etc/pacman.d/mirrorlist
    [blackarch]
    Server = http://f.archlinuxvn.org/$repo/$repo/os/$arch
  #+END_SRC

  Refresh database

  #+BEGIN_SRC sh :dir /sudo::
    dirmngr --daemon
    pacman-key -r 7533BAFE69A25079
    pacman-key --lsign 7533BAFE69A25079
    <<pacman>> -S -y
  #+END_SRC

  AUR helper

  #+BEGIN_SRC yaml :tangle ~/Copy/bin/aur :shebang #!/bin/ansible-playbook
    - hosts: arch
      gather_facts: no
      vars:
        store: /tmp/aur
      vars_prompt:
        - name: package
          private: no
      tasks:
        - file: state=directory path={{store}}
        - get_url: url=https://aur4.archlinux.org/cgit/aur.git/snapshot/{{package}}.tar.gz dest={{store}}/
        - unarchive: copy=no src={{store}}/{{package}}.tar.gz dest={{store}}
        - command: nice makepkg --noconfirm --install --force --syncdeps chdir={{store}}/{{package}}
  #+END_SRC

  Yaourt config

  #+BEGIN_SRC conf :tangle ~/.yaourtrc
    AURUPGRADE=1
    EXPORT=1
    EXPORTDIR=~
    BUILD_NOCONFIRM=1
    EDITFILES=0
  #+END_SRC

  Base utils

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S haveged p7zip parallel pkgfile yaourt
    <<system_ctl>> enable --now haveged
  #+END_SRC

  #+BEGIN_SRC sh
    pkgfile -u
  #+END_SRC

  Dev-env:

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S base-devel rust android-tools
  #+END_SRC

  Monitoring:

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S ethtool lm_sensors traceroute psmisc \
        procps-ng inetutils ltrace sysdig atop iotop
  #+END_SRC

  #+BEGIN_SRC sh :tangle ~/Copy/bin/strace :shebang #!/bin/sh :no-expand
    exec /usr/bin/ltrace -CSn2 $@
  #+END_SRC

  Of course emacs is installed, now run it

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S emacs-pkgbuild-mode
  #+END_SRC

  #+BEGIN_SRC conf :tangle ~/.config/systemd/user/emacs.service
    [Unit]
    Description=Emacs

    [Service]
    ExecStart=/bin/emacs
    Restart=always
    RestartSec=1sec

    [Install]
    WantedBy=default.target
  #+END_SRC

  #+BEGIN_SRC sh :dir ~
    <<user_ctl>> enable --now emacs syncthing pulseaudio
  #+END_SRC

** kub
   :PROPERTIES:
   :header-args+: :dir /sudo:10.117.14.185:
   :END:
*** Network
    :PROPERTIES:
    :header-args+: :tangle-mode 260
    :END:
    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/systemd/network/eth0.network
      [Match]
      Name = eth0

      [Network]
      Address = <<prefix>>185/24
      Gateway = <<prefix>>1
      DNS = <<prefix>>1
      IPForward = yes

      Tunnel=he-ipv6
      Address=<<prefix6>>1/64
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/systemd/network/he-ipv6.netdev
      [NetDev]
      Name=he-ipv6
      Kind=sit
      MTUBytes=1472

      [Tunnel]
      Local=<<prefix>>185
      Remote=216.218.221.42
      TTL=255
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/systemd/network/he-ipv6.network
      [Match]
      Name=he-ipv6
      [Network]
      Address=2001:470:35:62a::2/64
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/systemd/system/he-ipv6-route.service
      [Unit]
      After=network.target

      [Service]
      Type=oneshot
      RemainAfterExit=yes
      ExecStart=/bin/ip -6 route add default src <<prefix6>>1 dev he-ipv6
      ExecStop=/bin/ip -6 route del default

      [Install]
      WantedBy=multi-user.target
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/radvd.conf
      interface eth0 {
      AdvSendAdvert on;
      MinRtrAdvInterval 3;
      MaxRtrAdvInterval 10;
      AdvLinkMTU 1472;
      prefix <<prefix6>>/64 {
      AdvOnLink on;
      AdvRouterAddr on;
      };
      };
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/resolv.conf
      nameserver <<prefix>>1
    #+END_SRC

*** Pacman
    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/pacman.conf :tangle-mode 260
      <<pacman_common>>

      [options]
      Architecture = armv7h

      [alarm]
      Include = /etc/pacman.d/mirrorlist
      [aur]
      Include = /etc/pacman.d/mirrorlist
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/pacman.d/mirrorlist
      Server = http://vn.mirror.archlinuxarm.org/$arch/$repo
    #+END_SRC

*** LED blinking
    #+BEGIN_SRC sh :tangle /sudo:10.117.14.185:/usr/local/bin/leds :shebang #!/bin/sh
      echo none > /sys/class/leds/cubieboard:green:usr/trigger
      echo mmc0 > /sys/class/leds/cubieboard:blue:usr/trigger
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/systemd/system/leds.service
      [Service]
      Type=oneshot
      ExecStart=/usr/local/bin/leds
      RemainAfterExit=true

      [Install]
      WantedBy=basic.target
    #+END_SRC

*** Tor
    #+BEGIN_SRC sh :dir /sudo:10.117.14.185:
      <<pacman>> -S tor
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/tor/torrc :tangle-mode 420
      ContactInfo tor at <<domain>>
      Nickname kub
      DirPort 4660
      ORPort 34289
      SOCKSPort <<prefix>>185:9050
      MaxAdvertisedBandwidth 40 KBytes
      ExitPolicy reject *:*

      DataDirectory /var/lib/tor
      Log notice syslog
   #+END_SRC

*** HTTP
    #+BEGIN_SRC sh
      <<pacman>> -S nginx-mainline
    #+END_SRC

    #+BEGIN_SRC doctex :tangle /sudo:10.117.14.185:/etc/nginx/nginx.conf
      events {}
      stream {
        server {
          listen 8443;
          listen [::]:8443;
          proxy_pass [::1]:4242;
          error_log /var/log/nginx/quassel.log debug;
        }
      }
      http {
        include mime.types;
        charset utf-8;
        gzip off;
        client_max_body_size 10G;
        fastcgi_buffers 64 4K;
        root /srv/http;
        autoindex on;
        index index.html index.php;

        access_log off;
        log_not_found off;

        server {
          return 301 https://$host$request_uri;
        }

        ssl_certificate /etc/letsencrypt/live/kub.<<domain>>/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/kub.<<domain>>/privkey.pem;
        ssl_protocols TLSv1.2;
        ssl_ciphers EECDH+CHACHA20:EECDH+AES128;
        ssl_prefer_server_ciphers on;
        add_header Strict-Transport-Security "max-age=31536000; preload; includeSubdomains";

        server {
          listen 443 ssl http2 default_server;
          listen [::]:443 ssl http2 default_server;
          server_name <<domain>>;

          location /transmission {
            proxy_pass http://127.0.0.1:9091;
          }
          location /zabbix {
            root /usr/share/webapps;
            location ~ \.php(?:$|/) {
              fastcgi_split_path_info ^(.+\.php)(/.+)$;
              include fastcgi_params;
              fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
              fastcgi_pass unix:/run/php-fpm/php-fpm.sock;
            }
          }
          location /netdata {
            proxy_pass http://127.0.0.1:19999;
          }
        }
        server {
          listen 443 ssl http2;
          listen [::]:443 ssl http2;
          server_name kub.<<domain>>;
          root /usr/share/webapps/owncloud;
          location ~ \.htaccess|/data/|/config/|db_structure\.xml|README {
            deny all;
          }
          location / {
            rewrite ^/.well-known/carddav /owncloud/remote.php/carddav/ redirect;
            try_files $uri $uri/ =404;
          }
          location ~ \.php(?:$|/) {
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_pass unix:/run/php-fpm/php-fpm.sock;
          }
        }
      }
     #+END_SRC

*** DLNA
    #+BEGIN_SRC sh :dir /sudo:10.117.14.185:
      <<pacman>> -S minidlna
    #+END_SRC

    #+BEGIN_SRC sh :dir /sudo:10.117.14.185:
      <<system_ctl>> enable --now minidlna
     #+END_SRC

*** IPsec
    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/ipsec.conf
      ca letsencrypt
          auto=add
          cacert=/etc/letsencrypt/live/kub.<<domain>>/chain.pem

      conn kub
          auto=add
          left=<<prefix>>185
          leftid=kub.<<domain>>
          leftcert=/etc/letsencrypt/live/kub.<<domain>>/cert.pem
          leftsubnet=<<prefix>>0/24
          leftfirewall=yes
          leftdns=<<prefix>>1

          rightauth=eap-mschapv2
          eap_identity=%any
          rightsourceip=%dhcp
    #+END_SRC

*** OpenVPN
    #+BEGIN_SRC conf :tangle-mode 256 :tangle /sudo:10.117.14.185:/etc/openvpn/kub.conf
      <<openvpn_common>>

      key-direction 0
      tls-server
      <pkcs12>
      <<kub_pfx>>
      </pkcs12>
      <dh>
      -----BEGIN DH PARAMETERS-----
      MIIBCAKCAQEAoioJw6aUXmgBDSw6SzbSZww6i7eH0MC+Eba5qGmYJnKn2zI8dBH6
      JZKnAyz9MbD21loI6KjAnOzZkBp7DKle1cACLS229Olycr22rXWPFuhMV15TohDJ
      ArazVXSJGDL9OXhdHei96K3qXofz/3AzXEVxD0unQd5sRlgNGmunofvgWBechdmn
      YQl44SZ0asC8uUY1uiKjVyQzqeNDi3rjJtTobcPdR6Pb8CnS3cfwoWzXMwUexmfJ
      VQSNaDZIeQcwV5MEHs1XViOTiEvT8IHbJojJri0geUSJ+HkX1JTxGIUj4xxKHQ0j
      AFEjqDYFh3q7U6QgFLRWZffVLgxIZVopIwIBAg==
      -----END DH PARAMETERS-----
      </dh>
      user nobody
      group nobody

      mode server

      server 10.255.0.0 255.255.255.0
      push "route <<prefix>>54"
    #+END_SRC

*** SSH
    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/ssh/sshd_config
      Protocol 2
      HostKey /etc/ssh/ssh_host_ed25519_key

      KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
      Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
      MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,hmac-ripemd160,umac-128@openssh.com

      AllowGroups wheel
      PasswordAuthentication no
      ChallengeResponseAuthentication no
      UsePrivilegeSeparation sandbox

      Subsystem sftp /usr/lib/ssh/sftp-server
    #+END_SRC

** ton
*** Hardware
    Fix USB interfering with suspending

    #+BEGIN_SRC sh :tangle /sudo::/usr/local/bin/s230u :tangle-mode 320
      echo EHC1 > /proc/acpi/wakeup
      echo EHC2 > /proc/acpi/wakeup
    #+END_SRC

    Let powertop autotune. This conveniently waits for the trackpoint to become available for the last section.

    #+BEGIN_SRC sh :tangle /sudo::/usr/local/bin/s230u :tangle-mode 320
      powertop --auto-tune
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo::/etc/systemd/system/s230u.service
      [Service]
      Type=oneshot
      RemainAfterExit=yes
      ExecStart=/usr/local/bin/s230u

      [Install]
      WantedBy=basic.target
    #+END_SRC

    #+BEGIN_SRC sh :dir /sudo::
      <<system_ctl>> enable --now s230u
    #+END_SRC
*** Mounts
    #+BEGIN_SRC sh
      fallocate -l 2G /swap
      chmod u=rw,go= /swap
      mkswap /swap
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo::/etc/fstab
      LABEL=home /home/<<username>> ntfs-3g noatime,nofail
      LABEL=ESP /boot vfat
      /swap none swap
    #+END_SRC

*** Network
    #+BEGIN_SRC conf :tangle /sudo::/etc/systemd/network/00-bkap.network
      [Match]
      Name = enp4s0

      [Network]
      DNS = 8.8.8.8
      Address = 192.168.0.252/24
      Gateway = 192.168.0.1
      Address = 192.168.1.252/24
      Gateway = 192.168.1.1
      Address = 192.168.4.252/24
      Gateway = 192.168.4.1
      Address = 192.168.5.252/24
      Gateway = 192.168.5.1

      [Route]
      Destination=192.168.1.1
      Source=192.168.1.252
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo::/etc/systemd/network/dhcp.network
      [Network]
      DHCP=ipv4
    #+END_SRC

*** Pacman
  #+BEGIN_SRC conf :tangle /sudo::/etc/pacman.conf :tangle-mode 260
    <<pacman_common>>

    [options]
    Architecture = auto

    [multilib]
    Include = /etc/pacman.d/mirrorlist

    [antergos]
    SigLevel = PackageRequired
    Include = /etc/pacman.d/antergos-mirrorlist
  #+END_SRC

  #+BEGIN_SRC conf :tangle /sudo::/etc/pacman.d/mirrorlist
    Server = http://f.archlinuxvn.org/archlinux/$repo/os/$arch
  #+END_SRC

*** OpenVPN
    #+BEGIN_SRC conf :tangle-mode 256 :tangle /sudo::/etc/openvpn/kub.conf
      <<openvpn_common>>

      key-direction 1
      tls-client
      <pkcs12>
      <<ton_pfx>>
      </pkcs12>

      nobind
      pull

      remote k.<<domain>> 22
      verify-x509-name kub.<<domain>> name
      remote-cert-tls server
      resolv-retry infinite
    #+END_SRC

*** Fonts
    #+BEGIN_SRC sh :dir /sudo::
      <<pacman>> -S adobe-source-{sans,serif,code}-pro-fonts adobe-source-han-sans-otc-fonts
    #+END_SRC

    #+BEGIN_SRC xml :tangle ~/.config/fontconfig/fonts.conf :padline no :comments no
      <?xml version='1.0'?>
      <!DOCTYPE fontconfig SYSTEM 'fonts.dtd'>
      <fontconfig>
        <match target="font">
          <edit mode="assign" name="rgba">
            <const>none</const>
          </edit>
        </match>
        <match target="font">
          <edit mode="assign" name="hinting">
            <bool>true</bool>
          </edit>
        </match>
        <match target="font">
          <edit mode="assign" name="hintstyle">
            <const>hintslight</const>
          </edit>
        </match>
        <match target="font">
          <edit mode="assign" name="antialias">
            <bool>true</bool>
          </edit>
        </match>
        <dir>~/.fonts</dir>
        <match target="pattern">
          <test qual="any" name="family"><string>Arial</string></test>
          <edit name="family" mode="assign" binding="same"><string>sans-serif</string></edit>
        </match>
        <match target="pattern">
          <test qual="any" name="family"><string>DejaVu Sans</string></test>
          <edit name="family" mode="assign" binding="same"><string>sans-serif</string></edit>
        </match>
        <alias>
          <family>sans-serif</family>
          <prefer>
            <family>Source Sans Pro</family>
          </prefer>
        </alias>
        <alias>
          <family>serif</family>
          <prefer>
            <family>Source Serif Pro</family>
          </prefer>
        </alias>
        <alias>
          <family>monospace</family>
          <prefer>
            <family>Source Code Pro</family>
          </prefer>
        </alias>
        <selectfont>
          <rejectfont>
            <glob>/usr/share/fonts/default/Type1/*</glob>
            <pattern>
              <patelt name="scalable">
                <bool>false</bool>
              </patelt>
            </pattern>
          </rejectfont>
        </selectfont>
      </fontconfig>
     #+END_SRC

*** Desktop
    These DBus services are provided by plasma-workspace-units.

    #+BEGIN_SRC sh :dir /sudo::
      rm /usr/share/dbus-1/services/org.kde.{kded5,kglobalaccel,kuiserver,kwalletd5}.service
    #+END_SRC

**** Inside VM
     #+BEGIN_SRC sh :dir /sudo::
       <<system_ctl>> enable --now systemd-networkd-wait-online sshd
     #+END_SRC

     #+BEGIN_SRC conf :tangle /sudo::/etc/fstab
       //192.168.208.1/home /home/<<username>> cifs credentials=/etc/cifs,uid=1000,gid=1000,file_mode=0600
     #+END_SRC

     On the host side, open 445/tcp to this VM, and run emacs over X with MobaXterm:

     #+BEGIN_SRC conf :tangle bin/emacs.moba
       emacs =  #109#0%192.168.208.128%22%<<username>>%%-1%0%cp -r ~/.gnupg /run/user/1000 && chmod -R 700 /run/user/1000/.gnupg && export GNUPGHOME__EQUAL__/run/user/1000/.gnupg && setxkbmap dvorak && gpg-agent --enable-ssh-support --daemon emacs%%22%%0%0%Interactive shell%h:\.ssh\kub%%0%0%0%0%%1080%%0#MobaFont%10%0%0%0%15%236,236,236%0,0,0%180,180,192%0%-1%0%%xterm%-1%0%0,0,0%54,54,54%255,96,96%255,128,128%96,255,96%128,255,128%255,255,54%255,255,128%96,96,255%128,128,255%255,54,255%255,128,255%54,255,255%128,255,255%236,236,236%255,255,255%80%24%0#0
     #+END_SRC

     Remember to quit emacs before suspending.
***** Megasync
      #+BEGIN_SRC sh :dir /sudo::
       <<pacman>> -S xorg-server-xvfb megasync
      #+END_SRC

      #+BEGIN_SRC conf :tangle ~/.config/systemd/user/megasync.service
       [Unit]
       Description=Headless megasync

       [Service]
       ExecStart=/usr/bin/xvfb-run megasync

       [Install]
       WantedBy=default.target
      #+END_SRC

      #+BEGIN_SRC sh
       <<user_ctl>> enable --now megasync
      #+END_SRC

**** Keyboard
     Use dvorak, swap caps for ctrl

     #+BEGIN_SRC conf :tangle /sudo::/usr/share/kbd/keymaps/caps2ctrl.map
       include "/usr/share/kbd/keymaps/i386/dvorak/dvorak.map.gz"
       keycode 58 = Control
     #+END_SRC

     #+BEGIN_SRC sh :dir /sudo::
       localectl set-keymap caps2ctrl
     #+END_SRC

     Base Japanese IME on dvorak, swap caps for ctrl

     #+BEGIN_SRC conf :tangle keyboard.reg :comments no
       Windows Registry Editor Version 5.00

       [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
       "Scancode Map"=hex:00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00

       [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layouts\00000411]
       "Layout File"="kbddv.dll"
     #+END_SRC

     Tangle registry files as UTF-16LE with BOM

     #+BEGIN_SRC elisp :tangle ~/.emacs
       (add-to-list 'file-coding-system-alist '("\\.reg\\'" . utf-16le-with-signature-dos))
       (add-hook 'org-babel-post-tangle-hook 'strip-initial-newline)
       (defun strip-initial-newline ()
         (when (string-match "^Windows Registry" (buffer-string))
           (join-line 1)))
     #+END_SRC

     Import into registry

     #+BEGIN_SRC sh
       start regedit $PWD/*reg
     #+END_SRC

**** Pointer
     Up sensitivity

     #+BEGIN_SRC sh :tangle /sudo::/usr/local/bin/s230u :tangle-mode 320
       echo 200 > /sys/bus/serio/devices/serio2/sensitivity
     #+END_SRC

     #+BEGIN_SRC sh :dir /sudo::
       <<pacman>> -S xf86-input-libinput
     #+END_SRC

     Use natural scrolling on touchpad

     #+BEGIN_SRC conf :tangle /sudo::/etc/X11/xorg.conf.d/pointer.conf
       Section "InputClass"
               Identifier "Natural scrolling"
               MatchProduct "TouchPad"
               Driver "libinput"
               Option "NaturalScrolling" "1"
       EndSection
     #+END_SRC

**** Rotation
     #+BEGIN_SRC sh :dir /sudo::
       <<pacman>> -S acpid
     #+END_SRC

     #+BEGIN_SRC text :tangle /sudo::/etc/acpi/events/rotation-button
       event=ibm/hotkey LEN0068:00 00000080 00006020
       action=sudo -u <<username>> DISPLAY=:0 /usr/local/bin/rotate-screen
     #+END_SRC

     #+BEGIN_SRC sh :tangle /sudo::/usr/local/bin/rotate-screen :shebang #!/bin/sh :tangle-mode 365
       case $(xrandr | grep LVDS1 | cut -f 4 -d ' ' | tr -d '(') in
           normal) new="left";;
           left)   new="inverted";;
           inverted)   new="normal";;
       esac
       xrandr --output LVDS1 --rotate $new

       case $new in
           normal) matrix="1 0 0 0 1 0 0 0 1";;
           left)   matrix="0 -1 1 1 0 0 0 0 1";;
           right)  matrix="0 1 0 -1 0 1 0 0 1";;
           inverted) matrix="-1 0 1 0 -1 1 0 0 1";;
       esac
       for dev in "SynPS/2 Synaptics TouchPad" "TPPS/2 IBM TrackPoint" "Atmel Atmel maXTouch Digitizer"; do
           xinput set-prop "$dev" "Coordinate Transformation Matrix" $matrix
       done
     #+END_SRC

     #+BEGIN_SRC sh :dir /sudo::
       <<system_ctl>> enable --now acpid
     #+END_SRC

*** Picard
    #+BEGIN_SRC sh :dir /sudo::
      <<pacman>> -S picard chromaprint
    #+END_SRC

    #+BEGIN_SRC conf :tangle ~/.config/MusicBrainz/Picard.conf
      [setting]
      server_host=musicbrainz.org
      server_port=80

      fingerprinting_system=acoustid
      acoustid_apikey=<<acoustid_key>>
      acoustid_fpcalc=/usr/bin/fpcalc

      save_images_to_tags=true
      save_only_front_images_to_tags=true
      save_images_to_files=false
      ca_provider_use_amazon=true
      ca_provider_use_caa=true
      ca_provider_use_caa_release_group_fallback=true
      ca_provider_use_whitelist=true
      caa_image_size=1
      caa_approved_only=true
      caa_restrict_image_types=true
      analyze_new_files=false
      ignore_file_mbids=false
      quit_confirmation=true
      va_name=Various Artists
      nat_name=
      standardize_artists=true

      windows_compatibility=true
      ascii_filenames=false
      rename_files=true
      move_files=true
      file_naming_format="$if2(%albumartist%,%artist%)/$if($ne(%albumartist%,),%album%/)$if($gt(%totaldiscs%,1),%discnumber%-,)$if($ne(%albumartist%,),$num(%tracknumber%,2) ,)$if(%_multiartist%,%artist% - ,)%title%"
      move_files_to=<<music>>/_new
      move_additional_files=true
      move_additional_files_pattern=*.jpg *.png *.jpeg
      delete_empty_dirs=true

      browser_integration=true
      browser_integration_port=8000
      browser_integration_localhost_only=true

      dont_write_tags=false
      preserve_timestamps=false
      write_id3v1=true
      write_id3v23=true
      id3v23_join_with=/
      id3v2_encoding=utf-16
      remove_ape_from_mp3=true
      remove_id3_from_flac=true
    #+END_SRC

*** mpd
    :PROPERTIES:
    :header-args+: :dir ~
    :END:

    Create playlist
    #+BEGIN_SRC sh
      mpc listall > <<music>>/pq.m3u
    #+END_SRC

    Shuffle and play

    #+BEGIN_SRC sh :results raw
      mpc -q clear && mpc load pq && mpc -q shuffle && mpc play
    #+END_SRC

    Delete currently playing track

    #+BEGIN_SRC sh :eval query
      rm -v <<music>>/"$(mpc -f %file% | head -1)"
    #+END_SRC

*** mpv

    #+BEGIN_SRC conf :tangle ~/.config/mpv/mpv.conf
      sub-auto=fuzzy
      hwdec=auto
      hwdec-codecs=all
    #+END_SRC

    #+BEGIN_SRC conf :tangle ~/.config/mpv/input.conf
      q quit_watch_later
      MOUSE_BTN0 cycle pause
      MOUSE_BTN1 show_progress
      MOUSE_BTN2 cycle fullscreen
      z set window-scale 2
      Z set window-scale 1

      ; show_progress
      f show_text "${filename}"
      d cycle audio
      y add volume 1
      i add volume -1
      g add sub-delay  0.1
      h add sub-delay -0.1
      x cycle mute

      k frame_step
      ' seek +10
      a seek -10
      , seek +60
      o seek -60
      . seek +300
      e seek -300

      u cycle fullscreen
    #+END_SRC

* Emacs
  :PROPERTIES:
  :header-args+: :tangle ~/.emacs
  :END:

  OOBE settings:

  #+BEGIN_SRC elisp
    (server-mode t)
    (global-set-key (kbd "C-x C-r")
                    (lambda () (interactive)
                      (revert-buffer :noconfirm t)))
    (defalias 'yes-or-no-p #'y-or-n-p)
    (defalias 'dabbrev-expand #'hippie-expand)
    (setq auto-save-default nil
          calendar-week-start-day 1
          default-input-method "vietnamese-telex"
          inhibit-startup-screen t
          make-backup-files nil
          scroll-preserve-screen-position t
          tramp-default-method "ssh"
          undo-tree-mode-lighter ""
          visible-bell t
          frame-title-format "%b")
    (set-language-environment "UTF-8")
    (setq-default buffer-file-coding-system 'utf-8-unix)
    (setq-default sentence-end-double-space nil)
    (global-set-key (kbd "C-\\") #'toggle-input-method)
    (blink-cursor-mode -1)
    (show-paren-mode t)
    (winner-mode)
  #+END_SRC

  Package management

  #+BEGIN_SRC elisp
    (package-initialize)
    (setq package-archives
          '(("gnu" . "https://elpa.gnu.org/packages/")
            ("marmalade" . "https://marmalade-repo.org/packages/")
            ("melpa" . "http://melpa.org/packages/")))
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (setq use-package-always-ensure t)
    (require 'use-package)
  #+END_SRC

  Color theme

  #+BEGIN_SRC elisp
    (use-package color-theme-sanityinc-solarized
      :config (load-theme 'sanityinc-solarized-light t))
  #+END_SRC

  Font on Windows

  #+BEGIN_SRC elisp
    (when (eq window-system 'w32)
      (if (> window-system-version 5)
          (set-default-font "Consolas-12" :frames t)
        (set-default-font "Lucida Console-10" :frames t)))
  #+END_SRC

** Discovery
   Learn what's available under prefix keys

   #+BEGIN_SRC elisp
     (use-package which-key :ensure
       :diminish ""
       :config (which-key-mode))
   #+END_SRC

** Editing
   Vim-style

   #+BEGIN_SRC elisp
     (use-package evil
       :config
       (evil-mode t)
       (evil-set-initial-state 'special-mode 'emacs)
       (dolist (state '(normal motion))
         (evil-define-key state global-map
           (kbd "<SPC>") #'evil-scroll-down
           (kbd "S-<SPC>") #'evil-scroll-up))
       (dolist (state '(insert motion normal))
         (evil-define-key state global-map
           (kbd "C-t") #'transpose-chars
           (kbd "C-d") #'delete-char
           (kbd "C-k") #'kill-line
           (kbd "C-y") #'evil-paste-before
           (kbd "C-a") #'beginning-of-line (kbd "C-e") #'end-of-line
           (kbd "C-f") #'forward-char   (kbd "C-b") #'backward-char
           (kbd "C-n") #'next-line      (kbd "C-p") #'previous-line
           (kbd "<down>") #'next-line   (kbd "<up>") #'previous-line
           (kbd "j") #'next-line        (kbd "k") #'previous-line
           (kbd "C-v") #'evil-scroll-down (kbd "M-v") #'evil-scroll-up
           (kbd "C-r") #'isearch-backward))
       (evil-define-key 'insert global-map
         "j" #'self-insert-command "k" #'self-insert-command)
       (evil-define-key 'motion help-mode-map
         (kbd "<tab>") #'forward-button))
   #+END_SRC

   Aggressive indent

   #+BEGIN_SRC elisp
     (setq tab-always-indent 'complete)
     (use-package aggressive-indent
       :diminish ""
       :config
       (global-aggressive-indent-mode)
       (add-to-list 'aggressive-indent-excluded-modes 'rust-mode))
   #+END_SRC

   Switch window with ace

   #+BEGIN_SRC elisp
     (use-package ace-window
       :config (ace-window-display-mode 1)
       :bind ("C-x o" . ace-window))
   #+END_SRC

   Do things with helm:

   #+BEGIN_SRC elisp
     (use-package helm
       :config
       (helm-mode 1)
       (define-key shell-mode-map (kbd "M-r") #'helm-comint-input-ring)
       :diminish helm-mode
       :bind (("C-h SPC" . helm-all-mark-rings)
              ("C-x b" . helm-mini)
              ("C-x C-b" . helm-buffers-list)
              ("C-x C-f" . helm-find-files)
              ("C-c g" . helm-do-grep)
              ("C-s" . helm-occur)
              ("M-x" . helm-M-x)))
     (require 'helm-config)
     (use-package evil
       :config (dolist (state '(insert motion normal))
                 (evil-define-key state global-map
                   (kbd "M-y") #'helm-show-kill-ring)))
   #+END_SRC

** Org

   #+BEGIN_SRC elisp
     (add-hook 'org-mode-hook
               '(lambda ()
                  (add-hook 'before-save-hook 'org-align-all-tags
                            :local t)))
     (org-babel-do-load-languages 'org-babel-load-languages
                                  '((sh . t)))
     (setq org-src-fontify-natively t)
     (use-package htmlize :ensure)
     (setq org-export-initial-scope 'subtree
           org-babel-use-quick-and-dirty-noweb-expansion t)
     (setq org-latex-pdf-process '("xelatex -interaction nonestopmode -output-directory %o %f"))
     (setq org-html-doctype "html5"
           org-html-html5-fancy t
           org-html-head "<link rel=stylesheet type=text/css href=blog.css>"
           org-html-use-unicode-chars t
           org-html-head-include-default-style nil
           org-html-head-include-scripts nil
           org-html-postamble nil)
   #+END_SRC

*** Crypt

    #+BEGIN_SRC elisp
      (require 'org-crypt)
      (add-hook 'org-mode-hook
                '(lambda ()
                   (add-hook 'before-save-hook 'org-encrypt-entries
                             :local t)))
      (setq org-tags-exclude-from-inheritance '("crypt")
            org-crypt-key "<<username>>@keybase.io")
    #+END_SRC

    Make it possible to tangle encrypted block

    #+BEGIN_SRC elisp
      (remove-hook 'org-babel-pre-tangle-hook #'save-buffer)
    #+END_SRC

** Doc-View

   #+BEGIN_SRC elisp
     (eval-after-load 'doc-view
       '(bind-key (kbd "<mouse-1>") #'doc-view-scroll-up-or-next-page doc-view-mode-map))
     (setq doc-view-resolution 300
           doc-view-cache-directory (expand-file-name "~/.emacs.d/doc-view"))
     (use-package evil
       :config (add-hook 'view-mode-hook #'evil-emacs-state))
   #+END_SRC

** Dired

   #+BEGIN_SRC elisp
     (use-package dired+
       :config
       (require 'dired+)
       (global-dired-hide-details-mode -1)
       (defun dired-open ()
         (interactive)
         (dired-do-shell-command "xdg-open &" :file-list (dired-get-marked-files)))
       (define-key dired-mode-map (kbd "RET") #'dired-open)
       (define-key dired-mode-map (kbd "<mouse-2>") #'dired-open)
       (setq dired-recursive-copies 'always
             dired-recursive-deletes 'always
             dired-listing-switches "-alh"
             dired-guess-shell-alist-user
             '(("\\.cb.\\'" "okular")
               ("." "xdg-open;"))))
   #+END_SRC

** Eshell
   Put eshell on a convenient binding

   #+BEGIN_SRC elisp
     (global-set-key (kbd "C-x M-m") #'eshell)
   #+END_SRC

   I like the prompt to be on a separate line.

   #+BEGIN_SRC elisp
     (setq eshell-prompt-function
           '(lambda ()
              (concat (eshell/pwd) "\n"
                      (int-to-string eshell-last-command-status) " % "))
           eshell-prompt-regexp "^[[:digit:]]\\{1,3\\} % ")
   #+END_SRC

   These are terminal-manipulating commands

   #+BEGIN_SRC elisp
     (eval-after-load 'em-term
       '(progn
          (dolist (prog '("atop" "systemd-cgls" "journalctl"))
            (add-to-list 'eshell-visual-commands prog))
          (add-to-list 'eshell-visual-options '("ssh" "-t"))))
   #+END_SRC

   Profile:

   #+BEGIN_SRC sh :tangle ~/.emacs.d/eshell/profile :no-expand
     addpath ~/Copy/bin
   #+END_SRC

   Aliases:

   #+BEGIN_SRC sh :tangle ~/.emacs.d/eshell/alias
     alias vim find-file $1
     alias j journalctl -afb $*
     alias sc <<system_ctl>> $*
     alias uc <<user_ctl>> $*
     alias ytdl <<ytdl>> -a /home/<<username>>/q.txt
     alias fr free -h
   #+END_SRC

* Ansible

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S ansible
  #+END_SRC

  #+BEGIN_SRC elisp :tangle ~/.emacs
    (eval-after-load 'use-package
      '(progn
         (use-package yaml-mode)
         (use-package ansible-doc
           :config (add-hook 'yaml-mode-hook #'ansible-doc-mode))))
  #+END_SRC

** Inventory
   :PROPERTIES:
   :header-args+: :tangle ~/.ansible_inventory
   :END:

   Here are the hosts and their variables

   #+BEGIN_SRC conf
     [arch]
     kub ansible_python_interpreter=/usr/bin/python2
     ton ansible_python_interpreter=/usr/bin/python2 ansible_connection=local

     [all:vars]
     user=<<username>>
     home=/home/<<username>>
     h=<<storage>>
     conf="{{h}}/config/{{ansible_hostname}}"
     locale=en_US
     prefix=<<prefix>>
   #+END_SRC

** Config
   :PROPERTIES:
   :header-args+: :tangle ~/.ansible.cfg
   :END:

   Keep the inventory here

   #+BEGIN_SRC conf
     [defaults]
     inventory = ~/.ansible_inventory
   #+END_SRC

   For some reason ControlMaster isn't working

   #+BEGIN_SRC conf
     [ssh_connection]
     ssh_args=-o ControlMaster=no
   #+END_SRC

* Firefox
  :PROPERTIES:
  :header-args+: :tangle ~/.pentadactylrc
  :END:
  This file is in vimrc syntax

  #+BEGIN_SRC elisp :tangle ~/.emacs
    (eval-after-load 'use-package
      '(use-package vimrc-mode))
  #+END_SRC

  Use DuckDuckGo:

  #+BEGIN_SRC vimrc
    silent bmark -keyword ddg -t DDG https://duckduckgo.com/?kn=1&kp=-1&kae=c&q=%s
    set defsearch=ddg
  #+END_SRC

  Use backspace to go back:

  #+BEGIN_SRC vimrc
    set! browser.backspace_action=0
  #+END_SRC

  Don't let middle mouse paste:

  #+BEGIN_SRC vimrc
    set! middlemouse.contentLoadURL=false
  #+END_SRC

  Restore C-j for Downloads:

  #+BEGIN_SRC vimrc
    map <C-j> -ex dialog downloads
  #+END_SRC

  Bind stop to an easy binding:

  #+BEGIN_SRC vimrc
    map s <C-c>
  #+END_SRC

  Make scrolling easier:

  #+BEGIN_SRC vimrc
    map <space> <C-d>
    map <S-space> <C-u>
  #+END_SRC

  Pin tab:

  #+BEGIN_SRC vimrc
    map <A-p> -ex pintab!
  #+END_SRC

  Move to first or last:

  #+BEGIN_SRC vimrc
    map <A-!> -ex tabm 1
    map <A-$> -ex tabm $
  #+END_SRC

  Fast switching:

  #+BEGIN_SRC vimrc
    map -m normal,insert <F1> <C-^>
  #+END_SRC

  Don't raise these openings:

  #+BEGIN_SRC vimrc
    set activate-=diverted,links,tabopen,paste
  #+END_SRC

  Open help in a new tab

  #+BEGIN_SRC vimrc
    set newtab=help
  #+END_SRC

  Keep hint keys under left fingers:

  #+BEGIN_SRC vimrc
    set hintkeys=12345
  #+END_SRC

  Make hint text readable

  #+BEGIN_SRC vimrc
    highlight Hint -append font-size: 14px !important
  #+END_SRC

  Unzoom image:

  #+BEGIN_SRC vimrc
    map <A-t> -js content.document.toggleImageSize()
  #+END_SRC

  Replace the status line with navigation bar, and show link in the commandline:

  #+BEGIN_SRC vimrc
    set guioptions=bTrc
    set showstatuslinks=command
  #+END_SRC

  Scroll by one line:

  #+BEGIN_SRC vimrc
    set scrollsteps=1
  #+END_SRC

  Show feeds first in pageinfo:

  #+BEGIN_SRC vimrc
    set pageinfo=fgmse
  #+END_SRC

  Use visual bell:

  #+BEGIN_SRC vimrc
    set visualbell
  #+END_SRC

  Bookmarks and preferences:

  #+BEGIN_SRC vimrc
    map <C-S-s> -ex bmark -keyword ac -t config about:config
    \ bmark -keyword bgp -t BGP http://bgp.he.net/search?search[search]=%s
    \ bmark -keyword v -t valsi http://vlasisku.lojban.org/?query=%s
    \ bmark -keyword c -t camxes http://camxes.lojban.org/?text=%s
    \ bmark -keyword yb -t youtube https://youtube.com/watch?v=%s
    \ bmark -keyword cw -t 'CrawlWiki' http://crawl.chaosforge.org/index.php?title=Special%3ASearch&search=%s
    \ bmark -keyword bb -t burnbit http://burnbit.com/burn?file=%s
    \ bmark -keyword b -t btdigg https://btdigg.org/search?q=%s&order=0&p=0
    \ bmark -keyword ba -t btdigg https://btdigg.org/search?q=%s&order=2&p=0
    \ bmark -keyword m -t zing http://mp3.zing.vn/tim-kiem/bai-hat.html?q=%s
    \ bmark -keyword ma -t artist http://musicbrainz.org/search?advanced=1&type=artist&tport=8000&query=%s
    \ bmark -keyword mg -t group http://musicbrainz.org/search?advanced=1&type=release_group&tport=8000&query=%s
    \ bmark -keyword mr -t recording http://musicbrainz.org/search?advanced=1&type=recording&tport=8000&query=%s
    \ bmark -keyword gm -t gmail https://mail.google.com/mail/#spam
    \ set! accessibility.browsewithcaret_shortcut.enabled=false
    \ set! browser.newtabpage.enabled=false
    \ set! browser.privatebrowsing.dont_prompt_on_enter=true
    \ set! browser.sessionstore.restore_pinned_tabs_on_demand=true
    \ set! browser.shell.checkDefaultBrowser=false
    \ set! browser.startup.homepage=about:blank
    \ set! browser.startup.page=3
    \ set! general.warnOnAboutConfig=false
    \ set! security.OCSP.enabled=0
    \ set! security.warn_viewing_mixed=false
    \ set! layout.spellcheckDefault=0
    \ set! middlemouse.paste=true
    \ set! ui.key.menuAccessKey=0
    \ set! browser.anchor_color="#6c71c4"
    \ set! browser.display.background_color="#fdf6e3"
    \ set! browser.display.foreground_color="#657b83"
    \ set! browser.display.use_system_colors=false
    \ set! font.default.x-western="sans-serif"
    \ if /NT 6/.test(window.navigator.oscpu)
    \     set! font.name.monospace.x-western=Consolas
    \ fi
    \ set! extensions.checkCompatibility.nightly=false
    \ set! extensions.https_everywhere._observatory.alt_roots=true
    \ set! extensions.https_everywhere._observatory.enabled=true
    \ set! extensions.https_everywhere._observatory.priv_dns=true
    \ set! plugins.hide_infobar_for_missing_plugin=true
    \ set! browser.download.manager.alertOnEXEOpen=false
    \ set! browser.download.manager.scanWhenDone=false
    \ set! browser.search.context.loadInBackground=true
    \ set! intl.charset.default=UTF-8
    \ set! network.http.pipelining=true
    \ set! network.http.pipelining.aggressive=true
    \ set! network.http.pipelining.ssl=true
    \ set! network.protocol-handler.expose.magnet=false
    \ set! network.proxy.socks=kub.<<domain>>
    \ set! network.proxy.socks_port=9050
    \ set! network.proxy.socks_remote_dns=true
    \ set! toolkit.telemetry.enabled=true
    \ js services.permissions.add(services.io.newURI("http:depositfiles.com",null,null), 'image', services.permissions.DENY_ACTION)
    \ js services.loginManager.setLoginSavingEnabled("accounts.google.com", false)
  #+END_SRC

  Strip tracker from location, thanks to [[https://userscripts.org/scripts/show/93825][Bruno Barão]] and [[https://github.com/5digits/dactyl/commit/7a1ffa5b555399c5d0925ad599e2640070bd128d][Kris Maglione]].

  #+BEGIN_SRC vimrc
    autocmd DOMLoad (utm|wa)_ -js win.history.replaceState("Remove trackers", '', doc.location.href.replace(/&?(utm|wa)_[^&]+/g,'').replace(/\?$/,''))
  #+END_SRC

  Facebook

  #+BEGIN_SRC vimrc
    bmark -keyword fb -t facebook https://fb.me/%s
    map <A-s> -js dactyl.open("https://www.facebook.com/sharer/sharer.php?u=" + content.location)
  #+END_SRC

  Inoreader

  #+BEGIN_SRC vimrc
    map <A-f> -js dactyl.open("https://www.inoreader.com/?add_feed=" + content.location)
    map <A-w> -js dactyl.open("https://www.inoreader.com/bookmarklet/save_web_page/" + encodeURIComponent(content.location))
    js services.permissions.add(services.io.newURI("http:inoreader.com",null,null), 'popup', services.permissions.ALLOW_ACTION)
    set passkeys+=inoreader.com:jkgafswhq
  #+END_SRC

  Get videos from starred items

  #+BEGIN_SRC sh :tangle ~/.bash_login
    function videos() {
        wget -O- \
             'https://www.inoreader.com/reader/api/0/stream/contents/user%2F-%2Fstate%2Fcom.google%2Fstarred?n=1000&r=o' \
             --header 'AppId: 1000001238' --header 'AppKey: <<inoreader_key>>' \
             --header 'Authorization: GoogleLogin auth=<<inoreader_auth>>' \
            | grep -o 'href":"[^"]*' | uniq | sed 's/href":"//' | tr -d '\\' \
            | grep -vE 'reader/api|rapidgator|escapistmag|muspy' \
            | <<ytdl>> -a- --no-mtime --ignore-errors 2>/dev/null \
            | grep -B1 100%
    }
  #+END_SRC

  ownCloud News

  #+BEGIN_SRC vimrc
    set passkeys+=kub.<<domain>>/index.php/apps/news/:jkrolfA
    js services.permissions.add(services.io.newURI("https:kub.<<domain>>",null,null), 'popup', services.permissions.ALLOW_ACTION)
  #+END_SRC

  Site keyboard shortcuts:

  #+BEGIN_SRC vimrc
    set passkeys+=tumblr.com:jk
    set passkeys+=mail.google.com/mail/:'#!ms+-/? jknpux'
    set passkeys+=google.com/contacts/:'#jkoux,.'
  #+END_SRC

  Switch to reader mode:

  #+BEGIN_SRC vimrc
    map <A-r> -js dactyl.open("about:reader?url=" + content.location)
  #+END_SRC

* Windows
** Portables

   #+BEGIN_SRC bat :tangle bin/pe.cmd
     cd /d %~dp0\Tools
     start /b procexp /e /accepteula
   #+END_SRC

   #+BEGIN_SRC bat :tangle bin/pi.cmd
     cd /d %~dp0\picard
     start /b picard
   #+END_SRC

   #+BEGIN_SRC bat :tangle bin/fx.cmd
     cd /d %~dp0\fx
     start /b firefox
   #+END_SRC

   #+BEGIN_SRC bat :tangle bin/tv.cmd
     cd /d %~dp0\teamviewer
     start /b teamviewer
   #+END_SRC

   #+BEGIN_SRC bat :tangle bin/kp.cmd
     cd /d %~dp0\keepass
     start /b keepass
   #+END_SRC

   #+BEGIN_SRC bat :tangle bin/ovpn.cmd
     cd /d %~dp0
     elevate openvpn --config hdhoang.ovpn
   #+END_SRC

* Secrets							      :crypt:
-----BEGIN PGP MESSAGE-----
Version: GnuPG v2

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
H+HN2oBR2k0AgIo=
=O2jy
-----END PGP MESSAGE-----
