#+STARTUP: showall
#+PROPERTY: header-args+ :cache yes
#+PROPERTY: header-args+ :comments org
#+PROPERTY: header-args+ :mkdirp yes
#+PROPERTY: header-args+ :noweb yes
#+PROPERTY: header-args+ :results silent
#+PROPERTY: header-args+ :tangle-mode 384
#+PROPERTY: header-args:text+ :eval no
* Hoàng Đức Hiếu
  :PROPERTIES:
  :EXPORT_OPTIONS: toc:nil date:nil arch:nil num:nil author:nil email:t tags:nil
  :END:
#+EMAIL: 1988 / +84-166-241-9526 / cv@hdhoang.space
#+SELECT_TAGS: vi
#+LATEX_CLASS_OPTIONS: [twocolumn]
#+LATEX_HEADER: \usepackage{libertine}
#+LATEX_HEADER: \usepackage{xcolor-solarized, sectsty}
#+LATEX_HEADER: \usepackage[pagecolor={solarized-base3}]{pagecolor}
#+LATEX: \sectionfont{\color{solarized-blue}}
#+LATEX: \subsectionfont{\color{solarized-cyan}}
#+LATEX: \vspace*{-197pt}\includegraphics{Pictures/mug/img078}
#+LATEX_HEADER: \usepackage{titling}
#+LATEX_HEADER: \pretitle{\begin{flushright}\LARGE}
#+LATEX_HEADER: \posttitle{\par\end{flushright}}
#+LATEX_HEADER: \preauthor{\begin{flushright}}
#+LATEX_HEADER: \postauthor{\end{flushright}}
#+LATEX_HEADER: \pagenumbering{gobble}
* Education                                                              :en:
   - 2016 - 2018 :: Outsource system administrator at Luvina Software
                    JSC
   - 2014 - 2017 :: Studying System Administration and software
                    testing at Bachkhoa-Aptech
   - 2013 - 2014 :: Finished K12 and completed accounting course at
                    Quang Trung private school
   - 2007 - 2012 :: Self-learned various topics
     - Programming languages (Python, shells, HTML5, Emacs Lisp, Rust)
     - History of free software
     - Hanoi GNU/Linux user community
     - Wing-chun martial art
     - The constructed logical language Lojban
   - 2006 - 2007 :: Freshman in computer programming at Monash
                    College, Australia (earned Distinction and High
                    Distinction in most subjects)
   - 2003 - 2006 :: Chu Van An Highschool, majoring in English
#+LATEX: \newpage
* Tiểu sử                                                                :vi:
   - 2016 - 2018 :: Quản trị hệ thống từ xa tại CTCP Luvina
   - 2014 - 2017 :: học quản trị mạng và kiểm thử phần mềm tại
                   Bachkhoa-APTECH (dự kiến tốt nghiệp năm 2016)
#+LATEX: \newpage
** Qualifications and skills                                             :en:
*** IT skills
   - In-depth GNU/Linux usage and administration, experienced in
     self-hosting web sites (ownCloud on Debian Apache, ArchLinux nginx)
   - Comprehensive network understanding (routing, firewall, encryption)
   - Using version control systems, especially git
   - Contributing to free software projects ([[https://www.openhub.net/accounts/hdhoang/positions][hdhoang on OpenHub]])
   - Office equipment troubleshooting
*** Language skills
   - Fluency in English (990 in TOEIC, 2015)
   - Elementary Japanese (N3, 2016)
*** Others
   - Self-teaching discipline
   - Strong interest in learning new topics
** Kĩ năng                                                               :vi:
*** Kĩ năng IT
     - Sử dụng và quản trị các hệ thống GNU/Linux chuyên sâu, tự quản
       trị dịch vụ web (owncloud, Debian Apache, ArchLinux nginx)
     - Hiểu biết rõ hệ thống mạng (định tuyến, tường lửa)
     - Sử dụng hệ thống quản lí phiên bản, đặc biệt là git
     - Đóng góp vào các dự án phần mềm tự do ([[https://www.openhub.net/accounts/hdhoang][hdhoang trên OpenHub]])
     - Xử lý vấn đề các thiết bị văn phòng
*** Kĩ năng ngôn ngữ
     - Tiếng Anh thuần thục (TOEIC 990, 2015)
     - Tiếng Nhật cơ bản (tương đương N4)
** Interests                                                             :en:
   - Exploring science, history, and natural subjects
   - Science-fiction novels, rational fanfictions
   - Electric guitar riffs
   - Frequent blood donor until no longer eligible
** Sở thích                                                              :vi:
    - Khám phá các chủ đề khoa học, lịch sử, tự nhiên
    - Tiểu thuyết khoa học viễn tưởng, ???
    - Nghe solo guitar điện
    - Thường xuyên hiến máu cho đến khi hết khả năng

* Places and names
  #+NAME: username
  #+BEGIN_SRC text
    hdhoang
  #+END_SRC

  #+NAME: domain
  #+BEGIN_SRC text
    <<username>>.space
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
    (setq user-mail-address "i@<<domain>>")
  #+END_SRC

  #+NAME: storage
  #+BEGIN_SRC text
    /home/<<username>>/Sync
  #+END_SRC

  #+NAME: videos
  #+BEGIN_SRC text
    /home/<<username>>/Public/Videos
  #+END_SRC

  #+NAME: prefix
  #+BEGIN_SRC text
    10.117.14.
  #+END_SRC

  #+NAME: prefix6
  #+BEGIN_SRC text
    2001:470:36:62a::
  #+END_SRC

  #+NAME: system_ctl
  #+BEGIN_SRC text
    systemctl --system --no-pager
  #+END_SRC

  #+NAME: user_ctl
  #+BEGIN_SRC text
    systemctl --user --no-pager
  #+END_SRC

  #+NAME: pacman
  #+BEGIN_SRC text
    pacaur --noconfirm --needed
  #+END_SRC

  #+NAME: ytdl
  #+BEGIN_SRC text
    youtube-dl --format "[height <=? 480]" --output <<videos>>/"%(uploader)s %(upload_date)s %(title)s@%(id)s.%(ext)s"
  #+END_SRC

* Blog
  :PROPERTIES:
  :EXPORT_OPTIONS: toc:nil num:nil
  :END:

  #+BEGIN_SRC css :tangle ~/Public/blog.css
    body {
        background: #fdf6e3; color: #657b83;
        margin: 0 25%;
        line-height: 1.5;
    }
    pre {
        padding: 1em;
        border: dotted 1px #657b83;
        border-right: none;
    }
    .src-rust::before,
    .src-python::before {
        content: attr(class);
        display: block;
        float: right;
    }
  #+END_SRC

** hdhoang
   :PROPERTIES:
   :EXPORT_FILE_NAME: ~/Public/index
   :END:
   Elsewhere on the net:
   - realtime ::
     + [[https://telegram.me/hdhoang][Telegram]]
     + [[skype:lazni0?chat][Skype]]
     + [[https://fb.me/hdh000][Facebook]]
   - feeds ::
     + [[http://www.inoreader.com/stream/user/1005933915/tag/user-favorites][Inoreader]]
     + [[https://gitlab.com/u/hdhoang][GitLab]]
     + [[https://github.com/hdhoang?tab%3Dactivity][GitHub]]
     + [[http://www.last.fm/user/hdhoang][Last.fm]]
     + [[https://twitter.com/lasigmaz][Twitter]]
     + [[https://steamcommunity.com/id/lasigmaz][Steam]]
     + [[https://www.openhub.net/accounts/hdhoang][OpenHub]]
     + [[https://www.linkedin.com/in/hdhoang][LinkedIn]]

   I have a maybe-blog:
   - [[file:vanity-irc.org][Showing a custom hostname to Freenode]]
   - [[file:borrow-die.org][Borrow checker analogy]]
   - [[file:luser.org][Writing an IRC bot]]
   - [[file:graph.org][Making a reading list]]

** Consumption
*** <2016-01-18 Mon> Rạng Đông A55N2/5W (42,200đ)

** Bookmark graph
   :PROPERTIES:
   :EXPORT_FILE_NAME: graph
   :END:
   Say, I follow a link from someone to something. I would like to put
   that relationship into a digraph to be explored later. Nodes are
   people and things (articles, videos, comics). People have handles
   (unix username, twitter username, IRC handle, facebook ID, etc),
   URLs. Things have title (file name, etc), URL/btih, authored date,
   syndication feed.

   An edge can be:

   - Person authors thing
   - Person mentions thing as text
     With commentary or opinion
   - Thing mentions thing as text
     This would be the hyperlink text

   The graph is serialized and saved in this repo. It can be exported
   into OPML.

** Borrow-checking with friends
   :PROPERTIES:
   :EXPORT_FILE_NAME: ~/Public/borrow-die
   :END:

   #+BEGIN_SRC rust :tangle ~/Public/die.rs
     #[derive(Debug)]
     enum D3 { One, Two, Three }
     impl D3 {
         fn peek(self: &D3, name: &str) {
             println!("{} sees that it's {:?}.", name, self);
         }
     }
   #+END_SRC

   Our main character, named Max, has a d3.

   #+BEGIN_SRC rust :tangle ~/Public/die.rs
     fn main() {
         print!("Hi, I'm Max. ");
         let mut die = D3::Two;
         die.peek("Max");
   #+END_SRC

   Max can rolls his die:

   #+BEGIN_SRC rust :tangle ~/Public/die.rs
         die = D3::One;
         die.peek("Max");
   #+END_SRC

   Max invites Alice and Bob over for a game of dice. The die is on the table and everyone can see what it's showing.

   #+BEGIN_SRC rust :tangle ~/Public/die.rs
         'table: loop {
             let bob = &die;
             bob.peek("Bob");
             die.peek("Everyone"); // same thing
             break 'table; // that's enough peeking for now
         }
    #+END_SRC

    It's Alice's turn, she picks up the die and rolls.

    #+BEGIN_SRC rust :tangle ~/Public/die.rs
         'alices_turn: loop {
             let alice = &mut die;
             *alice = D3::Three;
             alice.peek("Alice");
             break 'alices_turn;
         }
    #+END_SRC

    It lands on the table and now everyone sees what Alice rolled.

    #+BEGIN_SRC rust :tangle ~/Public/die.rs
         die.peek("Max");
     }
   #+END_SRC

   [[file:borrow-die.rs][Full code.]]
** Vanity plate on IRC
   :PROPERTIES:
   :EXPORT_FILE_NAME: ~/Public/vanity-irc
   :END:
*** Ingredients:
    - An IPv6 block whose PTR you can delegate (I use Hurricane Electric's [[https://tunnelbroker.net][tunnelbroker service]])
    - A hostname whose AAAA you can change (I'm using a full domain, hosted on [[https://cloudflare.com][CloudFlare]], but it should works [[https://freedns.afraid.org][with subdomains]])
    - I'm using a Debian machine to connect to Freenode
*** Recipes:
    1. Request an IPv6 tunnel with HE
    2. Delegate its rDNS to [[https://dns.he.net][dns.he.net]]
    3. Match forward and reverse DNS between an address and your hostname:

       #+BEGIN_SRC sh :results replace
         bash -c 'diff <(nslookup test-plate.hdhoang.space.) <(nslookup 2001:470:36:62a::cccc)'
       #+END_SRC

       #+RESULTS[b43b6d2d898df8156aa60d0405a8b2f68660f12d]:

       - Choose an address, point it to your hostname
       - Add the address to the hostname's AAAA records
    6. Connect to Freenode with that address as the source, for example:

       #+BEGIN_SRC sh
         for fn in $(dig +short -t aaaa chat.freenode.net); do
             ip -6 route add $fn src $address dev $tunnel_interface;
         done;

       #+END_SRC
       or

       #+BEGIN_SRC sh
         ip -6 route replace default src $address dev $tunnel_interface
       #+END_SRC

** IRC bot
   :PROPERTIES:
   :EXPORT_FILE_NAME: ~/Public/luser
   :END:
   [[irc:chat.freenode.net/#vnluser][#vnluser]] used to have a bot to grab link titles and search google.
   It didn't work very well with Vietnamese characters, so it was
   retired. Here's a replacement in rust and python. Its name is

   #+NAME: botname
   #+BEGIN_SRC text
     luser
   #+END_SRC

   There are several things it could improve on:
    - [X] Handle gzip responses (news.zing.vn and baomoi.com): These
      sites always return gzip-encoded HTML, even when Accept-Encoding
      doesn't list it. You can check by comparing =curl= vs =curl
      --compressed=.
    - [ ] Configurable multiple channels support, possibly as
      commandline arguments, should also set owners.
    - [ ] Reading secrets from files: API keys, identify passwords,
      channel passwords.
    - [ ] Tests: It would be difficult to interface with IRC servers,
      but at least the handling functions should be tested.
    - [ ] CLI interface: Like chatbot's, this will speed up testing.
    - [X] NYtimes access: The cookie needs to be periodically rebaked.
      Theoretically cloaking as googlebot should work.
    - [ ] Pod titles in rust: Quick-xml doesn't return the attributes
      iterator currently.
    - [ ] Reconnection on ping timeout: [[https://github.com/aatxe/irc/blob/46f9136c93063e8abb01b063df53897615007791/src/client/server/mod.rs#L208][IrcServer should already
      reconnect automatically]], but possibly ipv6 tunneling is
      interfering.

   Compilation to ARMv7 is a bit tricky:

    1. Set up [[https://github.com/japaric/rust-cross][cross-compilation toolchain]]
    2. Copy the target's =/usr/include/openssl=, =lib{crypto,ssl,z}.so= to $PWD
    3. Run cargo with:
       #+BEGIN_SRC sh
         TARGET_CFLAGS="-I $PWD" cargo rustc --release --target armv7-unknown-linux-gnueabihf -- -C linker=arm-linux-gnueabihf-gcc -lz -L $PWD
       #+END_SRC
    4. Copy =target/armv7-unknown-linux-gnueabihf/release/luser= to the target

   You can run tests for the python version:

   #+NAME: doctest_luser
   #+BEGIN_SRC sh
     python -m doctest ~/Public/<<botname>>.py
   #+END_SRC

   Now on to the code. Unfortunately, tangling from this Org source
   loses indentations, so the python code can't be commented on line
   by line. Here are the API keys and rust build setup:

   #+NAME: wolframalpha_key
   #+BEGIN_SRC text
     3JEW42-4XXE264A93
   #+END_SRC

   #+NAME: yandex_key
   #+BEGIN_SRC text
     trnsl.1.1.20160210T093900Z.c6eacf09bbb65cfb.cc28de2ba798bc3bc118e9f8201b6e6cea697810
   #+END_SRC

   #+NAME: google_key
   #+BEGIN_SRC text
     AIzaSyDuesDCP1pqw6Ev_3zEAG4xuIKYp675oDw
   #+END_SRC

   #+NAME: google_cx
   #+BEGIN_SRC text
     002790383760335821747:hufomuuaviw
   #+END_SRC

   #+BEGIN_SRC conf :tangle ~/Public/luser.toml
     [package]
     name = "<<botname>>"
     version = "0.1.0"
     authors = ["Hoàng Đức Hiếu <<username>>@<<domain>>"]

     [dependencies]
     irc = "*"
     scraper = "*"
     hyper = "*"
     regex = "*"
     quick-xml = "*"
     rustc-serialize = "*"
     url = "*"
   #+END_SRC

   Importing dependencies. Python really comes with batteries.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     extern crate regex;
     extern crate irc;
     extern crate scraper;
     extern crate hyper;
     extern crate quick_xml;
     extern crate rustc_serialize;
     extern crate url;

     use regex::Regex;
     use irc::client::prelude::{IrcServer, Server, ServerExt, Config, Command, Response};
     use hyper::client::Client;
     use std::io::Read;
     use std::collections::HashMap;
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py :shebang #!/usr/bin/env python3
     # -*- coding: utf-8 -*-
     # external batteries
     from bs4 import BeautifulSoup
     from irc import bot

     from collections import defaultdict
     from random import randint
     from gzip import GzipFile
     import xml.etree.ElementTree as ET
     import json
     import sys
     import os

     if sys.version_info.major == 3:
         from urllib.request import urlopen, build_opener, HTTPCookieProcessor
         from urllib.parse import quote
         from http.client import HTTPConnection
     else:
         from urllib2 import urlopen, quote, build_opener, HTTPCookieProcessor
         from httplib import HTTPConnection
         from StringIO import StringIO
         reload(sys)
         sys.setdefaultencoding('utf8')
   #+END_SRC

   Set up logging.

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     import logging
     import logging.handlers
     logger = logging.getLogger(__file__)

     def setup_logging(filename, path=None, verbose=False):
         if not path:
             path = os.path.dirname(os.path.realpath(__file__))
         file_log = logging.handlers.TimedRotatingFileHandler(
             os.path.join(path, filename),
             when="midnight",
             backupCount=31)
         file_log.setLevel(logging.DEBUG if verbose else logging.INFO)
         file_log.setFormatter(logging.Formatter(
             '%(asctime)-15s (%(name)s) %(message)s'))
         logger.addHandler(file_log)
   #+END_SRC

   Set up connection details. People should claim their names here.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     const NAME: &'static str = "<<botname>>";
     fn main() {
         let freenode = IrcServer::from_config(Config {
                            owners: Some(vec![env!("USER").into()]),
                            nickname: Some(NAME.into()),
                            alt_nicks: Some((0..10).map(|n| format!("{}-{}", NAME, n)).collect()),
                            server: Some("chat.freenode.net".into()),
                            port: Some(8000),
                            channels: Some(vec![format!("#vn{}", NAME), format!("#{}-test", NAME)]),
                            ..Default::default()
                        })
                            .unwrap();
         freenode.identify().unwrap();
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     NAME = "<<botname>>"
     <<botname>> = bot.SingleServerIRCBot([("chat.freenode.net", 8000)], NAME, NAME)

     def main():
         setup_logging("<<botname>>.log")
         <<botname>>.start()

     def change_nick(c, e):
         new_nick = '{}-{}'.format(NAME, str(randint(0, 9)))
         print("Changing nick to", new_nick)
         c.nick(new_nick)
     <<botname>>.on_nicknameinuse = change_nick

     <<botname>>.on_nickcollision = lambda c, _: c.reconnect()

     def join_channels(c, e):
         c.join("#{}-test".format(NAME))
         c.join("#vn" + NAME)
     <<botname>>.on_welcome = join_channels
   #+END_SRC

   Handling scaffolding

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
         let get_title = &get_title;
         let wolframalpha = &wolframalpha;
         let google = &google;
         let translate = &translate;
         let handlers = [Handler(Regex::new(TITLE_REGEX).unwrap(), get_title),
                         Handler(Regex::new(WA_REGEX).unwrap(), wolframalpha),
                         Handler(Regex::new(GOOGLE_REGEX).unwrap(), google),
                         Handler(Regex::new(TRANSLATE_REGEX).unwrap(), translate)];

   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def handling(c, e):
         return <<botname>>s[len(e.source) % len(<<botname>>s)] == c.get_nickname()

     def handle(c, e, msg):
         try:
             titles = title(msg)
             if titles and handling(c, e):
                 c.privmsg(e.target, titles)
             if msg[0] not in ('.', '!', ':'): return
             if msg[1:6] == 'tell ':
                 source = e.source.nick
                 (target, _, line) = msg[6:].partition(' ')
                 return relay_msg[target.lower()].append((source, line))
             reply = ''
             if msg[1:3] == 'g ':
                 reply = google(msg[3:])
             if msg[1:4] == 'wa ':
                 reply = wolframalpha(msg[4:])
             if msg[1:4] == 'tr ':
                 (lang, _, text) = msg[4:].partition(' ')
                 reply = translate(lang, text)
             if reply:
                 # Keep PRIVMSG under 512bytes
                 c.privmsg(e.target, reply[:512 - len(e.target) - 50])
         except Exception as e:
             logger.error('"%s" causes: %s' % (msg, str(e)))
   #+END_SRC

   List other lusers, and update that list when one joins or quits.
   This list is used by the lusers to decide whether to handle
   unaddressed messages. If the length of the IRC prefix
   'nick!user@host' for a message indexes to its name, that luser
   responses.

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     <<botname>>s = []
     def list_<<botname>>s(c, e):
         for <<botname>> in filter(lambda n: n.startswith(NAME),
                                   e.arguments[-1].split(' ')):
             if <<botname>> not in <<botname>>s:
                 <<botname>>s.append(<<botname>>)
         <<botname>>s.sort()
     <<botname>>.on_namreply = list_<<botname>>s
   #+END_SRC

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
         let mut last_lines = HashMap::new();
         let mut <<botname>>s = vec![];
         'messages: for message in freenode.iter() {
             let msg = message.unwrap();
             if let Command::Response(Response::RPL_NAMREPLY, _, Some(ref names)) = msg.command {
                 <<botname>>s.extend(names.split(' ')
                                    .filter(|n| n.starts_with(NAME))
                                    .map(String::from));
                 <<botname>>s.sort();
                 <<botname>>s.dedup();
                 if !<<botname>>s.contains(&freenode.current_nickname().into()) {
                     let _ = freenode.reconnect();
                 }
                 continue 'messages;
             }
             if let Some(nick) = msg.source_nickname() {
   #+END_SRC

   Ignore bots and freenode

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
                 if nick.contains("bot") || nick.contains("freenode") {
                     continue 'messages;
                 }
   #+END_SRC

   Update <<botname>>s list

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
                 if nick.starts_with(NAME) {
                     let nick = String::from(nick);
                     match msg.command {
   #+END_SRC

   Do not merge the following arms. Otherwise a join #c1 -> insert ->
   join #c2 -> remove sequence might happen.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
                         Command::JOIN(..) => {
                             if let Err(idx) = <<botname>>s.binary_search(&nick) {
                                 <<botname>>s.insert(idx, nick)
                             }
                         }

   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     relay_msg = defaultdict(list) # dict<nick.lower(), [(source, line)]>
     def relay(c, target, nick):
         for (source, line) in relay_msg[nick.lower()]:
             c.privmsg(target, "{}: <{}> {}".format(nick, source, line))
         del relay_msg[nick.lower()]
     <<botname>>.on_nick = lambda c, e: relay(c, "#vn<<botname>>", e.target)
   #+END_SRC

   The next lambdas are abusing python logical operator, but they read
   like English.

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def <<botname>>_joins(e):
         if e.source.nick not in <<botname>>s:
             <<botname>>s.append(e.source.nick)
             <<botname>>s.sort()

     def on_join(c, e):
         nick = e.source.nick
         if nick.startswith(NAME):
             return <<botname>>_joins(e)
         relay(c, e.target, nick)
     <<botname>>.on_join = on_join
   #+END_SRC

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
                         Command::QUIT(..) => {
                             if let Ok(idx) = <<botname>>s.binary_search(&nick) {
                                 <<botname>>s.remove(idx);
                             }
                         }
                         _ => (),
                     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     <<botname>>.on_quit = lambda c, e: e.source.startswith(NAME) and <<botname>>s.remove(e.source.nick)
   #+END_SRC

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
                     continue 'messages;
                 }
             }
   #+END_SRC

   Actual message processing. Ignore the other lusers.

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     last_lines = defaultdict(list) # dict<nick, line>
     def on_pubmsg(c, e):
         nick = e.source.nick
         if nick.startswith(NAME): return
         my_nick = c.get_nickname()
         msg = e.arguments[0]
         if msg == "report!":
             return c.privmsg(e.target, report())
         if msg.startswith('s/'):
             parts = msg.split('/')
             if (len(parts) >= 3 and handling(c, e)
                 and parts[1] in last_lines[nick]):
                 return c.privmsg(e.target, "{} meant: {}".format(
                     nick, last_lines[nick].replace(parts[1], parts[2])))
         else:
             last_lines[nick] = msg
         addressed = msg.startswith(my_nick)
         if addressed or handling(c, e) or 'http' in msg:
             if addressed:
                 msg = msg[len(my_nick) + 2:]  # remove addressing
                 if msg.startswith('quit'): sys.exit()
                 if msg.startswith('reload'):
                     os.execl(sys.executable, sys.executable, __file__)
             handle(c, e, msg)
     <<botname>>.on_pubmsg = on_pubmsg
   #+END_SRC

   =trimmed_line= is here to hoist the trimmed line out of its
   assignment block. Rust: the compiler knows better than you do.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
             let channel;
             let trimmed_line;
             let mut line;

             if let Command::PRIVMSG(ref target, ref message) = msg.command {
                 channel = target;
                 line = message
             } else {
                 continue 'messages;
             }

             if line == "report!" {
                 freenode.send(Command::PRIVMSG(channel.clone(),
                                                format!("operated by {} with source code {}",
                                                        freenode.config()
                                                                .owners
                                                                .as_ref()
                                                                .map(|v| v.join(", "))
                                                                .unwrap_or("someone anonymous"
                                                                               .into()),
                                                        post_source_code())))
                         .unwrap();
                 continue 'messages;
             }
             if line.starts_with("s/") {
                 let parts = line.split('/').collect::<Vec<_>>();
                 if parts.len() < 3 {
                     continue 'messages;
                 }
                 if let Some(old_line) = last_lines.get(&msg.source_nickname().map(String::from)) {
                     if <<botname>>s[msg.prefix.clone().unwrap().len() % <<botname>>s.len()] ==
                        freenode.current_nickname() {
                         freenode.send(Command::PRIVMSG(channel.clone(),
                                                        format!("{} meant to say \"{}\"",
                                                                msg.source_nickname().unwrap(),
                                                                (old_line as &str)
                                                                    .replace(parts[1], parts[2]))))
                                 .unwrap();
                     }
                 }
             } else {
                 last_lines.insert(msg.source_nickname().map(String::from), line.clone());
             }

             let addressed = line.starts_with(freenode.current_nickname());
             if addressed ||
                <<botname>>s[msg.prefix.unwrap().len() % <<botname>>s.len()] == freenode.current_nickname() {
                 if addressed {
                     trimmed_line = line[freenode.current_nickname().len() + 2..].into();
                     line = &trimmed_line;
                 }
                 'handling: for h in &handlers {
                     if h.can_handle(line) {
                         match h.run(line) {
                             Err(e) => println!("{:?} causes {:?}", line, e),
                             Ok(reply) => {
                                 if !reply.is_empty() {
                                     freenode.send(Command::PRIVMSG(channel.clone(), reply)).unwrap();
                                     continue 'messages;
                                 }
                             }
                         }
                     }
                 }
             }
         }
     }
   #+END_SRC

   Rust handler scaffolding: casting into a common =Error= type and
   associating regexes with their handling function. Rust is
   surprisingly more object-happy than python.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     #[derive(Debug)]
     enum Error {
         Data(String),
         Io(std::io::Error),
         Hyper(hyper::error::Error),
         Xml(quick_xml::error::Error),
         Json(rustc_serialize::json::ParserError),
     }

     struct Handler<'a>(Regex, &'a (Fn(&Regex, &str) -> Result<String, Error>));
     impl<'a> Handler<'a> {
         fn can_handle(&self, line: &str) -> bool {
             self.0.is_match(&line)
         }
         fn run(&self, line: &str) -> Result<String, Error> {
             self.1(&self.0, &line)
         }
     }
   #+END_SRC

   Get title from URLs. The rust version only grabs the first URL in
   each message. Some domains with uninteresting titles are ignored:

   #+NAME: uninteresting
   #+BEGIN_SRC text
     "smbc-comics.com/", "libgen.io/", "xkcdb.com/"
   #+END_SRC

   #+NAME: uninteresting_titles
   #+BEGIN_SRC text
     "XKCDB: The: The #xkcd Quote Database", "Saturday Morning Breakfast Cereal", "Library Genesis"
   #+END_SRC

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     const TITLE_REGEX: &'static str = r"https?:[^\s]+";
     fn get_title(regex: &Regex, line: &str) -> Result<String, Error> {
         use hyper::header::{UserAgent, Cookie, CookiePair};
         use scraper::{Html, Selector};

         let url = regex.captures(&line).unwrap().expand("$0");
         if [<<uninteresting>>].iter().any(|domain| url.contains(domain)) {
             return Ok(String::new());
         }
         let mut response = try!(Client::new()
                                 .get(&url)
                                 .header(UserAgent("Firefox".into()))
                                 .header(Cookie(vec![CookiePair::new(// cookie to access NYtimes articles
                                     "NYT-S".into(),
                                     "0MOTYRtE4oUSHDXrmvxADeHEluv5kUWdpUdeFz9\
                                      JchiAKuaKkdl/6loIV.Ynx4rkFI"
                                         .into())]))
                                 .send()
                                 .map_err(Error::Hyper));
         let mut body = [0; 50_000];
         response.read_exact(&mut body).ok();
         if let Some(title_elem) = Html::parse_fragment(&String::from_utf8_lossy(&body))
                                       .select(&Selector::parse("title").unwrap())
                                       .next() {
             Ok(title_elem.first_child()
                          .unwrap()
                          .value()
                          .as_text()
                          .unwrap()
                          .replace("\n", " ")
                          .trim()
                          .into())
         } else {
             Err(Error::Data("Response has no title".into()))
         }
     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def title(text):
         """
         Retrieve titles from URL in text.

         >>> len(title('no url here'))
         0

         TODO This case should ignore the 404.
         >>> print(title('https://hdhoang.space/404 https://hdhoang.space/')) # doctest: +IGNORE_EXCEPTION_DETAIL
         Traceback (most recent call last):
           ...
         urllib.error.HTTPError: HTTP Error 404: Not Found

         >>> print(title('https://hdhoang.space/luser.html https://hdhoang.space/luser.html'))
         IRC bot / IRC bot

         >>> print(title('http://www.nytimes.com/2016/01/26/business/marvin-minsky-pioneer-in-artificial-intelligence-dies-at-88.html'))
         Marvin Minsky, Pioneer in Artificial Intelligence, Dies at 88 - The New York Times

         >>> print(title('http://www.baomoi.com/bao-nhieu-tan-bot-trung-quoc-da-duoc-nhap-ve-lam-tra-o-long-tea-plus/c/18486151.epi'))
         Bao nhiêu tấn bột Trung Quốc đã được nhập về làm trà Ô long TEA Plus? - GĐ&XH;

         >>> print(title('http://news.zing.vn/chi-tiet-ban-do-cam-duong-dip-29-o-ha-noi-post574142.html'))
         Chi tiết bản đồ cấm đường dịp 2/9 ở Hà Nội - Thời sự - Zing.vn

         >>> print(title('https://www.facebook.com/photo.php?fbid=261863914155282&set=a.261860180822322.1073742015.100009950253866&type=3&theater')) # doctest: +ELLIPSIS
         Vo Thanh Thuy - Vo Thanh Thuy ... | Facebook

         >>> print(title('https://imgur.com/M18GYfw?r https://imgur.com/GUFyoUa?r'))
         Glorious new key cap set for my work keyboard! - Imgur
         """
         uninteresting = [<<uninteresting_titles>>]
         titles = []
         urls = filter(lambda w: w.startswith('http'), text.split())
         for u in urls:
             request = build_opener(HTTPCookieProcessor())
             request.addheaders = [('Accept-Encoding', 'gzip'), ('User-Agent', 'Mozilla/5.0')]
             response = request.open(u)
             if response.info().get('Content-Encoding') == 'gzip':
                 if sys.version_info.major == 3:
                     response = GzipFile(fileobj=response)
                 else:
                     response = GzipFile(fileobj=StringIO(response.read()))
             title = BeautifulSoup(response.read(50000), 'html.parser').title
             response.close()
             if (title
                 and 'Imgur:' not in title.string
                 and title.string not in uninteresting):
                 titles.append(title.string.replace('\n', '').strip())
         return ' / '.join(titles)
   #+END_SRC

   Ask Wolfram|Alpha, the knowledge engine.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     const WA_REGEX: &'static str = concat!(r"^(\.|!|:)", "wa (?P<query>.+)");
     fn wolframalpha(regex: &Regex, line: &str) -> Result<String, Error> {
         use hyper::header::ContentLength;
         use quick_xml::{XmlReader, Event};

         let mut response = try!(Client::new()
                                     .get(&regex.captures(&line)
                                                .unwrap()
                                                .expand("http://api.wolframalpha.\
                                                         com/v2/query?format=plaintext&appid=\
                                                         <<wolframalpha_key>>&input=$query"))
                                     .send()
                                     .map_err(Error::Hyper));
         let mut xml =
             String::with_capacity(**response.headers.get::<ContentLength>().unwrap() as usize);
         try!(response.read_to_string(&mut xml).map_err(Error::Io));
         let tree = XmlReader::from_str(&xml).trim_text(true);
         let mut answers = vec![];
         for event in tree {
             match event {
                 Ok(Event::Start(ref elem)) if elem.name() == b"pod" => {
                     answers.push(String::from_utf8(try!(elem.attributes()
                                                             .next()
                                                             .unwrap()
                                                             .map_err(Error::Xml))
                                                        .1
                                                        .into())
                                      .unwrap() + ": ")
                 }
                 Ok(Event::Text(elem)) =>{
                     answers.push(try!(elem.into_string().map_err(Error::Xml)) + " /")
                 }
                 _ => (),
             }
         }
         Ok(answers.join(" "))
     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def wolframalpha(text):
         """
         Query WolframAlpha about text.

         >>> print(wolframalpha('mass of sol'))
         Input interpretation: Sun | mass / Result: 1.988435×10^30 kg  (kilograms) / Unit conversions: 4.383749×10^30 lb  (pounds) / 2.191874×10^27 sh tn  (short tons) / 1.988435×10^33 grams / 1 M_☉  (solar ma http://wolframalpha.com/?input=mass%20of%20sol

         Check URL encoding:
         >>> print(wolframalpha('4+6'))
         Input: 4+6 / Result: 10 / Number name: ten / Number line: Manipulatives illustration:  | + |  |  |  4 |  | 6 |  | 10 / Typical human computation times: age 6:  5.3 seconds  |  age 8:  2.6 seconds  |  age 10:  1.7 seconds  |   age 18:  0.93 seconds (ignoring concentration, repetition, variations in education, etc.) / 

         >>> print(wolframalpha('é'))
         Input interpretation: é  (character) / Visual form: Name: Latin small letter e with acute / Positions in alphabets: Czech | 9th letter (33rd letter from the end) Slovak | 12th letter (35th letter from http://wolframalpha.com/?input=%C3%A9
         """
         r = urlopen(
             'http://api.wolframalpha.com/v2/query?format=plaintext&appid=<<wolframalpha_key>>&input='
             + quote(text))
         tree = ET.parse(r)
         reply = ''
         for n in tree.iter():
             if n.tag == 'pod':
                 reply += n.attrib['title'] + ': '
             if n.tag == 'plaintext' and n.text and len(n.text.strip()):
                 reply += n.text + ' / '
         if len(reply) > 512:
             reply = reply[:200] + " http://wolframalpha.com/?input=" + quote(text)
         r.close()
         return reply.replace('\n', ' ')
   #+END_SRC

   Returns the first Google result.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     const GOOGLE_REGEX: &'static str = concat!(r"^(\.|!|:)", "g (?P<query>.+)");
     fn google(regex: &Regex, line: &str) -> Result<String, Error> {
         use rustc_serialize::json::Json;
         // API: https://developers.google.com/web-search/docs/#code-snippets
         let mut response = try!(Client::new()
                                     .get(&regex.captures(&line)
                                                .unwrap()
                                                .expand("https://ajax.googleapis.\
                                                         com/ajax/services/search/web?v=1.\
                                                         0&rsz=1&q=$query"))
                                     .send()
                                     .map_err(Error::Hyper));
         let json = try!(Json::from_reader(&mut response).map_err(Error::Json));
         let results = try!(json.search("results").ok_or(Error::Data("No results".into())));
         if results.as_array().unwrap().is_empty() {
             return Ok("No results".into());
         }
         let url = try!(results[0]
                            .find("unescapedUrl")
                            .ok_or(Error::Data("No url".into()))
                            .map(|j| j.as_string().unwrap()));
         let title = try!(results[0]
                              .find("titleNoFormatting")
                              .ok_or(Error::Data("No title".into()))
                              .map(|j| j.as_string().unwrap()));
         Ok(format!("{} {}", title, url))
     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def google(text):
         """
         Retrieve the first result from a google for text.

         >>> print(google('á'))
         Á - Wikipedia, the free encyclopedia https://en.wikipedia.org/wiki/%C3%81

         >>> print(google('trump south-china sea'))
         Donald Trump weighs in on China's island-building in the South ... http://www.politifact.com/truth-o-meter/statements/2016/apr/04/donald-trump/donald-trump-weighs-chinas-island-building-south-c/

         >>> print(google('naesuth no result here'))
         0 result
         """
         r = urlopen(
             'https://www.googleapis.com/customsearch/v1?key=<<google_key>>&cx=<<google_cx>>&q=' +
             quote(text))
         data = json.loads(r.read().decode())
         r.close()
         if 'items' not in data:
             return '0 result'
         return data['items'][0]['title'] + \
         ' ' +  data['items'][0]['link']
   #+END_SRC

   Translates using [[https://tech.yandex.com/translate/doc/dg/reference/translate-docpage/][Yandex]]:

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     const TRANSLATE_REGEX: &'static str = concat!(r"^(\.|!|:)", "tr (?P<lang>[^ ]+) (?P<text>.+)");
     fn translate(regex: &Regex, line: &str) -> Result<String, Error> {
         use rustc_serialize::json::Json;
         let mut response = try!(Client::new()
                                     .get(&regex.captures(&line)
                                                .unwrap()
                                                .expand("https://translate.yandex.\
                                                                  net/api/v1.5/tr.\
                                                                  json/translate?key=<<yandex_key>>&text=$text&\
                                                                  lang=$lang"))
                                     .send()
                                     .map_err(Error::Hyper));
         let json = try!(Json::from_reader(&mut response).map_err(Error::Json));
         let reply = match json.find("code").unwrap().as_u64().unwrap() {
             200 => {
                 format!("{}: {}",
                         json.find("lang").unwrap().as_string().unwrap(),
                         json.find("text").unwrap()[0].as_string().unwrap())
             }
             501 => json.find("message").unwrap().as_string().unwrap().into(),
             _ => format!("{:?}", json.as_string()),
         };
         Ok(reply)
     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def translate(direction, text):
         """
         Translate text according to direction.

         >>> print(translate('la-en', 'ad astra per aspera'))
         la-en: to the stars through rough

         >>> print(translate('vi', "you think you're good?"))
         en-vi: ngươi nghĩ ngươi giỏi không?

         >>> print(translate('en', 'mày nghĩ mày ngon?'))
         vi-en: you think you're so tough?

         >>> print(translate('jbo', 'hello')) # doctest: +IGNORE_EXCEPTION_DETAIL
         Traceback (most recent call last):
           ...
         urllib.error.HTTPError: HTTP Error 400: BAD REQUEST
         """
         if not text:
             return 'Missing text'
         r = urlopen(
             'https://translate.yandex.net/api/v1.5/tr.json/translate?key=<<yandex_key>>&text={}&lang={}'
             .format(
                 quote(text), direction))
         data = json.loads(r.read().decode())
         r.close()
         return data['lang'] + ": " + data['text'][0]
   #+END_SRC

   Posts its own source code:

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     fn post_source_code() -> String {
         use url::form_urlencoded;
         let form = [("read:1", "3"),
                     ("name:1", "main.rs"),
                     ("f:1", include_str!("main.rs")),
                     ("read:2", "3"),
                     ("name:2", "Cargo.toml"),
                     ("f:2", include_str!("../Cargo.toml"))];
         let result = Client::new()
                          .post("http://ix.io")
                          .body(&form_urlencoded::serialize(form.iter()))
                          .send();
         match result {
             Ok(mut response) => {
                 let mut reply = String::new();
                 let _ = response.read_to_string(&mut reply);
                 reply.replace('\n', " ")
             }
             Err(e) => format!("unable to post: {:?}", e),
         }
     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def report():
         """
         Return owner and source code

         >>> print(report()) # doctest: +ELLIPSIS
         operated by ... with source code http://ix.io/...
         """
         conn = HTTPConnection('ix.io')
         conn.request(
             'POST', '/',
             'read:1=3&name:1=<<botname>>.py&f:1=' + quote(open(__file__).read()))
         return "operated by {} with source code {}".format(
                 os.getenv('USER'), conn.getresponse().read().decode().strip())
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     if __name__ == '__main__':
         main()
   #+END_SRC

* OpenVPN
  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S openvpn
  #+END_SRC

  #+NAME: openvpn_common
  #+BEGIN_SRC conf
    dev tun
    topology subnet
    persist-key
    persist-tun
    keepalive 10 30
    tls-version-min 1.2
    tls-cipher TLS-DHE-RSA-WITH-AES-128-CBC-SHA
    <tls-auth>
    <<ta_key>>
    </tls-auth>
    <ca>
    -----BEGIN CERTIFICATE-----
    MIIEYTCCA0mgAwIBAgIJAPxrcItU3yz8MA0GCSqGSIb3DQEBCwUAMH0xCzAJBgNV
    BAYTAlZOMQswCQYDVQQIEwJITjEOMAwGA1UEBxMFSGFOb2kxDTALBgNVBAoTBHph
    aGUxEDAOBgNVBAMTB3phaGUgQ0ExEDAOBgNVBCkTB3phaGUubWUxHjAcBgkqhkiG
    9w0BCQEWD2hkaG9hbmdAemFoZS5tZTAeFw0xNTA5MjYxMTM0NTRaFw0yNTA5MjMx
    MTM0NTRaMH0xCzAJBgNVBAYTAlZOMQswCQYDVQQIEwJITjEOMAwGA1UEBxMFSGFO
    b2kxDTALBgNVBAoTBHphaGUxEDAOBgNVBAMTB3phaGUgQ0ExEDAOBgNVBCkTB3ph
    aGUubWUxHjAcBgkqhkiG9w0BCQEWD2hkaG9hbmdAemFoZS5tZTCCASIwDQYJKoZI
    hvcNAQEBBQADggEPADCCAQoCggEBANXOfdISWeotIr3neKpj6IGBlCLMEBNtMB1r
    bTIgkxe9tnNd4jBufq6duLK91ioqcJiAxMLRovYtaRTOpQit5/PnAm2Iwu3u2mGX
    EftWEBSVt437NMVA6L2Jemv1lp81vmzJIODgPQ9elrNteQ3ccAMCpuj/l6PhGeFq
    JvK+dNIJcm2+xM15S6ESwjsZxwijiT3TMJAjXJPC5R3gpULoTHrphPGrS/0RIq9c
    Bd/+4Q7k1MguPK2XSKHiJnUIkQJ/m/XGT2iXVEzhOsHZ8vlaNq1xBzTko10nEb7I
    sOQjuH4GCZMeoYnF3egg534fg+BYPAecuKglqdIpnm4+syJsrR0CAwEAAaOB4zCB
    4DAdBgNVHQ4EFgQUsDCM7/aJ6AjPVQPEbdDTiTa9WIswgbAGA1UdIwSBqDCBpYAU
    sDCM7/aJ6AjPVQPEbdDTiTa9WIuhgYGkfzB9MQswCQYDVQQGEwJWTjELMAkGA1UE
    CBMCSE4xDjAMBgNVBAcTBUhhTm9pMQ0wCwYDVQQKEwR6YWhlMRAwDgYDVQQDEwd6
    YWhlIENBMRAwDgYDVQQpEwd6YWhlLm1lMR4wHAYJKoZIhvcNAQkBFg9oZGhvYW5n
    QHphaGUubWWCCQD8a3CLVN8s/DAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUA
    A4IBAQAKkiDOWmwu1D+qbCSYaSxiMfJ70FyA/o+AuCDeaGxKdFLZ2JQgYK/az3y8
    tGQKBc6AdUY7BoN1Ab/6TOz+hWvmyNOOvq2AMgt2bHHA+JquRZMdgw59OtbB2BjC
    vBs2cxRJWdmv8aSltcqVpm2HNHy3mzcq8i0CdFluxDV+zQmvhGVypAipYTlhdi0l
    KLJlB+3fqS5GQB0wPmkV2N6WJdm0NfoTbBOCXwVb4ChyrgryQaOQi5nu8wO9tzeO
    kK/jQJRFKpdwBYqAe0Q/JP95pVjctyiVFg97ppvQ557QFcY1pHapAwhyBmxYiLak
    W4pz42IduC2pnZ3ut4C7UzpeDMRr
    -----END CERTIFICATE-----
    </ca>
  #+END_SRC

* SSH
  :PROPERTIES:
  :header-args+: :tangle ~/.ssh/config
  :END:

  SSH encryption settings by https://stribika.github.io/2015/01/04/secure-secure-shell.html

  #+BEGIN_SRC conf
    Host *
    KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
    Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
    MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,hmac-ripemd160,umac-128@openssh.com,hmac-sha1
  #+END_SRC

  Machines
  #+BEGIN_SRC conf :tangle ~/.ssh/known_hosts
    <<prefix>>1 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBL5T08oNKjMm7yWA0zqqqSwl6Vn0nlpoAlpP9USh0NewyfVO/xOGgkUWIlUU8p85Z3zK9YY3pl0zfQQrQHvp88Y=
    <<prefix>>185 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMCCrxVyoz4ekNh2zAbr2JzvJdojMMoHYnbo20Qjn3sW+P7FUuuiknzbX0aX81BZWdKFwspNLJAXHLoiS8zy8Wc=
  #+END_SRC

  #+BEGIN_SRC conf
    Host <<prefix>>1
    User root
    IdentityFile ~/.ssh/home
  #+END_SRC

  #+BEGIN_SRC elisp :tangle ~/.emacs
    (eval-after-load 'tramp
      '(add-to-list 'tramp-default-method-alist '("vorme" nil "scp")))
  #+END_SRC

  #+BEGIN_SRC conf
    Host <<prefix>>185
    User <<username>>
    IdentityFile ~/.ssh/home
  #+END_SRC

  #+BEGIN_SRC elisp :tangle ~/.emacs
    (eval-after-load 'tramp
      '(add-to-list 'tramp-default-proxies-alist '("<<prefix>>185" "root" "/ssh:<<prefix>>185:")))
  #+END_SRC

* GUI

  #+BEGIN_SRC sh :tangle ~/.pam_environment
    SSH_AUTH_SOCK=/home/<<username>>/.gnupg/S.gpg-agent.ssh

    CUPS_SERVER=kub:631
    BROWSER=firefox
    TERMINAL=alacritty
    ALTERNATE_EDITOR=remacs

    PATH DEFAULT=@{HOME}/bin:@{HOME}/.cargo/bin:/bin
    RUST_BACKTRACE=1
  #+END_SRC

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S fcitx-{gtk2,gtk3,qt4,qt5,kkc,unikey}
  #+END_SRC

  #+BEGIN_SRC sh :tangle ~/.pam_environment
    XMODIFIERS=@im=fcitx
    QT_IM_MODULE=fcitx
    GTK_IM_MODULE=fcitx
  #+END_SRC

  #+BEGIN_SRC conf :tangle ~/.config/fcitx/config
    [Hotkey]
    # Trigger Input Method
    TriggerKey=ALT_Z
    # Use extra trigger key only after using it to inactivate
    # Available Value:
    # True False
    #UseExtraTriggerKeyOnlyWhenUseItToInactivate=True
    # Extra key for trigger input method
    # Available Value:
    # R_CTRL
    # R_SHIFT
    # L_SHIFT
    # L_CTRL
    # ALT_L_SHIFT
    # ALT_R_SHIFT
    # CTRL Both
    # SHIFT Both
    # L_ALT
    # R_ALT
    # ALT Both
    # Left Super
    # Right Super
    # Super Both
    # Ctrl+Left Super
    # Ctrl+Right Super
    # Super+Left Ctrl
    # Super+Right Ctrl
    # Disabled
    # Custom
    SwitchKey=Disabled
    # Custom switch key
    #CustomSwitchKey=
    # Activate input method
    #ActivateKey=
    # Inactivate Input Method
    #InactivateKey=
    # Enable Hotkey to scroll Between Input Method
    # Available Value:
    # True False
    #IMSwitchKey=True
    # Include Inactivate when scrolling between Input Method
    # Available Value:
    # True False
    IMSwitchIncludeInactive=True
    # Scroll between Input Method
    # Available Value:
    # CTRL_SHIFT
    # ALT_SHIFT
    # CTRL_SUPER
    # ALT_SUPER
    #IMSwitchHotkey=CTRL_SHIFT
    # Reload configuration
    #ReloadConfig=CTRL_5
    # Interval of Two Key Input
    #TimeInterval=250
    # Switching Virtual Keyboard
    #VKSwitchKey=CTRL_ALT_B
    # Switching Remind Mode
    #RemindSwitchKey=
    # Switching Full Width Character Mode
    #FullWidthSwitchKey=
    # Switch Full Width Punc Mode
    #PuncSwitchKey=CTRL_.
    # Prev Page
    #PrevPageKey=- UP
    # Next Page
    #NextPageKey== DOWN
    # Choose Second and Third Candidate Word
    #SecondThirdCandWordKey=
    # Saving All Config and Input History
    #SaveAllKey=CTRL_ALT_S
    # Switch Embeded Preedit
    #SwitchPreedit=CTRL_ALT_P
    # Previous Candidate Word
    #PrevWord=SHIFT_TAB
    # Next Candidate Word
    #NextWord=TAB

    [Program]
    # Seconds sleep before fcitx really start
    #DelayStart=0
    # Share State Among Window
    # Available Value:
    # No
    # All
    # PerProgram
    ShareStateAmongWindow=All
    # Default Input Method State
    # Available Value:
    # Inactive
    # Active
    #DefaultInputMethodState=Inactive

    [Output]
    # Type half width Punc After a Number
    # Available Value:
    # True False
    #HalfPuncAfterNumber=True
    # Disable Paging in Remind Mode
    # Available Value:
    # True False
    #RemindModeDisablePaging=True
    # Commit when toggle state
    # Available Value:
    # True False
    #SendTextWhenSwitchEng=True
    # Candidate Word Number
    #CandidateWordNumber=5
    # Give the tips of Phrase
    # Available Value:
    # True False
    #PhraseTips=True
    # Do not commit preedit text when unfocus a window
    # Available Value:
    # True False
    #DontCommitPreeditWhenUnfocus=False

    [Appearance]
    # Show Input Method Hint After Input method changed
    # Available Value:
    # True False
    #ShowInputWindowAfterTriggering=True
    # Show Input Method Hint After Input method changed and Focus in
    # Available Value:
    # True False
    #ShowInputWindowWhenFocusIn=False
    # Input Method Hint will be only shown when state is active
    # Available Value:
    # True False
    #ShowInputWindowOnlyWhenActive=True
    # Show Input Speed
    # Available Value:
    # True False
    #ShowInputSpeed=False
    # Show Version
    # Available Value:
    # True False
    #ShowVersion=False
    # Do not show input window if there is only preedit string
    # Available Value:
    # True False
    #HideInputWindowWhenOnlyPreeditString=False
    # Do not show input window if there is only one candidate and preedit
    # Available Value:
    # True False
    #HideInputWindowWhenOnlyOneCandidate=False
  #+END_SRC

  #+BEGIN_SRC sh :tangle ~/.config/openbox/autostart
    fcitx &
  #+END_SRC

  #+BEGIN_SRC sh :tangle ~/.config/openbox/autostart
    gpg-agent --daemon --enable-ssh-support
    compton &
    xbacklight =30 &
    tint2 &
    kwalletd &
    lxpolkit &
    firefox &
    emacs &
    yakuake &
    keepass &
    pragha -p &
  #+END_SRC

  Communication
  #+BEGIN_SRC sh :tangle ~/.config/openbox/autostart
    quasselclient &
    viber &
    skype &
  #+END_SRC

** kwin
   :PROPERTIES:
   :header-args+: :tangle ~/.config/kwinrulesrc
   :END:

   #+BEGIN_SRC conf
     [1]
     Description=Window settings for firefox
     shortcut=F5
     shortcutrule=2
     windowrole=browser
     windowrolematch=1
     wmclass=navigator firefox
     wmclasscomplete=true
     wmclassmatch=1
   #+END_SRC

   Put emacs on F4

   #+BEGIN_SRC conf
     [2]
     Description=Application settings for emacs
     shortcut=F4
     shortcutrule=2
     wmclass=emacs
     wmclasscomplete=false
     wmclassmatch=1
   #+END_SRC

   Put konsole on F6

   #+BEGIN_SRC conf
     [3]
     Description=Application settings for konsole
     shortcut=F6
     shortcutrule=2
     wmclass=konsole
     wmclasscomplete=false
     wmclassmatch=1
   #+END_SRC

   #+BEGIN_SRC conf
     [4]
     Description=No border on anything
     noborder=true
     noborderrule=2
   #+END_SRC

   #+BEGIN_SRC conf
     [General]
     count=4
   #+END_SRC

* Git
  #+BEGIN_SRC conf :tangle .git/config
    [core]
            repositoryformatversion = 0
            filemode = true
            bare = false
            logallrefupdates = true
    [remote "origin"]
            url = https://gitlab.com/<<username>>/<<username>>
            pushUrl = gitlab.com:<<username>>/<<username>>
            pushUrl = github.com:<<username>>/<<username>>
            pushUrl = bitbucket.org:<<username>>/<<username>>
            fetch = +refs/heads/*:refs/remotes/origin/*
    [branch "master"]
            remote = origin
            merge = refs/heads/master
  #+END_SRC

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S git
  #+END_SRC

  #+BEGIN_SRC conf :tangle ~/.gitconfig
    [user]
    name = Hoàng Đức Hiếu
    email = <<username>>@<<domain>>
    [color]
    ui = auto
    [core]
    eol = lf
    whitespace = trailing-space,space-before-tab
    [alias]
    ml = log --reverse --topo-order ORIG_HEAD..
    [merge]
    conflictstyle = diff3
    [push]
    default = simple
    [pull]
    rebase = true
    [rebase]
    stat = true
  #+END_SRC

  Code hosting sites:

  #+BEGIN_SRC conf :tangle ~/.ssh/known_hosts
    github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
    bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
    gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
  #+END_SRC

  #+BEGIN_SRC conf :tangle ~/.ssh/config
    Host gitlab.com github.com bitbucket.org
    User git
    IdentityFile ~/.ssh/git
    Host git.kde.org
    User git
    IdentityFile ~/.ssh/kde
    Host heroku.com
    IdentityFile ~/.ssh/heroku
  #+END_SRC

  Magit is awesome.

  #+BEGIN_SRC elisp :tangle ~/.emacs
    (eval-after-load 'use-package
      '(progn
         (use-package magit
           :bind ("C-x g" . magit-status)
           :config
           (setq magit-save-repository-buffers 'dontask
                 magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1
                 magit-push-always-verify nil))))
  #+END_SRC

* Crawl

  #+BEGIN_SRC conf :tangle ~/.crawlrc
    tile_full_screen = false
    autopickup_exceptions += <tomahawk, <throwing net, <javelin, <rock, <immol
    autopickup_exceptions += <misc, <ego, <artefact, <mutagenic
  #+END_SRC

* ArchLinux
  Pacman config

  #+NAME: pacman_common
  #+BEGIN_SRC conf
    [options]
    VerbosePkgLists
    UseSyslog
    CheckSpace
    HoldPkg = pacman glibc
    SigLevel = Required DatabaseOptional
    LocalFileSigLevel = Optional

    [core]
    Include = /etc/pacman.d/mirrorlist
    [extra]
    Include = /etc/pacman.d/mirrorlist
    [community]
    Include = /etc/pacman.d/mirrorlist
    [blackarch]
    Server = http://f.archlinuxvn.org/$repo/$repo/os/$arch
  #+END_SRC

  Refresh database

  #+BEGIN_SRC sh :dir /sudo::
    dirmngr --daemon
    pacman-key -r 7533BAFE69A25079
    pacman-key --lsign 7533BAFE69A25079
    <<pacman>> -S -y
  #+END_SRC

  Base utils

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S haveged p7zip parallel pkgfile
    <<system_ctl>> enable --now haveged
  #+END_SRC

  #+BEGIN_SRC sh
    pkgfile -u
  #+END_SRC

  Dev-env:

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S base-devel tmux fish android-tools android-udev
    chsh <<username>> -s /usr/bin/fish
    gpasswd -a <<username>> adbusers
  #+END_SRC

  Monitoring:

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S ethtool lm_sensors traceroute psmisc \
        procps-ng inetutils ltrace sysdig atop iotop
  #+END_SRC

  #+BEGIN_SRC sh :tangle ~/bin/strace :shebang #!/bin/sh :no-expand
    exec /usr/bin/ltrace -CSn2 $@
  #+END_SRC

  Of course emacs is installed, now run it

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S emacs-pkgbuild-mode
  #+END_SRC

  #+BEGIN_SRC conf :tangle ~/.config/systemd/user/remacs.service
    [Unit]
    Description=REmacs

    [Service]
    ExecStart=%h/remacs/src/remacs
    Restart=always
    RestartSec=1sec

    [Install]
    WantedBy=default.target
  #+END_SRC

  #+BEGIN_SRC sh :dir ~
    <<user_ctl>> enable --now emacs syncthing pulseaudio
  #+END_SRC

** kub
   :PROPERTIES:
   :header-args+: :dir /sudo:10.117.14.185:
   :END:
*** Network
    :PROPERTIES:
    :header-args+: :tangle-mode 260
    :END:
    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/systemd/network/eth0.network
      [Match]
      Name = eth0

      [Network]
      Address = <<prefix>>185/24
      Gateway = <<prefix>>1
      DNS = <<prefix>>1
      IPForward = yes

      Tunnel=he-ipv6
      Address=<<prefix6>>1/64
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/systemd/network/he-ipv6.netdev
      [NetDev]
      Name=he-ipv6
      Kind=sit
      MTUBytes=1472

      [Tunnel]
      Local=<<prefix>>185
      Remote=216.218.221.42
      TTL=255
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/systemd/network/he-ipv6.network
      [Match]
      Name=he-ipv6
      [Network]
      Address=2001:470:35:62a::2/64
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/systemd/system/he-ipv6-route.service
      [Unit]
      After=network.target

      [Service]
      Type=oneshot
      RemainAfterExit=yes
      ExecStart=/bin/ip -6 route add default src <<prefix6>>1 dev he-ipv6
      ExecStop=/bin/ip -6 route del default

      [Install]
      WantedBy=multi-user.target
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/radvd.conf
      interface eth0 {
      AdvSendAdvert on;
      MinRtrAdvInterval 3;
      MaxRtrAdvInterval 10;
      AdvLinkMTU 1472;
      prefix <<prefix6>>/64 {
      AdvOnLink on;
      AdvRouterAddr on;
      };
      };
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/resolv.conf
      nameserver <<prefix>>1
    #+END_SRC

*** Pacman
    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/pacman.conf :tangle-mode 260
      <<pacman_common>>

      [options]
      Architecture = armv7h

      [alarm]
      Include = /etc/pacman.d/mirrorlist
      [aur]
      Include = /etc/pacman.d/mirrorlist
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/pacman.d/mirrorlist
      Server = http://vn.mirror.archlinuxarm.org/$arch/$repo
    #+END_SRC

*** LED blinking
    #+BEGIN_SRC sh :tangle /sudo:10.117.14.185:/usr/local/bin/leds :shebang #!/bin/sh
      echo none > /sys/class/leds/cubieboard:green:usr/trigger
      echo mmc0 > /sys/class/leds/cubieboard:blue:usr/trigger
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/systemd/system/leds.service
      [Service]
      Type=oneshot
      ExecStart=/bin/sh /usr/local/bin/leds
      RemainAfterExit=true

      [Install]
      WantedBy=basic.target
    #+END_SRC

*** tmux
    #+BEGIN_SRC conf :tangle /ssh:10.117.14.185:.config/systemd/user/tmux.service
      [Unit]
      Description=Start tmux in detached session

      [Service]
      Type=forking
      ExecStart=/usr/bin/tmux new-session -s %u -d
      ExecStop=/usr/bin/tmux kill-session -t %u
      Restart=always

      [Install]
      WantedBy=multi-user.target
    #+END_SRC

    #+BEGIN_SRC conf :tangle /ssh:10.117.14.185:.tmux.conf
      set -g base-index 1
      set -g pane-base-index 1
      setw -g aggressive-resize on
      set -g history-limit 10000
    #+END_SRC

*** Torrent
    #+BEGIN_SRC sh :dir /sudo:10.117.14.185:
      <<pacman>> -S deluge python2-mako
    #+END_SRC

    #+BEGIN_SRC conf :tangle /10.117.14.185:.config/systemd/user/deluge.service
      [Unit]
      Description=Deluge

      [Service]
      ExecStart=/usr/bin/deluged -d

      [Install]
      WantedBy=default.target
    #+END_SRC

    #+BEGIN_SRC conf :tangle /10.117.14.185:.config/systemd/user/deluge-web.service
      [Unit]
      Description=Deluge Web

      [Service]
      ExecStart=/usr/bin/deluge-web -b /deluge/

      [Install]
      WantedBy=default.target
    #+END_SRC

*** Tor
    #+BEGIN_SRC sh :dir /sudo:10.117.14.185:
      <<pacman>> -S tor
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/tor/torrc :tangle-mode 420
      ContactInfo tor at <<domain>>
      Nickname kub
      DirPort 4660
      ORPort 34289
      SOCKSPort <<prefix>>185:9050
      MaxAdvertisedBandwidth 400 KBytes
      ExitPolicy reject *:*

      DataDirectory /var/lib/tor
      Log notice syslog
   #+END_SRC

*** HTTP
    #+BEGIN_SRC sh
      <<pacman>> -S nginx-mainline-full php-fpm
    #+END_SRC

    #+NAME: php
    #+BEGIN_SRC text
      location ~ \.php(?:$|/) {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_pass php-fpm;
      }
    #+END_SRC

    #+BEGIN_SRC c :tangle /sudo:10.117.14.185:/etc/nginx/nginx.conf
      load_module /usr/lib/nginx-mainline/modules/ngx_http_fancyindex_module.so;
      events {}
      http {
        include mime.types;
        charset utf-8;
        gzip off;
        client_max_body_size 10G;
        root /home/hdhoang/Public;
        fancyindex on;
        fancyindex_default_sort date_desc;
        fancyindex_exact_size off;
        fancyindex_name_length 1000;
        fancyindex_time_format "%Y-%m-%d %H:%M";
        index index.html index.php;

        access_log off;
        log_not_found off;

        server {
          location ~ "^/.well-known/acme-challenge/([-_a-zA-Z0-9]+)$" {
            return 200 "$1.cktlFWWgTL_idErOLT5swJTT2er1znIr9kUX1FkClDk";
          }
          return 301 https://$host$request_uri;
        }

        ssl_certificate /var/lib/acme/live/kub.<<domain>>/fullchain;
        ssl_certificate_key /var/lib/acme/live/kub.<<domain>>/privkey;
        ssl_protocols TLSv1.2;
        ssl_ciphers EECDH+CHACHA20:EECDH+AES128;
        ssl_prefer_server_ciphers on;
        add_header Strict-Transport-Security "max-age=31536000; preload; includeSubdomains";

        server {
          listen 443 ssl http2 default_server;
          listen [::]:443 ssl http2 default_server;
          server_name <<domain>>;

          location ~ ^/(Videos|Music) {
            auth_basic "hello";
            auth_basic_user_file music;
          }
          location /deluge {
            proxy_pass http://127.0.0.1:8112/;
            auth_basic "hello";
            auth_basic_user_file music;
          }
        }
      }
    #+END_SRC

*** DLNA
    #+BEGIN_SRC sh :dir /sudo:10.117.14.185:
      <<pacman>> -S minidlna
    #+END_SRC

    #+BEGIN_SRC sh :dir /sudo:10.117.14.185:
      <<system_ctl>> enable --now minidlna
     #+END_SRC

*** IPsec
    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/ipsec.conf
      ca letsencrypt
          auto=add
          cacert=/var/lib/acme/live/kub.<<domain>>/chain

      conn kub
          auto=add
          left=<<prefix>>185
          leftid=kub.<<domain>>
          leftcert=/var/lib/acme/live/kub.<<domain>>/cert
          leftsubnet=<<prefix>>0/24
          leftfirewall=yes
          leftdns=<<prefix>>1

          rightauth=eap-mschapv2
          eap_identity=%any
          rightsourceip=%dhcp
    #+END_SRC

*** OpenVPN
    #+BEGIN_SRC conf :tangle-mode 256 :tangle /sudo:10.117.14.185:/etc/openvpn/kub.conf
      <<openvpn_common>>

      key-direction 0
      tls-server
      <pkcs12>
      <<kub_pfx>>
      </pkcs12>
      <dh>
      -----BEGIN DH PARAMETERS-----
      MIIBCAKCAQEAoioJw6aUXmgBDSw6SzbSZww6i7eH0MC+Eba5qGmYJnKn2zI8dBH6
      JZKnAyz9MbD21loI6KjAnOzZkBp7DKle1cACLS229Olycr22rXWPFuhMV15TohDJ
      ArazVXSJGDL9OXhdHei96K3qXofz/3AzXEVxD0unQd5sRlgNGmunofvgWBechdmn
      YQl44SZ0asC8uUY1uiKjVyQzqeNDi3rjJtTobcPdR6Pb8CnS3cfwoWzXMwUexmfJ
      VQSNaDZIeQcwV5MEHs1XViOTiEvT8IHbJojJri0geUSJ+HkX1JTxGIUj4xxKHQ0j
      AFEjqDYFh3q7U6QgFLRWZffVLgxIZVopIwIBAg==
      -----END DH PARAMETERS-----
      </dh>
      user nobody
      group nobody

      mode server

      server 10.255.0.0 255.255.255.0
      push "route <<prefix>>54"
    #+END_SRC

*** SSH
    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/ssh/sshd_config
      Protocol 2
      HostKey /etc/ssh/ssh_host_ed25519_key

      KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
      Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
      MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,hmac-ripemd160,umac-128@openssh.com

      AllowGroups wheel
      PasswordAuthentication no
      ChallengeResponseAuthentication no
      UsePrivilegeSeparation sandbox

      Subsystem sftp /usr/lib/ssh/sftp-server
    #+END_SRC

** ton
*** Hardware
    Fix USB interfering with suspending

    #+BEGIN_SRC sh :tangle /sudo::/usr/local/bin/s230u :tangle-mode 320
      echo EHC1 > /proc/acpi/wakeup
      echo EHC2 > /proc/acpi/wakeup
    #+END_SRC

    Let powertop autotune. This conveniently waits for the trackpoint to become available for the last section.

    #+BEGIN_SRC sh :tangle /sudo::/usr/local/bin/s230u :tangle-mode 320
      powertop --auto-tune
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo::/etc/systemd/system/s230u.service
      [Service]
      Type=oneshot
      RemainAfterExit=yes
      ExecStart=/usr/local/bin/s230u

      [Install]
      WantedBy=basic.target
    #+END_SRC

    #+BEGIN_SRC sh :dir /sudo::
      <<system_ctl>> enable --now s230u
    #+END_SRC
*** Mounts
    #+BEGIN_SRC sh
      fallocate -l 2G /swap
      chmod u=rw,go= /swap
      mkswap /swap
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo::/etc/fstab
      LABEL=home /home/<<username>> ntfs-3g noatime,nofail
      LABEL=ESP /boot vfat
      /swap none swap
    #+END_SRC

*** Network
    #+BEGIN_SRC conf :tangle /sudo::/etc/systemd/network/00-bkap.network
      [Match]
      Name = enp4s0

      [Network]
      DNS = 8.8.8.8
      Address = 192.168.0.252/24
      Gateway = 192.168.0.1
      Address = 192.168.1.252/24
      Gateway = 192.168.1.1
      Address = 192.168.4.252/24
      Gateway = 192.168.4.1
      Address = 192.168.5.252/24
      Gateway = 192.168.5.1

      [Route]
      Destination=192.168.1.1
      Source=192.168.1.252
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo::/etc/systemd/network/dhcp.network
      [Network]
      DHCP=ipv4
    #+END_SRC

*** Pacman
  #+BEGIN_SRC conf :tangle /sudo::/etc/pacman.conf :tangle-mode 260
    <<pacman_common>>

    [options]
    Architecture = auto

    [multilib]
    Include = /etc/pacman.d/mirrorlist

    [antergos]
    SigLevel = PackageRequired
    Include = /etc/pacman.d/antergos-mirrorlist
  #+END_SRC

  #+BEGIN_SRC conf :tangle /sudo::/etc/pacman.d/mirrorlist
    Server = http://f.archlinuxvn.org/archlinux/$repo/os/$arch
  #+END_SRC

*** OpenVPN
    #+BEGIN_SRC conf :tangle-mode 256 :tangle /sudo::/etc/openvpn/kub.conf
      <<openvpn_common>>

      key-direction 1
      tls-client
      <pkcs12>
      <<ton_pfx>>
      </pkcs12>

      nobind
      pull

      remote k.<<domain>> 22
      verify-x509-name kub.<<domain>> name
      remote-cert-tls server
      resolv-retry infinite
    #+END_SRC

*** Fonts
    #+BEGIN_SRC sh :dir
      <<pacman>> -S noto-fonts noto-fonts-emoji
    #+END_SRC

    #+BEGIN_SRC xml :tangle ~/.config/fontconfig/fonts.conf :padline no :comments no
      <?xml version='1.0'?>
      <!DOCTYPE fontconfig SYSTEM 'fonts.dtd'>
      <fontconfig>
        <match target="font">
          <edit mode="assign" name="rgba">
            <const>none</const>
          </edit>
        </match>
        <match target="font">
          <edit mode="assign" name="hinting">
            <bool>true</bool>
          </edit>
        </match>
        <match target="font">
          <edit mode="assign" name="hintstyle">
            <const>hintslight</const>
          </edit>
        </match>
        <match target="font">
          <edit mode="assign" name="antialias">
            <bool>true</bool>
          </edit>
        </match>
        <match target="pattern">
          <test qual="any" name="family"><string>Arial</string></test>
          <edit name="family" mode="assign" binding="same"><string>sans-serif</string></edit>
        </match>
        <match target="pattern">
          <test qual="any" name="family"><string>DejaVu Sans</string></test>
          <edit name="family" mode="assign" binding="same"><string>sans-serif</string></edit>
        </match>
        <alias>
          <family>sans-serif</family>
          <prefer>
            <family>Source Han Sans</family>
          </prefer>
        </alias>
        <alias>
          <family>serif</family>
          <prefer>
            <family>Source Han Serif</family>
          </prefer>
        </alias>
        <alias>
          <family>monospace</family>
          <prefer>
            <family>Source Code Sans JP</family>
          </prefer>
        </alias>
        <selectfont>
          <rejectfont>
            <glob>/usr/share/fonts/default/Type1/*</glob>
            <pattern>
              <patelt name="scalable">
                <bool>false</bool>
              </patelt>
            </pattern>
          </rejectfont>
        </selectfont>
      </fontconfig>
     #+END_SRC

*** Desktop
    These DBus services are provided by plasma-workspace-units.

    #+BEGIN_SRC sh :dir /sudo::
      rm /usr/share/dbus-1/services/org.kde.{kded5,kglobalaccel,kuiserver,kwalletd5}.service
    #+END_SRC

**** Inside VM
     #+BEGIN_SRC sh :dir /sudo::
       <<system_ctl>> enable --now systemd-networkd-wait-online sshd
     #+END_SRC

     #+BEGIN_SRC conf :tangle /sudo::/etc/fstab
       //192.168.208.1/home /home/<<username>> cifs credentials=/etc/cifs,uid=1000,gid=1000,file_mode=0600
     #+END_SRC

     On the host side, open 445/tcp to this VM, and run emacs over X with MobaXterm:

     #+BEGIN_SRC conf :tangle bin/emacs.moba
       emacs =  #109#0%192.168.208.128%22%<<username>>%%-1%0%cp -r ~/.gnupg /run/user/1000 && chmod -R 700 /run/user/1000/.gnupg && export GNUPGHOME__EQUAL__/run/user/1000/.gnupg && setxkbmap dvorak && gpg-agent --enable-ssh-support --daemon emacs%%22%%0%0%Interactive shell%h:\.ssh\kub%%0%0%0%0%%1080%%0#MobaFont%10%0%0%0%15%236,236,236%0,0,0%180,180,192%0%-1%0%%xterm%-1%0%0,0,0%54,54,54%255,96,96%255,128,128%96,255,96%128,255,128%255,255,54%255,255,128%96,96,255%128,128,255%255,54,255%255,128,255%54,255,255%128,255,255%236,236,236%255,255,255%80%24%0#0
     #+END_SRC

     Remember to quit emacs before suspending.
***** Megasync
      #+BEGIN_SRC sh :dir /sudo::
       <<pacman>> -S xorg-server-xvfb megasync
      #+END_SRC

      #+BEGIN_SRC conf :tangle ~/.config/systemd/user/megasync.service
       [Unit]
       Description=Headless megasync

       [Service]
       ExecStart=/usr/bin/xvfb-run megasync

       [Install]
       WantedBy=default.target
      #+END_SRC

      #+BEGIN_SRC sh
       <<user_ctl>> enable --now megasync
      #+END_SRC

**** Keyboard
     Use dvorak, swap caps for ctrl

     #+BEGIN_SRC conf :tangle /sudo::/usr/share/kbd/keymaps/caps2ctrl.map
       include "/usr/share/kbd/keymaps/i386/dvorak/dvorak.map.gz"
       keycode 58 = Control
     #+END_SRC

     #+BEGIN_SRC sh :dir /sudo::
       localectl set-keymap caps2ctrl
     #+END_SRC

     Swap caps for ctrl

     #+BEGIN_SRC conf :tangle keyboard.reg :comments no :shebang Windows Registry Editor Version 5.00
       [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
       "Scancode Map"=hex:00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00
     #+END_SRC

     Base Japanese IME on dvorak

     #+BEGIN_SRC conf :tangle keyboard.reg
       [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layouts\00000411]
       "Layout File"="kbddv.dll"
     #+END_SRC

     Tangle registry files as UTF-16LE with BOM

     #+BEGIN_SRC elisp :tangle ~/.emacs
       (add-to-list 'file-coding-system-alist '("\\.reg\\'" . utf-16le-with-signature-dos))
     #+END_SRC

     Import into registry

     #+BEGIN_SRC sh
       start regedit $PWD/*reg
     #+END_SRC

**** Pointer
     Up sensitivity

     #+BEGIN_SRC sh :tangle /sudo::/usr/local/bin/s230u :tangle-mode 320
       echo 200 > /sys/bus/serio/devices/serio2/sensitivity
     #+END_SRC

     #+BEGIN_SRC sh :dir /sudo::
       <<pacman>> -S xf86-input-libinput
     #+END_SRC

     Use natural scrolling on touchpad

     #+BEGIN_SRC conf :tangle /sudo::/etc/X11/xorg.conf.d/pointer.conf
       Section "InputClass"
               Identifier "Natural scrolling"
               MatchProduct "TouchPad"
               Driver "libinput"
               Option "NaturalScrolling" "1"
       EndSection
     #+END_SRC

**** Rotation
     #+BEGIN_SRC sh :dir /sudo::
       <<pacman>> -S acpid
     #+END_SRC

     #+BEGIN_SRC text :tangle /sudo::/etc/acpi/events/rotation-button
       event=ibm/hotkey LEN0068:00 00000080 00006020
       action=sudo -u <<username>> DISPLAY=:0 /usr/local/bin/rotate-screen
     #+END_SRC

     #+BEGIN_SRC sh :tangle /sudo::/usr/local/bin/rotate-screen :shebang #!/bin/sh :tangle-mode 365
       case $(xrandr | grep LVDS1 | cut -f 4 -d ' ' | tr -d '(') in
           normal) new="left";;
           left)   new="inverted";;
           inverted)   new="normal";;
       esac
       xrandr --output LVDS1 --rotate $new

       case $new in
           normal) matrix="1 0 0 0 1 0 0 0 1";;
           left)   matrix="0 -1 1 1 0 0 0 0 1";;
           right)  matrix="0 1 0 -1 0 1 0 0 1";;
           inverted) matrix="-1 0 1 0 -1 1 0 0 1";;
       esac
       for dev in "SynPS/2 Synaptics TouchPad" "TPPS/2 IBM TrackPoint" "Atmel Atmel maXTouch Digitizer"; do
           xinput set-prop "$dev" "Coordinate Transformation Matrix" $matrix
       done
     #+END_SRC

     #+BEGIN_SRC sh :dir /sudo::
       <<system_ctl>> enable --now acpid
     #+END_SRC

*** Picard
    #+BEGIN_SRC sh :dir /sudo::
      <<pacman>> -S picard chromaprint
    #+END_SRC

    #+BEGIN_SRC conf :tangle ~/.config/MusicBrainz/Picard.conf
      [setting]
      server_host=musicbrainz.org
      server_port=80

      fingerprinting_system=acoustid
      acoustid_apikey=<<acoustid_key>>
      acoustid_fpcalc=/usr/bin/fpcalc

      save_images_to_tags=true
      save_only_front_images_to_tags=true
      save_images_to_files=false
      ca_provider_use_amazon=true
      ca_provider_use_caa=true
      ca_provider_use_caa_release_group_fallback=true
      ca_provider_use_whitelist=true
      caa_image_size=1
      caa_approved_only=true
      caa_restrict_image_types=true
      analyze_new_files=false
      ignore_file_mbids=false
      quit_confirmation=true
      va_name=Various Artists
      nat_name=
      standardize_artists=true

      windows_compatibility=true
      ascii_filenames=false
      rename_files=true
      move_files=true
      file_naming_format="$if2(%albumartist%,%artist%)/$if($ne(%albumartist%,),%album%/)$if($gt(%totaldiscs%,1),%discnumber%-,)$if($ne(%albumartist%,),$num(%tracknumber%,2) ,)$if(%_multiartist%,%artist% - ,)%title%"
      move_files_to=<<music>>/_new
      move_additional_files=true
      move_additional_files_pattern=*.jpg *.png *.jpeg
      delete_empty_dirs=true

      browser_integration=true
      browser_integration_port=8000
      browser_integration_localhost_only=true

      dont_write_tags=false
      preserve_timestamps=false
      write_id3v1=true
      write_id3v23=true
      id3v23_join_with=/
      id3v2_encoding=utf-16
      remove_ape_from_mp3=true
      remove_id3_from_flac=true
    #+END_SRC

*** mpd
    :PROPERTIES:
    :header-args+: :dir ~
    :END:

    Create playlist
    #+BEGIN_SRC sh
      mpc listall > <<music>>/pq.m3u
    #+END_SRC

    Shuffle and play

    #+BEGIN_SRC sh :results raw
      mpc -q clear && mpc load pq && mpc -q shuffle && mpc play
    #+END_SRC

    Delete currently playing track

    #+BEGIN_SRC sh :eval query
      rm -v <<music>>/"$(mpc -f %file% | head -1)"
    #+END_SRC

*** mpv

    #+BEGIN_SRC conf :tangle ~/.config/mpv/mpv.conf
      hwdec-codecs=all
      hwdec=auto
      no-audio-display
      ontop
      shuffle
      sub-auto=fuzzy
      window-scale=0.5
    #+END_SRC

    #+BEGIN_SRC conf :tangle ~/.config/mpv/input.conf
      q quit_watch_later
      MOUSE_BTN0 cycle pause
      MOUSE_BTN1 show_progress
      MOUSE_BTN2 cycle fullscreen
      z set window-scale 2
      Z set window-scale 1

      ; show_progress
      f show_text "${filename}"
      d cycle audio
      y add volume 1
      i add volume -1
      g add sub-delay  0.1
      h add sub-delay -0.1
      x cycle mute

      k frame_step
      ' seek +5
      a seek -5
      , seek +60
      o seek -60
      . seek +300
      e seek -300

      u cycle fullscreen
    #+END_SRC

* Emacs
  :PROPERTIES:
  :header-args+: :tangle ~/.emacs
  :END:

  OOBE settings:

  #+BEGIN_SRC elisp
    (server-mode t)
    (global-set-key (kbd "C-x C-r")
                    (lambda () (interactive)
                      (revert-buffer :noconfirm t)))
    (defalias 'yes-or-no-p #'y-or-n-p)
    (defalias 'dabbrev-expand #'hippie-expand)
    (setq auto-save-default nil
          calendar-week-start-day 1
          default-input-method "vietnamese-telex"
          inhibit-startup-screen t
          make-backup-files nil
          scroll-preserve-screen-position t
          tramp-default-method "ssh"
          undo-tree-mode-lighter ""
          visible-bell t
          save-interprogram-paste-before-kill t
          frame-title-format "%b")
    (set-language-environment "UTF-8")
    (setq-default buffer-file-coding-system 'utf-8-unix)
    (setq-default sentence-end-double-space nil)
    (global-set-key (kbd "C-\\") #'toggle-input-method)
    (blink-cursor-mode -1)
    (show-paren-mode t)
    (winner-mode)
  #+END_SRC

  Package management

  #+BEGIN_SRC elisp
    (package-initialize)
    (setq package-archives
          '(("gnu" . "https://elpa.gnu.org/packages/")
            ("marmalade" . "https://marmalade-repo.org/packages/")
            ("melpa" . "http://melpa.org/packages/")))
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (setq use-package-always-ensure t)
    (require 'use-package)
  #+END_SRC

  Color theme

  #+BEGIN_SRC elisp
    (use-package color-theme-sanityinc-solarized
      :config (load-theme 'sanityinc-solarized-dark t))
  #+END_SRC

  Font on Windows

  #+BEGIN_SRC elisp
    (when (eq window-system 'w32)
      (if (> window-system-version 5)
          (set-default-font "Consolas-12" :frames t)
        (set-default-font "Lucida Console-10" :frames t)))
  #+END_SRC

** Discovery
   Learn what's available under prefix keys

   #+BEGIN_SRC elisp
     (use-package which-key :ensure
       :diminish ""
       :config (which-key-mode))
   #+END_SRC

** Editing
   Vim-style

   #+BEGIN_SRC elisp
     (use-package evil
       :config
       (evil-mode t)
       (evil-set-initial-state 'special-mode 'emacs)
       (dolist (state '(normal motion))
         (evil-define-key state global-map
           (kbd "<SPC>") #'evil-scroll-down
           (kbd "S-<SPC>") #'evil-scroll-up))
       (dolist (state '(insert motion normal))
         (evil-define-key state global-map
           (kbd "C-t") #'transpose-chars
           (kbd "C-d") #'delete-char
           (kbd "C-k") #'kill-line
           (kbd "C-y") #'evil-paste-before
           (kbd "C-a") #'beginning-of-line (kbd "C-e") #'end-of-line
           (kbd "C-f") #'forward-char   (kbd "C-b") #'backward-char
           (kbd "C-n") #'next-line      (kbd "C-p") #'previous-line
           (kbd "<down>") #'next-line   (kbd "<up>") #'previous-line
           (kbd "j") #'next-line        (kbd "k") #'previous-line
           (kbd "C-v") #'evil-scroll-down (kbd "M-v") #'evil-scroll-up
           (kbd "C-r") #'isearch-backward))
       (evil-define-key 'insert global-map
         "j" #'self-insert-command "k" #'self-insert-command)
       (evil-define-key 'motion help-mode-map
         (kbd "<tab>") #'forward-button))
   #+END_SRC

   Aggressive indent

   #+BEGIN_SRC elisp
     (setq tab-always-indent 'complete)
     (use-package aggressive-indent
       :diminish ""
       :config
       (global-aggressive-indent-mode)
       (add-to-list 'aggressive-indent-excluded-modes 'rust-mode))
   #+END_SRC

   Switch window with ace

   #+BEGIN_SRC elisp
     (use-package ace-window
       :config (ace-window-display-mode 1)
       :bind ("C-x o" . ace-window))
   #+END_SRC

   Do things with helm:

   #+BEGIN_SRC elisp
     (use-package helm
       :config
       (helm-mode 1)
       (define-key shell-mode-map (kbd "M-r") #'helm-comint-input-ring)
       :diminish helm-mode
       :bind (("C-h SPC" . helm-all-mark-rings)
              ("C-x b" . helm-mini)
              ("C-x C-b" . helm-buffers-list)
              ("C-x C-f" . helm-find-files)
              ("C-c g" . helm-do-grep)
              ("C-s" . helm-occur)
              ("M-x" . helm-M-x)))
     (require 'helm-config)
     (use-package evil
       :config (dolist (state '(insert motion normal))
                 (evil-define-key state global-map
                   (kbd "M-y") #'helm-show-kill-ring)))
   #+END_SRC

** Org

   #+BEGIN_SRC elisp
     (add-hook 'org-mode-hook
               '(lambda ()
                  (add-hook 'before-save-hook 'org-align-all-tags
                            :local t)))
     (org-babel-do-load-languages 'org-babel-load-languages
				  '((shell . t)))
     (setq org-src-fontify-natively t)
     (use-package htmlize :ensure)
     (setq org-export-initial-scope 'subtree
           org-babel-use-quick-and-dirty-noweb-expansion t)
     (setq org-latex-pdf-process '("xelatex -interaction nonestopmode -output-directory %o %f"))
     (setq org-html-doctype "html5"
           org-html-html5-fancy t
           org-html-head "<link rel=stylesheet type=text/css href=blog.css>"
           org-html-use-unicode-chars t
           org-html-head-include-default-style nil
           org-html-head-include-scripts nil
           org-html-postamble nil)
   #+END_SRC

*** Crypt

    #+BEGIN_SRC elisp
      (require 'org-crypt)
      (add-hook 'org-mode-hook
                '(lambda ()
                   (add-hook 'before-save-hook 'org-encrypt-entries
                             :local t)))
      (setq org-tags-exclude-from-inheritance '("crypt")
            org-crypt-key "<<username>>@keybase.io")
    #+END_SRC

    Make it possible to tangle encrypted block

    #+BEGIN_SRC elisp
      (remove-hook 'org-babel-pre-tangle-hook #'save-buffer)
    #+END_SRC

** Doc-View

   #+BEGIN_SRC elisp
     (eval-after-load 'doc-view
       '(bind-key (kbd "<mouse-1>") #'doc-view-scroll-up-or-next-page doc-view-mode-map))
     (setq doc-view-resolution 300
           doc-view-cache-directory (expand-file-name "~/.emacs.d/doc-view"))
     (use-package evil
       :config (add-hook 'view-mode-hook #'evil-emacs-state))
   #+END_SRC

** Dired

   #+BEGIN_SRC elisp
     (use-package dired+
       :config
       (require 'dired+)
       (global-dired-hide-details-mode -1)
       (defun dired-open ()
         (interactive)
         (dired-do-shell-command "xdg-open ;" :file-list (dired-get-marked-files)))
       (define-key dired-mode-map (kbd "RET") #'dired-open)
       (define-key dired-mode-map (kbd "<mouse-2>") #'dired-open)
       (setq dired-recursive-copies 'always
             dired-recursive-deletes 'always
             dired-listing-switches "-alh"
             async-shell-command-buffer 'new-buffer
             dired-guess-shell-alist-user
             '(("\\.cb.\\'" "okular")
               ("." "xdg-open;"))))
   #+END_SRC

** Eshell
   Put eshell on a convenient binding

   #+BEGIN_SRC elisp
     (global-set-key (kbd "C-x M-m") #'eshell)
   #+END_SRC

   I like the prompt to be on a separate line.

   #+BEGIN_SRC elisp
     (setq eshell-prompt-function
           '(lambda ()
              (concat (eshell/pwd) "\n"
                      (int-to-string eshell-last-command-status) " % "))
           eshell-prompt-regexp "^[[:digit:]]\\{1,3\\} % ")
   #+END_SRC

   These are terminal-manipulating commands

   #+BEGIN_SRC elisp
     (eval-after-load 'em-term
       '(progn
          (dolist (prog '("atop" "systemd-cgls" "journalctl"))
            (add-to-list 'eshell-visual-commands prog))
          (add-to-list 'eshell-visual-options '("ssh" "-t"))))
   #+END_SRC

   Aliases:

   #+BEGIN_SRC sh :tangle ~/.emacs.d/eshell/alias
     alias vim find-file $1
     alias j journalctl -afb $*
     alias sc <<system_ctl>> $*
     alias uc <<user_ctl>> $*
     alias fr free -h
   #+END_SRC

** Rust
   #+BEGIN_SRC elisp
     (use-package rust-mode :ensure)
     (use-package cargo :ensure)
     (use-package lsp-rust
       :ensure
       :config
       (require 'lsp-mode)
       (require 'lsp-flycheck)
       (add-hook 'rust-mode-hook #'lsp-mode))
   #+END_SRC

* Ansible

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S ansible
  #+END_SRC

  #+BEGIN_SRC elisp :tangle ~/.emacs
    (eval-after-load 'use-package
      '(progn
         (use-package yaml-mode)
         (use-package ansible-doc
           :config (add-hook 'yaml-mode-hook #'ansible-doc-mode))))
  #+END_SRC

** Inventory
   :PROPERTIES:
   :header-args+: :tangle ~/.ansible_inventory
   :END:

   Here are the hosts and their variables

   #+BEGIN_SRC conf
     [arch]
     kub ansible_python_interpreter=/usr/bin/python2
     ton ansible_python_interpreter=/usr/bin/python2 ansible_connection=local

     [all:vars]
     user=<<username>>
     home=/home/<<username>>
     h=<<storage>>
     conf="{{h}}/config/{{ansible_hostname}}"
     locale=en_US
     prefix=<<prefix>>
   #+END_SRC

** Config
   :PROPERTIES:
   :header-args+: :tangle ~/.ansible.cfg
   :END:

   Keep the inventory here

   #+BEGIN_SRC conf
     [defaults]
     inventory = ~/.ansible_inventory
   #+END_SRC

   For some reason ControlMaster isn't working

   #+BEGIN_SRC conf
     [ssh_connection]
     ssh_args=-o ControlMaster=no
   #+END_SRC

* Firefox
  :PROPERTIES:
  :header-args+: :tangle ~/.pentadactylrc
  :END:
  This file is in vimrc syntax

  #+BEGIN_SRC elisp :tangle ~/.emacs
    (eval-after-load 'use-package
      '(use-package vimrc-mode))
  #+END_SRC

  Match open buffers:
  #+BEGIN_SRC vimrc
    js <<EOF
    overlay.overlayObject(dactyl, {
	open: function open(urls, params, force) {
	    if (typeof urls === "string") {
		let matches = urls.match(/^(\d+): /);
		if (matches) {
		    tabs.switchTo(urls, true);
		    return;
		}
	    }
	    open.superapply(this, arguments);
	}
    });
    completion.addUrlCompleter("buffer", "Open Tabs", completion.buffer);
    options["complete"].splice(0, 0, "buffer");
    EOF
  #+END_SRC

  Use DuckDuckGo:

  #+BEGIN_SRC vimrc
    silent bmark -keyword ddg -t DDG https://beta.duckduckgo.com/?kp=-1&kn=1&kaj=m&kam=google-maps&kae=c&q=%s
    set defsearch=ddg
  #+END_SRC

  Use backspace to go back:

  #+BEGIN_SRC vimrc
    set! browser.backspace_action=0
  #+END_SRC

  Don't let middle mouse paste:

  #+BEGIN_SRC vimrc
    set! middlemouse.contentLoadURL=false
  #+END_SRC

  Restore C-j for Downloads:

  #+BEGIN_SRC vimrc
    map <C-j> -ex dialog downloads
  #+END_SRC

  Bind stop to an easy binding:

  #+BEGIN_SRC vimrc
    map s <C-c>
  #+END_SRC

  Make scrolling easier:

  #+BEGIN_SRC vimrc
    map <space> <C-d>
    map <S-space> <C-u>
  #+END_SRC

  Pin tab:

  #+BEGIN_SRC vimrc
    map <A-p> -ex pintab!
  #+END_SRC

  Move to first or last:

  #+BEGIN_SRC vimrc
    map <A-!> -ex tabm 1
    map <A-$> -ex tabm $
  #+END_SRC

  Fast switching:

  #+BEGIN_SRC vimrc
    map -m normal,insert <F1> -js tabs.selectAlternateTab()
    map -m insert <C-p> -ex tabprevious
    map -m insert <C-n> -ex tabnext
    map -m normal,insert <C-1> -ex buffer 1
    map -m normal,insert <C-2> -ex buffer 2
    map -m normal,insert <C-3> -ex buffer 3
    map -m normal,insert <C-4> -ex buffer 4
    map -m normal,insert <C-5> -ex buffer 5
    map -m normal,insert <C-6> -ex buffer 6
    map -m normal,insert <C-7> -ex buffer 7
    map -m normal,insert <C-8> -ex buffer 8
    map -m normal,insert <C-9> -ex buffer 9
  #+END_SRC

  Don't raise these openings:

  #+BEGIN_SRC vimrc
    set activate-=diverted,links,tabopen,paste
  #+END_SRC

  Open help in a new tab

  #+BEGIN_SRC vimrc
    set newtab=help
  #+END_SRC

  Keep hint keys under left fingers:

  #+BEGIN_SRC vimrc
    set hintkeys=12345
  #+END_SRC

  Make hint text readable

  #+BEGIN_SRC vimrc
    highlight Hint -append font-size: 14px !important
  #+END_SRC

  Unzoom image:

  #+BEGIN_SRC vimrc
    map <A-t> -js content.document.toggleImageSize()
  #+END_SRC

  Minimize GUI

  #+BEGIN_SRC vimrc
    set guioptions=bsrc
    set showstatuslinks=command
  #+END_SRC

  Scroll by one line:

  #+BEGIN_SRC vimrc
    set scrollsteps=1
  #+END_SRC

  Show feeds first in pageinfo:

  #+BEGIN_SRC vimrc
    set pageinfo=fgmse
  #+END_SRC

  Use visual bell:

  #+BEGIN_SRC vimrc
    set visualbell
  #+END_SRC

  Bookmarks and preferences:

  #+BEGIN_SRC vimrc
    if !getBoolPref("<<username>>.customized")
    set! <<username>>.customized=true
    extadd https://www.eff.org/files/https-everywhere-latest.xpi
    bmark -keyword ac -t config about:config
    bmark -keyword bgp -t BGP http://bgp.he.net/search?search[search]=%s
    bmark -keyword v -t valsi http://vlasisku.lojban.org/?query=%s
    bmark -keyword c -t camxes http://camxes.lojban.org/?text=%s
    bmark -keyword yb -t youtube https://youtube.com/watch?v=%s
    bmark -keyword cw -t 'CrawlWiki' http://crawl.chaosforge.org/index.php?title=Special%3ASearch&search=%s
    bmark -keyword bb -t burnbit http://burnbit.com/burn?file=%s
    bmark -keyword b -t btdigg https://btdigg.org/search?q=%s&order=0&p=0
    bmark -keyword ba -t btdigg https://btdigg.org/search?q=%s&order=2&p=0
    bmark -keyword m -t zing http://mp3.zing.vn/tim-kiem/bai-hat.html?q=%s
    bmark -keyword ma -t artist http://musicbrainz.org/search?advanced=1&type=artist&tport=8000&query=%s
    bmark -keyword mg -t group http://musicbrainz.org/search?advanced=1&type=release_group&tport=8000&query=%s
    bmark -keyword mr -t recording http://musicbrainz.org/search?advanced=1&type=recording&tport=8000&query=%s
    bmark -keyword gm -t gmail https://inbox.google.com/
    set! accessibility.browsewithcaret_shortcut.enabled=false
    set! browser.newtabpage.enabled=false
    set! browser.privatebrowsing.dont_prompt_on_enter=true
    set! browser.sessionstore.restore_pinned_tabs_on_demand=true
    set! browser.shell.checkDefaultBrowser=false
    set! browser.startup.homepage=about:blank
    set! browser.startup.page=3
    set! general.warnOnAboutConfig=false
    set! security.OCSP.enabled=0
    set! security.warn_viewing_mixed=false
    set! layout.spellcheckDefault=0
    set! middlemouse.paste=true
    set! ui.key.menuAccessKey=0
    set! browser.anchor_color="#6c71c4"
    set! browser.display.background_color="#fdf6e3"
    set! browser.display.foreground_color="#657b83"
    set! browser.display.use_document_fonts=0
    set! browser.display.use_system_colors=false
    set! font.default.x-western=Go
    set! font.name.monospace.x-western=Go Mono
    set! extensions.checkCompatibility.nightly=false
    set! extensions.https_everywhere._observatory.alt_roots=true
    set! extensions.https_everywhere._observatory.enabled=true
    set! extensions.https_everywhere._observatory.priv_dns=true
    set! plugins.hide_infobar_for_missing_plugin=true
    set! browser.download.manager.alertOnEXEOpen=false
    set! browser.download.manager.scanWhenDone=false
    set! browser.search.context.loadInBackground=true
    set! intl.charset.default=UTF-8
    set! network.http.pipelining=true
    set! network.http.pipelining.aggressive=true
    set! network.http.pipelining.ssl=true
    set! network.protocol-handler.expose.magnet=false
    set! network.proxy.socks=kub.<<domain>>
    set! network.proxy.socks_port=9050
    set! network.proxy.socks_remote_dns=true
    set! toolkit.telemetry.enabled=true
    js services.permissions.add(services.io.newURI("http:depositfiles.com",null,null), 'image', services.permissions.DENY_ACTION)
    js services.loginManager.setLoginSavingEnabled("accounts.google.com", false)
    fi
  #+END_SRC

  Strip tracker from location, thanks to [[https://userscripts.org/scripts/show/93825][Bruno Barão]] and [[https://github.com/5digits/dactyl/commit/7a1ffa5b555399c5d0925ad599e2640070bd128d][Kris Maglione]].

  #+BEGIN_SRC vimrc
    autocmd DOMLoad (utm|wa)_ -js win.history.replaceState("Remove trackers", '', doc.location.href.replace(/&?(utm|wa)_[^&]+/g,'').replace(/\?$/,''))
  #+END_SRC

  Facebook

  #+BEGIN_SRC vimrc
    bmark -keyword fb -t facebook https://fb.me/%s
    style facebook.com .carouselParent { display: none !important }
    map <A-s> -js dactyl.open("https://www.facebook.com/sharer/sharer.php?u=" + content.location)
  #+END_SRC

  #+BEGIN_SRC vimrc
    set passkeys+=memrise.com:12345678
  #+END_SRC

  Inoreader

  #+BEGIN_SRC vimrc
    map <A-f> -js dactyl.open("https://www.inoreader.com/?add_feed=" + content.location)
    map <A-w> -js dactyl.open("https://www.inoreader.com/bookmarklet/save_web_page/" + encodeURIComponent(content.location))
    autocmd DOMLoad https://www.inoreader.com/bookmarklet/save_web_page/* -javascript if (doc.title != "Inoreader - Done") { doc.querySelector("form").submit() } else { win.close() }
    js services.permissions.add(services.io.newURI("http:inoreader.com",null,null), 'popup', services.permissions.ALLOW_ACTION)
    set passkeys+=inoreader.com:jkgafswhq<left><right>
    style inoreader.com code, pre { background-color: inherit !important }
  #+END_SRC

  Get videos from starred items

  #+BEGIN_SRC sh :tangle ~/bin/videos :tangle-mode 448 :shebang #!/bin/bash
    sudo /bin/pacman -Sy --noconfirm --needed youtube-dl;
    wget -O- \
           'https://www.inoreader.com/reader/api/0/stream/contents/user%2F-%2Fstate%2Fcom.google%2Fstarred?n=1000&r=o' \
         --header 'AppId: 1000001238' --header 'AppKey: <<inoreader_key>>' \
         --header 'Authorization: GoogleLogin auth=<<inoreader_auth>>' \
        | grep -o 'href":"[^"]*' | uniq | sed 's/href":"//' | tr -d '\\' \
        | grep -vE 'reader/api|rapidgator|js|avatar|clicku|identico|png|jpg|gif|muspy' \
        | <<ytdl>> $@ -a- --no-mtime --ignore-errors --youtube-skip-dash-manifest --download-archive ~/Public/Videos/download-archive --geo-bypass
    find ~/Public -type f | grep -vE '(x|epub)$' | sed 's,^.*Public/,,' | shuf > ~/Public/play.m3u8
  #+END_SRC
  #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/sudoers.d/videos :tangle-mode 0
    <<username>> ALL=(root) NOPASSWD: /bin/pacman -Sy --noconfirm --needed youtube-dl
  #+END_SRC

  Site keyboard shortcuts:

  #+BEGIN_SRC vimrc
    set passkeys+=tumblr.com:jk
    set passkeys+=inbox.google.com:'#[/? rjknpou'
    set passkeys+=docs.google.com:<C-v>
    set passkeys+=google.com/contacts/:'#jkoux,.'
  #+END_SRC

  Switch to reader mode:

  #+BEGIN_SRC vimrc
    map <A-r> -js dactyl.open("about:reader?url=" + content.location)
  #+END_SRC

  Search hanzi:
  
  #+BEGIN_SRC vimrc
    map <C-k> -js <<EOS
    if (buffer.selection.rangeCount == 0) {
        string = dactyl.clipboardRead("global");
    } else {
        string = buffer.selection.toString();
    }
    for (var c of string) {
        commands.execute("tabopen " + "http://hvdic.thivien.net/word/" + c)
    }
    EOS
  #+END_SRC

* Windows
** Portables

   #+BEGIN_SRC bat :tangle bin/pe.cmd
     cd /d %~dp0\Tools
     start /b procexp /e /accepteula
   #+END_SRC

   #+BEGIN_SRC bat :tangle bin/pi.cmd
     cd /d %~dp0\picard
     start /b picard
   #+END_SRC

   #+BEGIN_SRC bat :tangle bin/fx.cmd
     cd /d %~dp0\fx
     start /b firefox
   #+END_SRC

   #+BEGIN_SRC bat :tangle bin/tv.cmd
     cd /d %~dp0\teamviewer
     start /b teamviewer
   #+END_SRC

   #+BEGIN_SRC bat :tangle bin/kp.cmd
     cd /d %~dp0\keepass
     start /b keepass
   #+END_SRC

   #+BEGIN_SRC bat :tangle bin/ovpn.cmd
     cd /d %~dp0
     elevate openvpn --config hdhoang.ovpn
   #+END_SRC

* Secrets                                                             :crypt:
-----BEGIN PGP MESSAGE-----

hQEMA0GprIW1olW5AQgAlVp7WY8nyGZcWBdD2k94Aw+YKRhkJvfiRmdE9Iyk4Lpw
JtsX2rEHQFnZ/hRPXs5//1xIlNSyJjwoBIc9vRz964Jmvb8ulOq03NSsPQte0S5v
a5EmpdWKE2ah0TTRXVC+b2jey8uwRORZ2xQBXCO3P7PO1NOxH3xev4Ii6wQsPfMB
AILd4/UGSTDmzU0h6jnqRAbiyB2RzuL8ZObP7jfxK2Ttlg50cgwUlf1JLQwhlnOU
DZA2SrL8BS8zobtsFzVuNyhRHYehMrq1DW8G6cHUSXJweNrREzjDxDWSdD3dKs5z
uQc22eeFLk6fZHLPFvid/qn8RiSqti027G3r+tM//NLtAZKVeJis/XofaG+UpR6C
wmAE/A/ZpglVUCqZu/Dav8H+8BorgVlVfBpSaal+Ubvc8+rUMIcztulAuxdzCOVy
1zGybYJARc++XhEJ65GQ4OLdIqkrChoS4voXYJ7KSeFFqDR3wHkVSg0p+2OpX9fY
24nEYk0eiJItHzY8zSHDQMjlEh+cvkBqkNcGjhMJZJKeKM5Y5QCh1u3hjePQV2CP
PbK5hZqpcRRza1Nx+aMs69V7Zj1YCjV1NcJgPeGgDsMTgNLR+HT4o0wG8YTe9+WP
4DSdxlIrCYDwcJNikC07MqWTK0BIJYKheLPgoJ6+j67qB13A22pEHU/Bl1HECDnH
ldtKqlgUfopHlZRbdyKLqhEyUpvP50pfHtgjv5hAlenorj3cTivg+EmQOKPEwL+B
rzyNrE3lISBVWye2S3Vfq2ogzlB8oOr/fGTdxdA2qpcwp+q6rbaq6CymMFBN8OQw
ppnCw7MaxGK76nu2dlLaFKY+P5yHmv/qFmO86ChiwhGAwSoQv23uhHVHmtuF+fUG
9071MajI3xs7++3paxisZR2W0xIZk4k9UBKM2887uVRWJIBxT2hf/eAdF8WjElMp
qcwKXslUtDvuUhUbD+90fowlm9PtJL+GDOmGeo0uV6YOyHXPcjZo6GxktkAzlOJh
4PnUCuwPp4cp2pe4s2kCAgq32F0JKPxYxgNOL8/TE3WtieI8Bqcb79SzJPuxnh0Y
rT8ubfE8wpTfKjqBqAm77r2UwGEWYrfyrM+W5TfYw/dt+YZYBOBtiFoOr7m+b+kg
hrlGTruC2SyzuyQm/JNLCsEtdd7FCQcFXJF7Gay7PMXfUpYmM9soNIJg8pIX/HjB
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
azekwW3UMKQ4p55mnGFvZXIaC//J
=vywU
-----END PGP MESSAGE-----
