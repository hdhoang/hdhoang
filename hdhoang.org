#+STARTUP: showall
#+PROPERTY: header-args+ :cache yes
#+PROPERTY: header-args+ :comments org
#+PROPERTY: header-args+ :mkdirp yes
#+PROPERTY: header-args+ :noweb yes
#+PROPERTY: header-args+ :results silent
#+PROPERTY: header-args+ :tangle-mode 384
#+PROPERTY: header-args:text+ :eval no
* Hoàng Đức Hiếu
  :PROPERTIES:
  :EXPORT_OPTIONS: toc:nil date:nil arch:nil num:nil author:nil email:t tags:nil
  :END:
#+EMAIL: 1988 / +84-166-241-9526 / cv@hdhoang.space
#+SELECT_TAGS: vi
#+LATEX_CLASS_OPTIONS: [twocolumn]
#+LATEX_HEADER: \usepackage{libertine}
#+LATEX_HEADER: \usepackage{xcolor-solarized, sectsty}
#+LATEX_HEADER: \usepackage[pagecolor={solarized-base3}]{pagecolor}
#+LATEX: \sectionfont{\color{solarized-blue}}
#+LATEX: \subsectionfont{\color{solarized-cyan}}
#+LATEX: \vspace*{-197pt}\includegraphics{Pictures/mug/img078}
#+LATEX_HEADER: \usepackage{titling}
#+LATEX_HEADER: \pretitle{\begin{flushright}\LARGE}
#+LATEX_HEADER: \posttitle{\par\end{flushright}}
#+LATEX_HEADER: \preauthor{\begin{flushright}}
#+LATEX_HEADER: \postauthor{\end{flushright}}
#+LATEX_HEADER: \pagenumbering{gobble}
* Education                                                              :en:
   - 2016 - 2018 :: Outsource system administrator at Luvina Software
                    JSC
   - 2014 - 2017 :: Studying System Administration and software
                    testing at Bachkhoa-Aptech
   - 2013 - 2014 :: Finished K12 and completed accounting course at
                    Quang Trung private school
   - 2007 - 2012 :: Self-learned various topics
     - Programming languages (Python, shells, HTML5, Emacs Lisp, Rust)
     - History of free software
     - Hanoi GNU/Linux user community
     - Wing-chun martial art
     - The constructed logical language Lojban
   - 2006 - 2007 :: Freshman in computer programming at Monash
                    College, Australia (earned Distinction and High
                    Distinction in most subjects)
   - 2003 - 2006 :: Chu Van An Highschool, majoring in English
#+LATEX: \newpage
* Tiểu sử                                                                :vi:
   - 2016 - 2018 :: Quản trị hệ thống từ xa tại CTCP Luvina
   - 2014 - 2017 :: học quản trị mạng và kiểm thử phần mềm tại
                   Bachkhoa-APTECH (dự kiến tốt nghiệp năm 2016)
#+LATEX: \newpage
** Qualifications and skills                                             :en:
*** IT skills
   - In-depth GNU/Linux usage and administration, experienced in
     self-hosting web sites (ownCloud on Debian Apache, ArchLinux nginx)
   - Comprehensive network understanding (routing, firewall, encryption)
   - Using version control systems, especially git
   - Contributing to free software projects ([[https://www.openhub.net/accounts/hdhoang/positions][hdhoang on OpenHub]])
   - Office equipment troubleshooting
*** Language skills
   - Fluency in English (990 in TOEIC, 2015)
   - Elementary Japanese (N3, 2016)
*** Others
   - Self-teaching discipline
   - Strong interest in learning new topics
** Kĩ năng                                                               :vi:
*** Kĩ năng IT
     - Sử dụng và quản trị các hệ thống GNU/Linux chuyên sâu, tự quản
       trị dịch vụ web (owncloud, Debian Apache, ArchLinux nginx)
     - Hiểu biết rõ hệ thống mạng (định tuyến, tường lửa)
     - Sử dụng hệ thống quản lí phiên bản, đặc biệt là git
     - Đóng góp vào các dự án phần mềm tự do ([[https://www.openhub.net/accounts/hdhoang][hdhoang trên OpenHub]])
     - Xử lý vấn đề các thiết bị văn phòng
*** Kĩ năng ngôn ngữ
     - Tiếng Anh thuần thục (TOEIC 990, 2015)
     - Tiếng Nhật cơ bản (tương đương N4)
** Interests                                                             :en:
   - Exploring science, history, and natural subjects
   - Science-fiction novels, rational fanfictions
   - Electric guitar riffs
   - Frequent blood donor until no longer eligible
** Sở thích                                                              :vi:
    - Khám phá các chủ đề khoa học, lịch sử, tự nhiên
    - Tiểu thuyết khoa học viễn tưởng, ???
    - Nghe solo guitar điện
    - Thường xuyên hiến máu cho đến khi hết khả năng

* Places and names
  #+NAME: username
  #+BEGIN_SRC text
    hdhoang
  #+END_SRC

  #+NAME: domain
  #+BEGIN_SRC text
    <<username>>.space
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
    (setq user-mail-address "i@<<domain>>")
  #+END_SRC

  #+NAME: storage
  #+BEGIN_SRC text
    /home/<<username>>/Sync
  #+END_SRC

  #+NAME: videos
  #+BEGIN_SRC text
    /home/<<username>>/Public/Videos
  #+END_SRC

  #+NAME: prefix
  #+BEGIN_SRC text
    10.117.14.
  #+END_SRC

  #+NAME: prefix6
  #+BEGIN_SRC text
    2001:470:36:62a::
  #+END_SRC

  #+NAME: system_ctl
  #+BEGIN_SRC text
    systemctl --system --no-pager
  #+END_SRC

  #+NAME: user_ctl
  #+BEGIN_SRC text
    systemctl --user --no-pager
  #+END_SRC

  #+NAME: pacman
  #+BEGIN_SRC text
    pacaur --noconfirm --needed
  #+END_SRC

  #+NAME: ytdl
  #+BEGIN_SRC text
    youtube-dl --format "[height <=? 480]" --output <<videos>>/"%(uploader)s %(upload_date)s %(title)s@%(id)s.%(ext)s"
  #+END_SRC

* Blog
  :PROPERTIES:
  :EXPORT_OPTIONS: toc:nil num:nil
  :END:

  #+BEGIN_SRC css :tangle ~/Public/blog.css
    body {
        background: #fdf6e3; color: #657b83;
        margin: 0 25%;
        line-height: 1.5;
    }
    pre {
        padding: 1em;
        border: dotted 1px #657b83;
        border-right: none;
    }
    .src-rust::before,
    .src-python::before {
        content: attr(class);
        display: block;
        float: right;
    }
  #+END_SRC

** hdhoang
   :PROPERTIES:
   :EXPORT_FILE_NAME: ~/Public/index
   :END:
   Elsewhere on the net:
   - realtime ::
     + [[https://telegram.me/hdhoang][Telegram]]
     + [[skype:lazni0?chat][Skype]]
     + [[https://fb.me/hdh000][Facebook]]
   - feeds ::
     + [[http://www.inoreader.com/stream/user/1005933915/tag/user-favorites][Inoreader]]
     + [[https://gitlab.com/u/hdhoang][GitLab]]
     + [[https://github.com/hdhoang?tab%3Dactivity][GitHub]]
     + [[http://www.last.fm/user/hdhoang][Last.fm]]
     + [[https://twitter.com/lasigmaz][Twitter]]
     + [[https://steamcommunity.com/id/lasigmaz][Steam]]
     + [[https://www.openhub.net/accounts/hdhoang][OpenHub]]
     + [[https://www.linkedin.com/in/hdhoang][LinkedIn]]

   I have a maybe-blog:
   - [[file:vanity-irc.org][Showing a custom hostname to Freenode]]
   - [[file:borrow-die.org][Borrow checker analogy]]
   - [[file:luser.org][Writing an IRC bot]]
   - [[file:graph.org][Making a reading list]]

** Consumption
*** <2016-01-18 Mon> Rạng Đông A55N2/5W (42,200đ)

** Bookmark graph
   :PROPERTIES:
   :EXPORT_FILE_NAME: graph
   :END:
   Say, I follow a link from someone to something. I would like to put
   that relationship into a digraph to be explored later. Nodes are
   people and things (articles, videos, comics). People have handles
   (unix username, twitter username, IRC handle, facebook ID, etc),
   URLs. Things have title (file name, etc), URL/btih, authored date,
   syndication feed.

   An edge can be:

   - Person authors thing
   - Person mentions thing as text
     With commentary or opinion
   - Thing mentions thing as text
     This would be the hyperlink text

   The graph is serialized and saved in this repo. It can be exported
   into OPML.

** Borrow-checking with friends
   :PROPERTIES:
   :EXPORT_FILE_NAME: ~/Public/borrow-die
   :END:

   #+BEGIN_SRC rust :tangle ~/Public/die.rs
     #[derive(Debug)]
     enum D3 { One, Two, Three }
     impl D3 {
         fn peek(self: &D3, name: &str) {
             println!("{} sees that it's {:?}.", name, self);
         }
     }
   #+END_SRC

   Our main character, named Max, has a d3.

   #+BEGIN_SRC rust :tangle ~/Public/die.rs
     fn main() {
         print!("Hi, I'm Max. ");
         let mut die = D3::Two;
         die.peek("Max");
   #+END_SRC

   Max can rolls his die:

   #+BEGIN_SRC rust :tangle ~/Public/die.rs
         die = D3::One;
         die.peek("Max");
   #+END_SRC

   Max invites Alice and Bob over for a game of dice. The die is on the table and everyone can see what it's showing.

   #+BEGIN_SRC rust :tangle ~/Public/die.rs
         'table: loop {
             let bob = &die;
             bob.peek("Bob");
             die.peek("Everyone"); // same thing
             break 'table; // that's enough peeking for now
         }
    #+END_SRC

    It's Alice's turn, she picks up the die and rolls.

    #+BEGIN_SRC rust :tangle ~/Public/die.rs
         'alices_turn: loop {
             let alice = &mut die;
             *alice = D3::Three;
             alice.peek("Alice");
             break 'alices_turn;
         }
    #+END_SRC

    It lands on the table and now everyone sees what Alice rolled.

    #+BEGIN_SRC rust :tangle ~/Public/die.rs
         die.peek("Max");
     }
   #+END_SRC

   [[file:borrow-die.rs][Full code.]]
** Vanity plate on IRC
   :PROPERTIES:
   :EXPORT_FILE_NAME: ~/Public/vanity-irc
   :END:
*** Ingredients:
    - An IPv6 block whose PTR you can delegate (I use Hurricane Electric's [[https://tunnelbroker.net][tunnelbroker service]])
    - A hostname whose AAAA you can change (I'm using a full domain, hosted on [[https://cloudflare.com][CloudFlare]], but it should works [[https://freedns.afraid.org][with subdomains]])
    - I'm using a Debian machine to connect to Freenode
*** Recipes:
    1. Request an IPv6 tunnel with HE
    2. Delegate its rDNS to [[https://dns.he.net][dns.he.net]]
    3. Match forward and reverse DNS between an address and your hostname:

       #+BEGIN_SRC sh :results replace
         bash -c 'diff <(nslookup test-plate.hdhoang.space.) <(nslookup 2001:470:36:62a::cccc)'
       #+END_SRC

       #+RESULTS[b43b6d2d898df8156aa60d0405a8b2f68660f12d]:

       - Choose an address, point it to your hostname
       - Add the address to the hostname's AAAA records
    6. Connect to Freenode with that address as the source, for example:

       #+BEGIN_SRC sh
         for fn in $(dig +short -t aaaa chat.freenode.net); do
             ip -6 route add $fn src $address dev $tunnel_interface;
         done;

       #+END_SRC
       or

       #+BEGIN_SRC sh
         ip -6 route replace default src $address dev $tunnel_interface
       #+END_SRC

** IRC bot
   :PROPERTIES:
   :EXPORT_FILE_NAME: ~/Public/luser
   :END:
   [[irc:chat.freenode.net/#vnluser][#vnluser]] used to have a bot to grab link titles and search google.
   It didn't work very well with Vietnamese characters, so it was
   retired. Here's a replacement in rust and python. Its name is

   #+NAME: botname
   #+BEGIN_SRC text
     luser
   #+END_SRC

   There are several things it could improve on:
    - [X] Handle gzip responses (news.zing.vn and baomoi.com): These
      sites always return gzip-encoded HTML, even when Accept-Encoding
      doesn't list it. You can check by comparing =curl= vs =curl
      --compressed=.
    - [ ] Configurable multiple channels support, possibly as
      commandline arguments, should also set owners.
    - [ ] Reading secrets from files: API keys, identify passwords,
      channel passwords.
    - [ ] Tests: It would be difficult to interface with IRC servers,
      but at least the handling functions should be tested.
    - [ ] CLI interface: Like chatbot's, this will speed up testing.
    - [X] NYtimes access: The cookie needs to be periodically rebaked.
      Theoretically cloaking as googlebot should work.
    - [ ] Pod titles in rust: Quick-xml doesn't return the attributes
      iterator currently.
    - [ ] Reconnection on ping timeout: [[https://github.com/aatxe/irc/blob/46f9136c93063e8abb01b063df53897615007791/src/client/server/mod.rs#L208][IrcServer should already
      reconnect automatically]], but possibly ipv6 tunneling is
      interfering.

   Compilation to ARMv7 is a bit tricky:

    1. Set up [[https://github.com/japaric/rust-cross][cross-compilation toolchain]]
    2. Copy the target's =/usr/include/openssl=, =lib{crypto,ssl,z}.so= to $PWD
    3. Run cargo with:
       #+BEGIN_SRC sh
         TARGET_CFLAGS="-I $PWD" cargo rustc --release --target armv7-unknown-linux-gnueabihf -- -C linker=arm-linux-gnueabihf-gcc -lz -L $PWD
       #+END_SRC
    4. Copy =target/armv7-unknown-linux-gnueabihf/release/luser= to the target

   You can run tests for the python version:

   #+NAME: doctest_luser
   #+BEGIN_SRC sh
     python -m doctest ~/Public/<<botname>>.py
   #+END_SRC

   Now on to the code. Unfortunately, tangling from this Org source
   loses indentations, so the python code can't be commented on line
   by line. Here are the API keys and rust build setup:

   #+NAME: wolframalpha_key
   #+BEGIN_SRC text
     3JEW42-4XXE264A93
   #+END_SRC

   #+NAME: yandex_key
   #+BEGIN_SRC text
     trnsl.1.1.20160210T093900Z.c6eacf09bbb65cfb.cc28de2ba798bc3bc118e9f8201b6e6cea697810
   #+END_SRC

   #+NAME: google_key
   #+BEGIN_SRC text
     AIzaSyDuesDCP1pqw6Ev_3zEAG4xuIKYp675oDw
   #+END_SRC

   #+NAME: google_cx
   #+BEGIN_SRC text
     002790383760335821747:hufomuuaviw
   #+END_SRC

   #+BEGIN_SRC conf :tangle ~/Public/luser.toml
     [package]
     name = "<<botname>>"
     version = "0.1.0"
     authors = ["Hoàng Đức Hiếu <<username>>@<<domain>>"]

     [dependencies]
     irc = "*"
     scraper = "*"
     hyper = "*"
     regex = "*"
     quick-xml = "*"
     rustc-serialize = "*"
     url = "*"
   #+END_SRC

   Importing dependencies. Python really comes with batteries.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     extern crate regex;
     extern crate irc;
     extern crate scraper;
     extern crate hyper;
     extern crate quick_xml;
     extern crate rustc_serialize;
     extern crate url;

     use regex::Regex;
     use irc::client::prelude::{IrcServer, Server, ServerExt, Config, Command, Response};
     use hyper::client::Client;
     use std::io::Read;
     use std::collections::HashMap;
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py :shebang #!/usr/bin/env python3
     # -*- coding: utf-8 -*-
     # external batteries
     from bs4 import BeautifulSoup
     from irc import bot

     from collections import defaultdict
     from random import randint
     from gzip import GzipFile
     import xml.etree.ElementTree as ET
     import json
     import sys
     import os

     if sys.version_info.major == 3:
         from urllib.request import urlopen, build_opener, HTTPCookieProcessor
         from urllib.parse import quote
         from http.client import HTTPConnection
     else:
         from urllib2 import urlopen, quote, build_opener, HTTPCookieProcessor
         from httplib import HTTPConnection
         from StringIO import StringIO
         reload(sys)
         sys.setdefaultencoding('utf8')
   #+END_SRC

   Set up logging.

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     import logging
     import logging.handlers
     logger = logging.getLogger(__file__)

     def setup_logging(filename, path=None, verbose=False):
         if not path:
             path = os.path.dirname(os.path.realpath(__file__))
         file_log = logging.handlers.TimedRotatingFileHandler(
             os.path.join(path, filename),
             when="midnight",
             backupCount=31)
         file_log.setLevel(logging.DEBUG if verbose else logging.INFO)
         file_log.setFormatter(logging.Formatter(
             '%(asctime)-15s (%(name)s) %(message)s'))
         logger.addHandler(file_log)
   #+END_SRC

   Set up connection details. People should claim their names here.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     const NAME: &'static str = "<<botname>>";
     fn main() {
         let freenode = IrcServer::from_config(Config {
                            owners: Some(vec![env!("USER").into()]),
                            nickname: Some(NAME.into()),
                            alt_nicks: Some((0..10).map(|n| format!("{}-{}", NAME, n)).collect()),
                            server: Some("chat.freenode.net".into()),
                            port: Some(8000),
                            channels: Some(vec![format!("#vn{}", NAME), format!("#{}-test", NAME)]),
                            ..Default::default()
                        })
                            .unwrap();
         freenode.identify().unwrap();
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     NAME = "<<botname>>"
     <<botname>> = bot.SingleServerIRCBot([("chat.freenode.net", 8000)], NAME, NAME)

     def main():
         setup_logging("<<botname>>.log")
         <<botname>>.start()

     def change_nick(c, e):
         new_nick = '{}-{}'.format(NAME, str(randint(0, 9)))
         print("Changing nick to", new_nick)
         c.nick(new_nick)
     <<botname>>.on_nicknameinuse = change_nick

     <<botname>>.on_nickcollision = lambda c, _: c.reconnect()

     def join_channels(c, e):
         c.join("#{}-test".format(NAME))
         c.join("#vn" + NAME)
     <<botname>>.on_welcome = join_channels
   #+END_SRC

   Handling scaffolding

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
         let get_title = &get_title;
         let wolframalpha = &wolframalpha;
         let google = &google;
         let translate = &translate;
         let handlers = [Handler(Regex::new(TITLE_REGEX).unwrap(), get_title),
                         Handler(Regex::new(WA_REGEX).unwrap(), wolframalpha),
                         Handler(Regex::new(GOOGLE_REGEX).unwrap(), google),
                         Handler(Regex::new(TRANSLATE_REGEX).unwrap(), translate)];

   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def handling(c, e):
         return <<botname>>s[len(e.source) % len(<<botname>>s)] == c.get_nickname()

     def handle(c, e, msg):
         try:
             titles = title(msg)
             if titles and handling(c, e):
                 c.privmsg(e.target, titles)
             if msg[0] not in ('.', '!', ':'): return
             if msg[1:6] == 'tell ':
                 source = e.source.nick
                 (target, _, line) = msg[6:].partition(' ')
                 return relay_msg[target.lower()].append((source, line))
             reply = ''
             if msg[1:3] == 'g ':
                 reply = google(msg[3:])
             if msg[1:4] == 'wa ':
                 reply = wolframalpha(msg[4:])
             if msg[1:4] == 'tr ':
                 (lang, _, text) = msg[4:].partition(' ')
                 reply = translate(lang, text)
             if reply:
                 # Keep PRIVMSG under 512bytes
                 c.privmsg(e.target, reply[:512 - len(e.target) - 50])
         except Exception as e:
             logger.error('"%s" causes: %s' % (msg, str(e)))
   #+END_SRC

   List other lusers, and update that list when one joins or quits.
   This list is used by the lusers to decide whether to handle
   unaddressed messages. If the length of the IRC prefix
   'nick!user@host' for a message indexes to its name, that luser
   responses.

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     <<botname>>s = []
     def list_<<botname>>s(c, e):
         for <<botname>> in filter(lambda n: n.startswith(NAME),
                                   e.arguments[-1].split(' ')):
             if <<botname>> not in <<botname>>s:
                 <<botname>>s.append(<<botname>>)
         <<botname>>s.sort()
     <<botname>>.on_namreply = list_<<botname>>s
   #+END_SRC

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
         let mut last_lines = HashMap::new();
         let mut <<botname>>s = vec![];
         'messages: for message in freenode.iter() {
             let msg = message.unwrap();
             if let Command::Response(Response::RPL_NAMREPLY, _, Some(ref names)) = msg.command {
                 <<botname>>s.extend(names.split(' ')
                                    .filter(|n| n.starts_with(NAME))
                                    .map(String::from));
                 <<botname>>s.sort();
                 <<botname>>s.dedup();
                 if !<<botname>>s.contains(&freenode.current_nickname().into()) {
                     let _ = freenode.reconnect();
                 }
                 continue 'messages;
             }
             if let Some(nick) = msg.source_nickname() {
   #+END_SRC

   Ignore bots and freenode

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
                 if nick.contains("bot") || nick.contains("freenode") {
                     continue 'messages;
                 }
   #+END_SRC

   Update <<botname>>s list

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
                 if nick.starts_with(NAME) {
                     let nick = String::from(nick);
                     match msg.command {
   #+END_SRC

   Do not merge the following arms. Otherwise a join #c1 -> insert ->
   join #c2 -> remove sequence might happen.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
                         Command::JOIN(..) => {
                             if let Err(idx) = <<botname>>s.binary_search(&nick) {
                                 <<botname>>s.insert(idx, nick)
                             }
                         }

   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     relay_msg = defaultdict(list) # dict<nick.lower(), [(source, line)]>
     def relay(c, target, nick):
         for (source, line) in relay_msg[nick.lower()]:
             c.privmsg(target, "{}: <{}> {}".format(nick, source, line))
         del relay_msg[nick.lower()]
     <<botname>>.on_nick = lambda c, e: relay(c, "#vn<<botname>>", e.target)
   #+END_SRC

   The next lambdas are abusing python logical operator, but they read
   like English.

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def <<botname>>_joins(e):
         if e.source.nick not in <<botname>>s:
             <<botname>>s.append(e.source.nick)
             <<botname>>s.sort()

     def on_join(c, e):
         nick = e.source.nick
         if nick.startswith(NAME):
             return <<botname>>_joins(e)
         relay(c, e.target, nick)
     <<botname>>.on_join = on_join
   #+END_SRC

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
                         Command::QUIT(..) => {
                             if let Ok(idx) = <<botname>>s.binary_search(&nick) {
                                 <<botname>>s.remove(idx);
                             }
                         }
                         _ => (),
                     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     <<botname>>.on_quit = lambda c, e: e.source.startswith(NAME) and <<botname>>s.remove(e.source.nick)
   #+END_SRC

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
                     continue 'messages;
                 }
             }
   #+END_SRC

   Actual message processing. Ignore the other lusers.

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     last_lines = defaultdict(list) # dict<nick, line>
     def on_pubmsg(c, e):
         nick = e.source.nick
         if nick.startswith(NAME): return
         my_nick = c.get_nickname()
         msg = e.arguments[0]
         if msg == "report!":
             return c.privmsg(e.target, report())
         if msg.startswith('s/'):
             parts = msg.split('/')
             if (len(parts) >= 3 and handling(c, e)
                 and parts[1] in last_lines[nick]):
                 return c.privmsg(e.target, "{} meant: {}".format(
                     nick, last_lines[nick].replace(parts[1], parts[2])))
         else:
             last_lines[nick] = msg
         addressed = msg.startswith(my_nick)
         if addressed or handling(c, e) or 'http' in msg:
             if addressed:
                 msg = msg[len(my_nick) + 2:]  # remove addressing
                 if msg.startswith('quit'): sys.exit()
                 if msg.startswith('reload'):
                     os.execl(sys.executable, sys.executable, __file__)
             handle(c, e, msg)
     <<botname>>.on_pubmsg = on_pubmsg
   #+END_SRC

   =trimmed_line= is here to hoist the trimmed line out of its
   assignment block. Rust: the compiler knows better than you do.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
             let channel;
             let trimmed_line;
             let mut line;

             if let Command::PRIVMSG(ref target, ref message) = msg.command {
                 channel = target;
                 line = message
             } else {
                 continue 'messages;
             }

             if line == "report!" {
                 freenode.send(Command::PRIVMSG(channel.clone(),
                                                format!("operated by {} with source code {}",
                                                        freenode.config()
                                                                .owners
                                                                .as_ref()
                                                                .map(|v| v.join(", "))
                                                                .unwrap_or("someone anonymous"
                                                                               .into()),
                                                        post_source_code())))
                         .unwrap();
                 continue 'messages;
             }
             if line.starts_with("s/") {
                 let parts = line.split('/').collect::<Vec<_>>();
                 if parts.len() < 3 {
                     continue 'messages;
                 }
                 if let Some(old_line) = last_lines.get(&msg.source_nickname().map(String::from)) {
                     if <<botname>>s[msg.prefix.clone().unwrap().len() % <<botname>>s.len()] ==
                        freenode.current_nickname() {
                         freenode.send(Command::PRIVMSG(channel.clone(),
                                                        format!("{} meant to say \"{}\"",
                                                                msg.source_nickname().unwrap(),
                                                                (old_line as &str)
                                                                    .replace(parts[1], parts[2]))))
                                 .unwrap();
                     }
                 }
             } else {
                 last_lines.insert(msg.source_nickname().map(String::from), line.clone());
             }

             let addressed = line.starts_with(freenode.current_nickname());
             if addressed ||
                <<botname>>s[msg.prefix.unwrap().len() % <<botname>>s.len()] == freenode.current_nickname() {
                 if addressed {
                     trimmed_line = line[freenode.current_nickname().len() + 2..].into();
                     line = &trimmed_line;
                 }
                 'handling: for h in &handlers {
                     if h.can_handle(line) {
                         match h.run(line) {
                             Err(e) => println!("{:?} causes {:?}", line, e),
                             Ok(reply) => {
                                 if !reply.is_empty() {
                                     freenode.send(Command::PRIVMSG(channel.clone(), reply)).unwrap();
                                     continue 'messages;
                                 }
                             }
                         }
                     }
                 }
             }
         }
     }
   #+END_SRC

   Rust handler scaffolding: casting into a common =Error= type and
   associating regexes with their handling function. Rust is
   surprisingly more object-happy than python.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     #[derive(Debug)]
     enum Error {
         Data(String),
         Io(std::io::Error),
         Hyper(hyper::error::Error),
         Xml(quick_xml::error::Error),
         Json(rustc_serialize::json::ParserError),
     }

     struct Handler<'a>(Regex, &'a (Fn(&Regex, &str) -> Result<String, Error>));
     impl<'a> Handler<'a> {
         fn can_handle(&self, line: &str) -> bool {
             self.0.is_match(&line)
         }
         fn run(&self, line: &str) -> Result<String, Error> {
             self.1(&self.0, &line)
         }
     }
   #+END_SRC

   Get title from URLs. The rust version only grabs the first URL in
   each message. Some domains with uninteresting titles are ignored:

   #+NAME: uninteresting
   #+BEGIN_SRC text
     "smbc-comics.com/", "libgen.io/", "xkcdb.com/"
   #+END_SRC

   #+NAME: uninteresting_titles
   #+BEGIN_SRC text
     "XKCDB: The: The #xkcd Quote Database", "Saturday Morning Breakfast Cereal", "Library Genesis"
   #+END_SRC

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     const TITLE_REGEX: &'static str = r"https?:[^\s]+";
     fn get_title(regex: &Regex, line: &str) -> Result<String, Error> {
         use hyper::header::{UserAgent, Cookie, CookiePair};
         use scraper::{Html, Selector};

         let url = regex.captures(&line).unwrap().expand("$0");
         if [<<uninteresting>>].iter().any(|domain| url.contains(domain)) {
             return Ok(String::new());
         }
         let mut response = try!(Client::new()
                                 .get(&url)
                                 .header(UserAgent("Firefox".into()))
                                 .header(Cookie(vec![CookiePair::new(// cookie to access NYtimes articles
                                     "NYT-S".into(),
                                     "0MOTYRtE4oUSHDXrmvxADeHEluv5kUWdpUdeFz9\
                                      JchiAKuaKkdl/6loIV.Ynx4rkFI"
                                         .into())]))
                                 .send()
                                 .map_err(Error::Hyper));
         let mut body = [0; 50_000];
         response.read_exact(&mut body).ok();
         if let Some(title_elem) = Html::parse_fragment(&String::from_utf8_lossy(&body))
                                       .select(&Selector::parse("title").unwrap())
                                       .next() {
             Ok(title_elem.first_child()
                          .unwrap()
                          .value()
                          .as_text()
                          .unwrap()
                          .replace("\n", " ")
                          .trim()
                          .into())
         } else {
             Err(Error::Data("Response has no title".into()))
         }
     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def title(text):
         """
         Retrieve titles from URL in text.

         >>> len(title('no url here'))
         0

         TODO This case should ignore the 404.
         >>> print(title('https://hdhoang.space/404 https://hdhoang.space/')) # doctest: +IGNORE_EXCEPTION_DETAIL
         Traceback (most recent call last):
           ...
         urllib.error.HTTPError: HTTP Error 404: Not Found

         >>> print(title('https://hdhoang.space/luser.html https://hdhoang.space/luser.html'))
         IRC bot / IRC bot

         >>> print(title('http://www.nytimes.com/2016/01/26/business/marvin-minsky-pioneer-in-artificial-intelligence-dies-at-88.html'))
         Marvin Minsky, Pioneer in Artificial Intelligence, Dies at 88 - The New York Times

         >>> print(title('http://www.baomoi.com/bao-nhieu-tan-bot-trung-quoc-da-duoc-nhap-ve-lam-tra-o-long-tea-plus/c/18486151.epi'))
         Bao nhiêu tấn bột Trung Quốc đã được nhập về làm trà Ô long TEA Plus? - GĐ&XH;

         >>> print(title('http://news.zing.vn/chi-tiet-ban-do-cam-duong-dip-29-o-ha-noi-post574142.html'))
         Chi tiết bản đồ cấm đường dịp 2/9 ở Hà Nội - Thời sự - Zing.vn

         >>> print(title('https://www.facebook.com/photo.php?fbid=261863914155282&set=a.261860180822322.1073742015.100009950253866&type=3&theater')) # doctest: +ELLIPSIS
         Vo Thanh Thuy - Vo Thanh Thuy ... | Facebook

         >>> print(title('https://imgur.com/M18GYfw?r https://imgur.com/GUFyoUa?r'))
         Glorious new key cap set for my work keyboard! - Imgur
         """
         uninteresting = [<<uninteresting_titles>>]
         titles = []
         urls = filter(lambda w: w.startswith('http'), text.split())
         for u in urls:
             request = build_opener(HTTPCookieProcessor())
             request.addheaders = [('Accept-Encoding', 'gzip'), ('User-Agent', 'Mozilla/5.0')]
             response = request.open(u)
             if response.info().get('Content-Encoding') == 'gzip':
                 if sys.version_info.major == 3:
                     response = GzipFile(fileobj=response)
                 else:
                     response = GzipFile(fileobj=StringIO(response.read()))
             title = BeautifulSoup(response.read(50000), 'html.parser').title
             response.close()
             if (title
                 and 'Imgur:' not in title.string
                 and title.string not in uninteresting):
                 titles.append(title.string.replace('\n', '').strip())
         return ' / '.join(titles)
   #+END_SRC

   Ask Wolfram|Alpha, the knowledge engine.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     const WA_REGEX: &'static str = concat!(r"^(\.|!|:)", "wa (?P<query>.+)");
     fn wolframalpha(regex: &Regex, line: &str) -> Result<String, Error> {
         use hyper::header::ContentLength;
         use quick_xml::{XmlReader, Event};

         let mut response = try!(Client::new()
                                     .get(&regex.captures(&line)
                                                .unwrap()
                                                .expand("http://api.wolframalpha.\
                                                         com/v2/query?format=plaintext&appid=\
                                                         <<wolframalpha_key>>&input=$query"))
                                     .send()
                                     .map_err(Error::Hyper));
         let mut xml =
             String::with_capacity(**response.headers.get::<ContentLength>().unwrap() as usize);
         try!(response.read_to_string(&mut xml).map_err(Error::Io));
         let tree = XmlReader::from_str(&xml).trim_text(true);
         let mut answers = vec![];
         for event in tree {
             match event {
                 Ok(Event::Start(ref elem)) if elem.name() == b"pod" => {
                     answers.push(String::from_utf8(try!(elem.attributes()
                                                             .next()
                                                             .unwrap()
                                                             .map_err(Error::Xml))
                                                        .1
                                                        .into())
                                      .unwrap() + ": ")
                 }
                 Ok(Event::Text(elem)) =>{
                     answers.push(try!(elem.into_string().map_err(Error::Xml)) + " /")
                 }
                 _ => (),
             }
         }
         Ok(answers.join(" "))
     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def wolframalpha(text):
         """
         Query WolframAlpha about text.

         >>> print(wolframalpha('mass of sol'))
         Input interpretation: Sun | mass / Result: 1.988435×10^30 kg  (kilograms) / Unit conversions: 4.383749×10^30 lb  (pounds) / 2.191874×10^27 sh tn  (short tons) / 1.988435×10^33 grams / 1 M_☉  (solar ma http://wolframalpha.com/?input=mass%20of%20sol

         Check URL encoding:
         >>> print(wolframalpha('4+6'))
         Input: 4+6 / Result: 10 / Number name: ten / Number line: Manipulatives illustration:  | + |  |  |  4 |  | 6 |  | 10 / Typical human computation times: age 6:  5.3 seconds  |  age 8:  2.6 seconds  |  age 10:  1.7 seconds  |   age 18:  0.93 seconds (ignoring concentration, repetition, variations in education, etc.) / 

         >>> print(wolframalpha('é'))
         Input interpretation: é  (character) / Visual form: Name: Latin small letter e with acute / Positions in alphabets: Czech | 9th letter (33rd letter from the end) Slovak | 12th letter (35th letter from http://wolframalpha.com/?input=%C3%A9
         """
         r = urlopen(
             'http://api.wolframalpha.com/v2/query?format=plaintext&appid=<<wolframalpha_key>>&input='
             + quote(text))
         tree = ET.parse(r)
         reply = ''
         for n in tree.iter():
             if n.tag == 'pod':
                 reply += n.attrib['title'] + ': '
             if n.tag == 'plaintext' and n.text and len(n.text.strip()):
                 reply += n.text + ' / '
         if len(reply) > 512:
             reply = reply[:200] + " http://wolframalpha.com/?input=" + quote(text)
         r.close()
         return reply.replace('\n', ' ')
   #+END_SRC

   Returns the first Google result.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     const GOOGLE_REGEX: &'static str = concat!(r"^(\.|!|:)", "g (?P<query>.+)");
     fn google(regex: &Regex, line: &str) -> Result<String, Error> {
         use rustc_serialize::json::Json;
         // API: https://developers.google.com/web-search/docs/#code-snippets
         let mut response = try!(Client::new()
                                     .get(&regex.captures(&line)
                                                .unwrap()
                                                .expand("https://ajax.googleapis.\
                                                         com/ajax/services/search/web?v=1.\
                                                         0&rsz=1&q=$query"))
                                     .send()
                                     .map_err(Error::Hyper));
         let json = try!(Json::from_reader(&mut response).map_err(Error::Json));
         let results = try!(json.search("results").ok_or(Error::Data("No results".into())));
         if results.as_array().unwrap().is_empty() {
             return Ok("No results".into());
         }
         let url = try!(results[0]
                            .find("unescapedUrl")
                            .ok_or(Error::Data("No url".into()))
                            .map(|j| j.as_string().unwrap()));
         let title = try!(results[0]
                              .find("titleNoFormatting")
                              .ok_or(Error::Data("No title".into()))
                              .map(|j| j.as_string().unwrap()));
         Ok(format!("{} {}", title, url))
     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def google(text):
         """
         Retrieve the first result from a google for text.

         >>> print(google('á'))
         Á - Wikipedia, the free encyclopedia https://en.wikipedia.org/wiki/%C3%81

         >>> print(google('trump south-china sea'))
         Donald Trump weighs in on China's island-building in the South ... http://www.politifact.com/truth-o-meter/statements/2016/apr/04/donald-trump/donald-trump-weighs-chinas-island-building-south-c/

         >>> print(google('naesuth no result here'))
         0 result
         """
         r = urlopen(
             'https://www.googleapis.com/customsearch/v1?key=<<google_key>>&cx=<<google_cx>>&q=' +
             quote(text))
         data = json.loads(r.read().decode())
         r.close()
         if 'items' not in data:
             return '0 result'
         return data['items'][0]['title'] + \
         ' ' +  data['items'][0]['link']
   #+END_SRC

   Translates using [[https://tech.yandex.com/translate/doc/dg/reference/translate-docpage/][Yandex]]:

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     const TRANSLATE_REGEX: &'static str = concat!(r"^(\.|!|:)", "tr (?P<lang>[^ ]+) (?P<text>.+)");
     fn translate(regex: &Regex, line: &str) -> Result<String, Error> {
         use rustc_serialize::json::Json;
         let mut response = try!(Client::new()
                                     .get(&regex.captures(&line)
                                                .unwrap()
                                                .expand("https://translate.yandex.\
                                                                  net/api/v1.5/tr.\
                                                                  json/translate?key=<<yandex_key>>&text=$text&\
                                                                  lang=$lang"))
                                     .send()
                                     .map_err(Error::Hyper));
         let json = try!(Json::from_reader(&mut response).map_err(Error::Json));
         let reply = match json.find("code").unwrap().as_u64().unwrap() {
             200 => {
                 format!("{}: {}",
                         json.find("lang").unwrap().as_string().unwrap(),
                         json.find("text").unwrap()[0].as_string().unwrap())
             }
             501 => json.find("message").unwrap().as_string().unwrap().into(),
             _ => format!("{:?}", json.as_string()),
         };
         Ok(reply)
     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def translate(direction, text):
         """
         Translate text according to direction.

         >>> print(translate('la-en', 'ad astra per aspera'))
         la-en: to the stars through rough

         >>> print(translate('vi', "you think you're good?"))
         en-vi: ngươi nghĩ ngươi giỏi không?

         >>> print(translate('en', 'mày nghĩ mày ngon?'))
         vi-en: you think you're so tough?

         >>> print(translate('jbo', 'hello')) # doctest: +IGNORE_EXCEPTION_DETAIL
         Traceback (most recent call last):
           ...
         urllib.error.HTTPError: HTTP Error 400: BAD REQUEST
         """
         if not text:
             return 'Missing text'
         r = urlopen(
             'https://translate.yandex.net/api/v1.5/tr.json/translate?key=<<yandex_key>>&text={}&lang={}'
             .format(
                 quote(text), direction))
         data = json.loads(r.read().decode())
         r.close()
         return data['lang'] + ": " + data['text'][0]
   #+END_SRC

   Posts its own source code:

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     fn post_source_code() -> String {
         use url::form_urlencoded;
         let form = [("read:1", "3"),
                     ("name:1", "main.rs"),
                     ("f:1", include_str!("main.rs")),
                     ("read:2", "3"),
                     ("name:2", "Cargo.toml"),
                     ("f:2", include_str!("../Cargo.toml"))];
         let result = Client::new()
                          .post("http://ix.io")
                          .body(&form_urlencoded::serialize(form.iter()))
                          .send();
         match result {
             Ok(mut response) => {
                 let mut reply = String::new();
                 let _ = response.read_to_string(&mut reply);
                 reply.replace('\n', " ")
             }
             Err(e) => format!("unable to post: {:?}", e),
         }
     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def report():
         """
         Return owner and source code

         >>> print(report()) # doctest: +ELLIPSIS
         operated by ... with source code http://ix.io/...
         """
         conn = HTTPConnection('ix.io')
         conn.request(
             'POST', '/',
             'read:1=3&name:1=<<botname>>.py&f:1=' + quote(open(__file__).read()))
         return "operated by {} with source code {}".format(
                 os.getenv('USER'), conn.getresponse().read().decode().strip())
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     if __name__ == '__main__':
         main()
   #+END_SRC

* OpenVPN
  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S openvpn
  #+END_SRC

  #+NAME: openvpn_common
  #+BEGIN_SRC conf
    dev tun
    topology subnet
    persist-key
    persist-tun
    keepalive 10 30
    tls-version-min 1.2
    tls-cipher TLS-DHE-RSA-WITH-AES-128-CBC-SHA
    <tls-auth>
    <<ta_key>>
    </tls-auth>
    <ca>
    -----BEGIN CERTIFICATE-----
    MIIEYTCCA0mgAwIBAgIJAPxrcItU3yz8MA0GCSqGSIb3DQEBCwUAMH0xCzAJBgNV
    BAYTAlZOMQswCQYDVQQIEwJITjEOMAwGA1UEBxMFSGFOb2kxDTALBgNVBAoTBHph
    aGUxEDAOBgNVBAMTB3phaGUgQ0ExEDAOBgNVBCkTB3phaGUubWUxHjAcBgkqhkiG
    9w0BCQEWD2hkaG9hbmdAemFoZS5tZTAeFw0xNTA5MjYxMTM0NTRaFw0yNTA5MjMx
    MTM0NTRaMH0xCzAJBgNVBAYTAlZOMQswCQYDVQQIEwJITjEOMAwGA1UEBxMFSGFO
    b2kxDTALBgNVBAoTBHphaGUxEDAOBgNVBAMTB3phaGUgQ0ExEDAOBgNVBCkTB3ph
    aGUubWUxHjAcBgkqhkiG9w0BCQEWD2hkaG9hbmdAemFoZS5tZTCCASIwDQYJKoZI
    hvcNAQEBBQADggEPADCCAQoCggEBANXOfdISWeotIr3neKpj6IGBlCLMEBNtMB1r
    bTIgkxe9tnNd4jBufq6duLK91ioqcJiAxMLRovYtaRTOpQit5/PnAm2Iwu3u2mGX
    EftWEBSVt437NMVA6L2Jemv1lp81vmzJIODgPQ9elrNteQ3ccAMCpuj/l6PhGeFq
    JvK+dNIJcm2+xM15S6ESwjsZxwijiT3TMJAjXJPC5R3gpULoTHrphPGrS/0RIq9c
    Bd/+4Q7k1MguPK2XSKHiJnUIkQJ/m/XGT2iXVEzhOsHZ8vlaNq1xBzTko10nEb7I
    sOQjuH4GCZMeoYnF3egg534fg+BYPAecuKglqdIpnm4+syJsrR0CAwEAAaOB4zCB
    4DAdBgNVHQ4EFgQUsDCM7/aJ6AjPVQPEbdDTiTa9WIswgbAGA1UdIwSBqDCBpYAU
    sDCM7/aJ6AjPVQPEbdDTiTa9WIuhgYGkfzB9MQswCQYDVQQGEwJWTjELMAkGA1UE
    CBMCSE4xDjAMBgNVBAcTBUhhTm9pMQ0wCwYDVQQKEwR6YWhlMRAwDgYDVQQDEwd6
    YWhlIENBMRAwDgYDVQQpEwd6YWhlLm1lMR4wHAYJKoZIhvcNAQkBFg9oZGhvYW5n
    QHphaGUubWWCCQD8a3CLVN8s/DAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUA
    A4IBAQAKkiDOWmwu1D+qbCSYaSxiMfJ70FyA/o+AuCDeaGxKdFLZ2JQgYK/az3y8
    tGQKBc6AdUY7BoN1Ab/6TOz+hWvmyNOOvq2AMgt2bHHA+JquRZMdgw59OtbB2BjC
    vBs2cxRJWdmv8aSltcqVpm2HNHy3mzcq8i0CdFluxDV+zQmvhGVypAipYTlhdi0l
    KLJlB+3fqS5GQB0wPmkV2N6WJdm0NfoTbBOCXwVb4ChyrgryQaOQi5nu8wO9tzeO
    kK/jQJRFKpdwBYqAe0Q/JP95pVjctyiVFg97ppvQ557QFcY1pHapAwhyBmxYiLak
    W4pz42IduC2pnZ3ut4C7UzpeDMRr
    -----END CERTIFICATE-----
    </ca>
  #+END_SRC

* SSH
  :PROPERTIES:
  :header-args+: :tangle ~/.ssh/config
  :END:

  SSH encryption settings by https://stribika.github.io/2015/01/04/secure-secure-shell.html

  #+BEGIN_SRC conf
    Host *
    KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
    Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
    MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,hmac-ripemd160,umac-128@openssh.com,hmac-sha1
  #+END_SRC

  Machines
  #+BEGIN_SRC conf :tangle ~/.ssh/known_hosts
    <<prefix>>1 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBL5T08oNKjMm7yWA0zqqqSwl6Vn0nlpoAlpP9USh0NewyfVO/xOGgkUWIlUU8p85Z3zK9YY3pl0zfQQrQHvp88Y=
    <<prefix>>185 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMCCrxVyoz4ekNh2zAbr2JzvJdojMMoHYnbo20Qjn3sW+P7FUuuiknzbX0aX81BZWdKFwspNLJAXHLoiS8zy8Wc=
  #+END_SRC

  #+BEGIN_SRC conf
    Host <<prefix>>1
    User root
    IdentityFile ~/.ssh/home
  #+END_SRC

  #+BEGIN_SRC elisp :tangle ~/.emacs
    (eval-after-load 'tramp
      '(add-to-list 'tramp-default-method-alist '("vorme" nil "scp")))
  #+END_SRC

  #+BEGIN_SRC conf
    Host <<prefix>>185
    User <<username>>
    IdentityFile ~/.ssh/home
  #+END_SRC

* GUI

  #+BEGIN_SRC conf :tangle ~/.config/fcitx/config
    [Hotkey]
    # Trigger Input Method
    TriggerKey=ALT_Z
    # Use extra trigger key only after using it to inactivate
    # Available Value:
    # True False
    #UseExtraTriggerKeyOnlyWhenUseItToInactivate=True
    # Extra key for trigger input method
    # Available Value:
    # R_CTRL
    # R_SHIFT
    # L_SHIFT
    # L_CTRL
    # ALT_L_SHIFT
    # ALT_R_SHIFT
    # CTRL Both
    # SHIFT Both
    # L_ALT
    # R_ALT
    # ALT Both
    # Left Super
    # Right Super
    # Super Both
    # Ctrl+Left Super
    # Ctrl+Right Super
    # Super+Left Ctrl
    # Super+Right Ctrl
    # Disabled
    # Custom
    SwitchKey=Disabled
    # Custom switch key
    #CustomSwitchKey=
    # Activate input method
    #ActivateKey=
    # Inactivate Input Method
    #InactivateKey=
    # Enable Hotkey to scroll Between Input Method
    # Available Value:
    # True False
    #IMSwitchKey=True
    # Include Inactivate when scrolling between Input Method
    # Available Value:
    # True False
    IMSwitchIncludeInactive=True
    # Scroll between Input Method
    # Available Value:
    # CTRL_SHIFT
    # ALT_SHIFT
    # CTRL_SUPER
    # ALT_SUPER
    #IMSwitchHotkey=CTRL_SHIFT
    # Reload configuration
    #ReloadConfig=CTRL_5
    # Interval of Two Key Input
    #TimeInterval=250
    # Switching Virtual Keyboard
    #VKSwitchKey=CTRL_ALT_B
    # Switching Remind Mode
    #RemindSwitchKey=
    # Switching Full Width Character Mode
    #FullWidthSwitchKey=
    # Switch Full Width Punc Mode
    #PuncSwitchKey=CTRL_.
    # Prev Page
    #PrevPageKey=- UP
    # Next Page
    #NextPageKey== DOWN
    # Choose Second and Third Candidate Word
    #SecondThirdCandWordKey=
    # Saving All Config and Input History
    #SaveAllKey=CTRL_ALT_S
    # Switch Embeded Preedit
    #SwitchPreedit=CTRL_ALT_P
    # Previous Candidate Word
    #PrevWord=SHIFT_TAB
    # Next Candidate Word
    #NextWord=TAB

    [Program]
    # Seconds sleep before fcitx really start
    #DelayStart=0
    # Share State Among Window
    # Available Value:
    # No
    # All
    # PerProgram
    ShareStateAmongWindow=All
    # Default Input Method State
    # Available Value:
    # Inactive
    # Active
    #DefaultInputMethodState=Inactive

    [Output]
    # Type half width Punc After a Number
    # Available Value:
    # True False
    #HalfPuncAfterNumber=True
    # Disable Paging in Remind Mode
    # Available Value:
    # True False
    #RemindModeDisablePaging=True
    # Commit when toggle state
    # Available Value:
    # True False
    #SendTextWhenSwitchEng=True
    # Candidate Word Number
    #CandidateWordNumber=5
    # Give the tips of Phrase
    # Available Value:
    # True False
    #PhraseTips=True
    # Do not commit preedit text when unfocus a window
    # Available Value:
    # True False
    #DontCommitPreeditWhenUnfocus=False

    [Appearance]
    # Show Input Method Hint After Input method changed
    # Available Value:
    # True False
    #ShowInputWindowAfterTriggering=True
    # Show Input Method Hint After Input method changed and Focus in
    # Available Value:
    # True False
    #ShowInputWindowWhenFocusIn=False
    # Input Method Hint will be only shown when state is active
    # Available Value:
    # True False
    #ShowInputWindowOnlyWhenActive=True
    # Show Input Speed
    # Available Value:
    # True False
    #ShowInputSpeed=False
    # Show Version
    # Available Value:
    # True False
    #ShowVersion=False
    # Do not show input window if there is only preedit string
    # Available Value:
    # True False
    #HideInputWindowWhenOnlyPreeditString=False
    # Do not show input window if there is only one candidate and preedit
    # Available Value:
    # True False
    #HideInputWindowWhenOnlyOneCandidate=False
  #+END_SRC

  #+BEGIN_SRC sh :tangle ~/.config/openbox/autostart
    fcitx &
  #+END_SRC

  #+BEGIN_SRC sh :tangle ~/.config/openbox/autostart
    gpg-agent --daemon --enable-ssh-support
    compton &
    xbacklight =30 &
    tint2 &
    kwalletd &
    lxpolkit &
    firefox &
    emacs &
    yakuake &
    keepass &
    pragha -p &
  #+END_SRC

  Communication
  #+BEGIN_SRC sh :tangle ~/.config/openbox/autostart
    quasselclient &
    viber &
    skype &
  #+END_SRC

** kwin
   :PROPERTIES:
   :header-args+: :tangle ~/.config/kwinrulesrc
   :END:

   #+BEGIN_SRC conf
     [1]
     Description=Window settings for firefox
     shortcut=F5
     shortcutrule=2
     windowrole=browser
     windowrolematch=1
     wmclass=navigator firefox
     wmclasscomplete=true
     wmclassmatch=1
   #+END_SRC

   Put emacs on F4

   #+BEGIN_SRC conf
     [2]
     Description=Application settings for emacs
     shortcut=F4
     shortcutrule=2
     wmclass=emacs
     wmclasscomplete=false
     wmclassmatch=1
   #+END_SRC

   Put konsole on F6

   #+BEGIN_SRC conf
     [3]
     Description=Application settings for konsole
     shortcut=F6
     shortcutrule=2
     wmclass=konsole
     wmclasscomplete=false
     wmclassmatch=1
   #+END_SRC

   #+BEGIN_SRC conf
     [4]
     Description=No border on anything
     noborder=true
     noborderrule=2
   #+END_SRC

   #+BEGIN_SRC conf
     [General]
     count=4
   #+END_SRC

* Git
  #+BEGIN_SRC conf :tangle .git/config
    [core]
            repositoryformatversion = 0
            filemode = true
            bare = false
            logallrefupdates = true
    [remote "origin"]
            url = https://gitlab.com/<<username>>/<<username>>
            pushUrl = gitlab.com:<<username>>/<<username>>
            pushUrl = github.com:<<username>>/<<username>>
            pushUrl = bitbucket.org:<<username>>/<<username>>
            fetch = +refs/heads/*:refs/remotes/origin/*
    [branch "master"]
            remote = origin
            merge = refs/heads/master
  #+END_SRC

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S git
  #+END_SRC

  #+BEGIN_SRC conf :tangle ~/.gitconfig
    [user]
    name = Hoàng Đức Hiếu
    email = <<username>>@<<domain>>
    [color]
    ui = auto
    [core]
    eol = lf
    whitespace = trailing-space,space-before-tab
    [alias]
    ml = log --reverse --topo-order ORIG_HEAD..
    [merge]
    conflictstyle = diff3
    [push]
    default = simple
    [pull]
    rebase = true
    [rebase]
    stat = true
  #+END_SRC

  Code hosting sites:

  #+BEGIN_SRC conf :tangle ~/.ssh/known_hosts
    github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
    bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
    gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
  #+END_SRC

  #+BEGIN_SRC conf :tangle ~/.ssh/config
    Host gitlab.com github.com bitbucket.org
    User git
    IdentityFile ~/.ssh/git
    Host git.kde.org
    User git
    IdentityFile ~/.ssh/kde
    Host heroku.com
    IdentityFile ~/.ssh/heroku
  #+END_SRC

  Magit is awesome.

  #+BEGIN_SRC elisp :tangle ~/.emacs
    (eval-after-load 'use-package
      '(progn
         (use-package magit
           :bind ("C-x g" . magit-status)
           :config
           (setq magit-save-repository-buffers 'dontask
                 magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1
                 magit-push-always-verify nil))))
  #+END_SRC

* Crawl

  #+BEGIN_SRC conf :tangle ~/.crawlrc
    tile_full_screen = false
    autopickup_exceptions += <tomahawk, <throwing net, <javelin, <rock, <immol
    autopickup_exceptions += <misc, <ego, <artefact, <mutagenic
  #+END_SRC

* ArchLinux
  Pacman config

  #+NAME: pacman_common
  #+BEGIN_SRC conf
    [options]
    VerbosePkgLists
    UseSyslog
    CheckSpace
    HoldPkg = pacman glibc
    SigLevel = Required DatabaseOptional
    LocalFileSigLevel = Optional

    [core]
    Include = /etc/pacman.d/mirrorlist
    [extra]
    Include = /etc/pacman.d/mirrorlist
    [community]
    Include = /etc/pacman.d/mirrorlist
    [blackarch]
    Server = http://f.archlinuxvn.org/$repo/$repo/os/$arch
  #+END_SRC

  Refresh database

  #+BEGIN_SRC sh :dir /sudo::
    dirmngr --daemon
    pacman-key -r 7533BAFE69A25079
    pacman-key --lsign 7533BAFE69A25079
    <<pacman>> -S -y
  #+END_SRC

  Base utils

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S haveged p7zip parallel pkgfile
    <<system_ctl>> enable --now haveged
  #+END_SRC

  #+BEGIN_SRC sh
    pkgfile -u
  #+END_SRC

  Dev-env:

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S base-devel tmux fish android-tools android-udev
    chsh <<username>> -s /usr/bin/fish
    gpasswd -a <<username>> adbusers
  #+END_SRC

  Monitoring:

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S ethtool lm_sensors traceroute psmisc \
        procps-ng inetutils ltrace sysdig atop iotop
  #+END_SRC

  #+BEGIN_SRC sh :tangle ~/bin/strace :shebang #!/bin/sh :no-expand
    exec /usr/bin/ltrace -CSn2 $@
  #+END_SRC

  Of course emacs is installed, now run it

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S emacs-pkgbuild-mode
  #+END_SRC

  #+BEGIN_SRC conf :tangle ~/.config/systemd/user/remacs.service
    [Unit]
    Description=REmacs

    [Service]
    ExecStart=%h/remacs/src/remacs
    Restart=always
    RestartSec=1sec

    [Install]
    WantedBy=default.target
  #+END_SRC

  #+BEGIN_SRC sh :dir ~
    <<user_ctl>> enable --now emacs syncthing pulseaudio
  #+END_SRC

** kub
   :PROPERTIES:
   :header-args+: :dir /sudo:kub:
   :END:
*** Network
    :PROPERTIES:
    :header-args+: :tangle-mode 260
    :END:
    #+BEGIN_SRC conf :tangle /sudo:kub:/etc/systemd/network/eth0.network
      [Match]
      Name = eth0

      [Network]
      Address = <<prefix>>185/24
      Gateway = <<prefix>>1
      DNS = <<prefix>>1
      IPForward = yes

      Tunnel=he-ipv6
      Address=<<prefix6>>1/64
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:kub:/etc/systemd/network/he-ipv6.netdev
      [NetDev]
      Name=he-ipv6
      Kind=sit
      MTUBytes=1472

      [Tunnel]
      Local=<<prefix>>185
      Remote=216.218.221.42
      TTL=255
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:kub:/etc/systemd/network/he-ipv6.network
      [Match]
      Name=he-ipv6
      [Network]
      Address=2001:470:35:62a::2/64
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:kub:/etc/systemd/system/he-ipv6-route.service
      [Unit]
      After=network.target

      [Service]
      Type=oneshot
      RemainAfterExit=yes
      ExecStart=/bin/ip -6 route add default src <<prefix6>>1 dev he-ipv6
      ExecStop=/bin/ip -6 route del default

      [Install]
      WantedBy=multi-user.target
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:kub:/etc/radvd.conf
      interface eth0 {
      AdvSendAdvert on;
      MinRtrAdvInterval 3;
      MaxRtrAdvInterval 10;
      AdvLinkMTU 1472;
      prefix <<prefix6>>/64 {
      AdvOnLink on;
      AdvRouterAddr on;
      };
      };
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:kub:/etc/resolv.conf
      nameserver <<prefix>>1
    #+END_SRC

*** Pacman
    #+BEGIN_SRC conf :tangle /sudo:kub:/etc/pacman.conf :tangle-mode 260
      <<pacman_common>>

      [options]
      Architecture = armv7h

      [alarm]
      Include = /etc/pacman.d/mirrorlist
      [aur]
      Include = /etc/pacman.d/mirrorlist
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:kub:/etc/pacman.d/mirrorlist
      Server = http://vn.mirror.archlinuxarm.org/$arch/$repo
    #+END_SRC

*** LED blinking
    #+BEGIN_SRC sh :tangle /sudo:kub:/usr/local/bin/leds :shebang #!/bin/sh
      echo none > /sys/class/leds/cubieboard:green:usr/trigger
      echo mmc0 > /sys/class/leds/cubieboard:blue:usr/trigger
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:kub:/etc/systemd/system/leds.service
      [Service]
      Type=oneshot
      ExecStart=/bin/sh /usr/local/bin/leds
      RemainAfterExit=true

      [Install]
      WantedBy=basic.target
    #+END_SRC

*** tmux
    #+BEGIN_SRC conf :tangle /ssh:kub:.config/systemd/user/tmux.service
      [Unit]
      Description=Start tmux in detached session

      [Service]
      Type=forking
      ExecStart=/usr/bin/tmux new-session -s %u -d
      ExecStop=/usr/bin/tmux kill-session -t %u
      Restart=always

      [Install]
      WantedBy=multi-user.target
    #+END_SRC

    #+BEGIN_SRC conf :tangle /ssh:kub:.tmux.conf
      set -g base-index 1
      set -g pane-base-index 1
      setw -g aggressive-resize on
      set -g history-limit 10000
    #+END_SRC

*** Torrent
    #+BEGIN_SRC sh :dir /sudo:kub:
      <<pacman>> -S deluge python2-mako
    #+END_SRC

    #+BEGIN_SRC conf :tangle /kub:.config/systemd/user/deluge.service
      [Unit]
      Description=Deluge

      [Service]
      ExecStart=/usr/bin/deluged -d

      [Install]
      WantedBy=default.target
    #+END_SRC

    #+BEGIN_SRC conf :tangle /kub:.config/systemd/user/deluge-web.service
      [Unit]
      Description=Deluge Web

      [Service]
      ExecStart=/usr/bin/deluge-web -b /deluge/

      [Install]
      WantedBy=default.target
    #+END_SRC

*** Tor
    #+BEGIN_SRC sh :dir /sudo:kub:
      <<pacman>> -S tor
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:kub:/etc/tor/torrc :tangle-mode 420
      ContactInfo tor at <<domain>>
      Nickname kub
      DirPort 4660
      ORPort 34289
      SOCKSPort <<prefix>>185:9050
      MaxAdvertisedBandwidth 400 KBytes
      ExitPolicy reject *:*

      DataDirectory /var/lib/tor
      Log notice syslog
   #+END_SRC

*** HTTP
    #+BEGIN_SRC sh
      <<pacman>> -S nginx-mainline-full php-fpm
    #+END_SRC

    #+NAME: php
    #+BEGIN_SRC text
      location ~ \.php(?:$|/) {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_pass php-fpm;
      }
    #+END_SRC

    #+BEGIN_SRC c :tangle /sudo:kub:/etc/nginx/nginx.conf
      load_module /usr/lib/nginx-mainline/modules/ngx_http_fancyindex_module.so;
      events {}
      http {
        include mime.types;
        charset utf-8;
        gzip off;
        client_max_body_size 10G;
        root /home/hdhoang/Public;
        fancyindex on;
        fancyindex_default_sort date_desc;
        fancyindex_exact_size off;
        fancyindex_name_length 1000;
        fancyindex_time_format "%Y-%m-%d %H:%M";
        index index.html index.php;

        access_log off;
        log_not_found off;

        server {
          location ~ "^/.well-known/acme-challenge/([-_a-zA-Z0-9]+)$" {
            return 200 "$1.cktlFWWgTL_idErOLT5swJTT2er1znIr9kUX1FkClDk";
          }
          return 301 https://$host$request_uri;
        }

        ssl_certificate /var/lib/acme/live/kub.<<domain>>/fullchain;
        ssl_certificate_key /var/lib/acme/live/kub.<<domain>>/privkey;
        ssl_protocols TLSv1.2;
        ssl_ciphers EECDH+CHACHA20:EECDH+AES128;
        ssl_prefer_server_ciphers on;
        add_header Strict-Transport-Security "max-age=31536000; preload; includeSubdomains";

        server {
          listen 443 ssl http2 default_server;
          listen [::]:443 ssl http2 default_server;
          server_name <<domain>>;

          location ~ ^/(Videos|Music) {
            auth_basic "hello";
            auth_basic_user_file music;
          }
          location /deluge {
            proxy_pass http://127.0.0.1:8112/;
            auth_basic "hello";
            auth_basic_user_file music;
          }
        }
      }
    #+END_SRC

*** DLNA
    #+BEGIN_SRC sh :dir /sudo:kub:
      <<pacman>> -S minidlna
    #+END_SRC

    #+BEGIN_SRC sh :dir /sudo:kub:
      <<system_ctl>> enable --now minidlna
     #+END_SRC

*** IPsec
    #+BEGIN_SRC conf :tangle /sudo:kub:/etc/ipsec.conf
      ca letsencrypt
          auto=add
          cacert=/var/lib/acme/live/kub.<<domain>>/chain

      conn kub
          auto=add
          left=<<prefix>>185
          leftid=kub.<<domain>>
          leftcert=/var/lib/acme/live/kub.<<domain>>/cert
          leftsubnet=<<prefix>>0/24
          leftfirewall=yes
          leftdns=<<prefix>>1

          rightauth=eap-mschapv2
          eap_identity=%any
          rightsourceip=%dhcp
    #+END_SRC

*** OpenVPN
    #+BEGIN_SRC conf :tangle-mode 256 :tangle /sudo:kub:/etc/openvpn/kub.conf
      <<openvpn_common>>

      key-direction 0
      tls-server
      <pkcs12>
      <<kub_pfx>>
      </pkcs12>
      <dh>
      -----BEGIN DH PARAMETERS-----
      MIIBCAKCAQEAoioJw6aUXmgBDSw6SzbSZww6i7eH0MC+Eba5qGmYJnKn2zI8dBH6
      JZKnAyz9MbD21loI6KjAnOzZkBp7DKle1cACLS229Olycr22rXWPFuhMV15TohDJ
      ArazVXSJGDL9OXhdHei96K3qXofz/3AzXEVxD0unQd5sRlgNGmunofvgWBechdmn
      YQl44SZ0asC8uUY1uiKjVyQzqeNDi3rjJtTobcPdR6Pb8CnS3cfwoWzXMwUexmfJ
      VQSNaDZIeQcwV5MEHs1XViOTiEvT8IHbJojJri0geUSJ+HkX1JTxGIUj4xxKHQ0j
      AFEjqDYFh3q7U6QgFLRWZffVLgxIZVopIwIBAg==
      -----END DH PARAMETERS-----
      </dh>
      user nobody
      group nobody

      mode server

      server 10.255.0.0 255.255.255.0
      push "route <<prefix>>54"
    #+END_SRC

*** SSH
    #+BEGIN_SRC conf :tangle /sudo:kub:/etc/ssh/sshd_config
      Protocol 2
      HostKey /etc/ssh/ssh_host_ed25519_key

      KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
      Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr

      AllowGroups wheel
      PasswordAuthentication no
      ChallengeResponseAuthentication no
      UsePrivilegeSeparation sandbox

      Subsystem sftp /usr/lib/ssh/sftp-server
    #+END_SRC

** ton
*** Hardware
    Fix USB interfering with suspending

    #+BEGIN_SRC sh :tangle /sudo::/usr/local/bin/s230u :tangle-mode 320
      echo EHC1 > /proc/acpi/wakeup
      echo EHC2 > /proc/acpi/wakeup
    #+END_SRC

    Let powertop autotune. This conveniently waits for the trackpoint to become available for the last section.

    #+BEGIN_SRC sh :tangle /sudo::/usr/local/bin/s230u :tangle-mode 320
      powertop --auto-tune
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo::/etc/systemd/system/s230u.service
      [Service]
      Type=oneshot
      RemainAfterExit=yes
      ExecStart=/usr/local/bin/s230u

      [Install]
      WantedBy=basic.target
    #+END_SRC

    #+BEGIN_SRC sh :dir /sudo::
      <<system_ctl>> enable --now s230u
    #+END_SRC
*** Mounts
    #+BEGIN_SRC sh
      fallocate -l 2G /swap
      chmod u=rw,go= /swap
      mkswap /swap
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo::/etc/fstab
      LABEL=home /home/<<username>> ntfs-3g noatime,nofail
      LABEL=ESP /boot vfat
      /swap none swap
    #+END_SRC

*** Network
    #+BEGIN_SRC conf :tangle /sudo::/etc/systemd/network/00-bkap.network
      [Match]
      Name = enp4s0

      [Network]
      DNS = 8.8.8.8
      Address = 192.168.0.252/24
      Gateway = 192.168.0.1
      Address = 192.168.1.252/24
      Gateway = 192.168.1.1
      Address = 192.168.4.252/24
      Gateway = 192.168.4.1
      Address = 192.168.5.252/24
      Gateway = 192.168.5.1

      [Route]
      Destination=192.168.1.1
      Source=192.168.1.252
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo::/etc/systemd/network/dhcp.network
      [Network]
      DHCP=ipv4
    #+END_SRC

*** Pacman
  #+BEGIN_SRC conf :tangle /sudo::/etc/pacman.conf :tangle-mode 260
    <<pacman_common>>

    [options]
    Architecture = auto

    [multilib]
    Include = /etc/pacman.d/mirrorlist

    [antergos]
    SigLevel = PackageRequired
    Include = /etc/pacman.d/antergos-mirrorlist
  #+END_SRC

  #+BEGIN_SRC conf :tangle /sudo::/etc/pacman.d/mirrorlist
    Server = http://f.archlinuxvn.org/archlinux/$repo/os/$arch
  #+END_SRC

*** OpenVPN
    #+BEGIN_SRC conf :tangle-mode 256 :tangle /sudo::/etc/openvpn/kub.conf
      <<openvpn_common>>

      key-direction 1
      tls-client
      <pkcs12>
      <<ton_pfx>>
      </pkcs12>

      nobind
      pull

      remote k.<<domain>> 22
      verify-x509-name kub.<<domain>> name
      remote-cert-tls server
      resolv-retry infinite
    #+END_SRC

*** Fonts
    #+BEGIN_SRC sh :dir
      <<pacman>> -S noto-fonts-emoji
    #+END_SRC

    #+BEGIN_SRC xml :tangle ~/.config/fontconfig/fonts.conf :padline no :comments no
      <?xml version='1.0'?>
      <!DOCTYPE fontconfig SYSTEM 'fonts.dtd'>
      <fontconfig>
        <match target="font">
          <edit mode="assign" name="rgba">
            <const>none</const>
          </edit>
        </match>
        <match target="font">
          <edit mode="assign" name="hinting">
            <bool>true</bool>
          </edit>
        </match>
        <match target="font">
          <edit mode="assign" name="hintstyle">
            <const>hintslight</const>
          </edit>
        </match>
        <match target="font">
          <edit mode="assign" name="antialias">
            <bool>true</bool>
          </edit>
        </match>
        <match target="pattern">
          <test qual="any" name="family"><string>Arial</string></test>
          <edit name="family" mode="assign" binding="same"><string>sans-serif</string></edit>
        </match>
        <match target="pattern">
          <test qual="any" name="family"><string>DejaVu Sans</string></test>
          <edit name="family" mode="assign" binding="same"><string>sans-serif</string></edit>
        </match>
        <alias>
          <family>sans-serif</family>
          <prefer>
            <family>Source Han Sans</family>
          </prefer>
        </alias>
        <alias>
          <family>serif</family>
          <prefer>
            <family>Source Han Serif</family>
          </prefer>
        </alias>
        <alias>
          <family>monospace</family>
          <prefer>
            <family>Source Code Sans JP</family>
          </prefer>
        </alias>
        <selectfont>
          <rejectfont>
            <glob>/usr/share/fonts/default/Type1/*</glob>
            <pattern>
              <patelt name="scalable">
                <bool>false</bool>
              </patelt>
            </pattern>
          </rejectfont>
        </selectfont>
      </fontconfig>
     #+END_SRC

*** Desktop
    These DBus services are provided by plasma-workspace-units.

    #+BEGIN_SRC sh :dir /sudo::
      rm /usr/share/dbus-1/services/org.kde.{kded5,kglobalaccel,kuiserver,kwalletd5}.service
    #+END_SRC

**** Inside VM
     #+BEGIN_SRC sh :dir /sudo::
       <<system_ctl>> enable --now systemd-networkd-wait-online sshd
     #+END_SRC

     #+BEGIN_SRC conf :tangle /sudo::/etc/fstab
       //192.168.208.1/home /home/<<username>> cifs credentials=/etc/cifs,uid=1000,gid=1000,file_mode=0600
     #+END_SRC

     On the host side, open 445/tcp to this VM, and run emacs over X with MobaXterm:

     #+BEGIN_SRC conf :tangle bin/emacs.moba
       emacs =  #109#0%192.168.208.128%22%<<username>>%%-1%0%cp -r ~/.gnupg /run/user/1000 && chmod -R 700 /run/user/1000/.gnupg && export GNUPGHOME__EQUAL__/run/user/1000/.gnupg && setxkbmap dvorak && gpg-agent --enable-ssh-support --daemon emacs%%22%%0%0%Interactive shell%h:\.ssh\kub%%0%0%0%0%%1080%%0#MobaFont%10%0%0%0%15%236,236,236%0,0,0%180,180,192%0%-1%0%%xterm%-1%0%0,0,0%54,54,54%255,96,96%255,128,128%96,255,96%128,255,128%255,255,54%255,255,128%96,96,255%128,128,255%255,54,255%255,128,255%54,255,255%128,255,255%236,236,236%255,255,255%80%24%0#0
     #+END_SRC

     Remember to quit emacs before suspending.
***** Megasync
      #+BEGIN_SRC sh :dir /sudo::
       <<pacman>> -S xorg-server-xvfb megasync
      #+END_SRC

      #+BEGIN_SRC conf :tangle ~/.config/systemd/user/megasync.service
       [Unit]
       Description=Headless megasync

       [Service]
       ExecStart=/usr/bin/xvfb-run megasync

       [Install]
       WantedBy=default.target
      #+END_SRC

      #+BEGIN_SRC sh
       <<user_ctl>> enable --now megasync
      #+END_SRC

**** Keyboard
     Use dvorak, swap caps for ctrl

     #+BEGIN_SRC conf :tangle /sudo::/usr/share/kbd/keymaps/caps2ctrl.map
       include "/usr/share/kbd/keymaps/i386/dvorak/dvorak.map.gz"
       keycode 58 = Control
     #+END_SRC

     #+BEGIN_SRC sh :dir /sudo::
       localectl set-keymap caps2ctrl
     #+END_SRC

     Swap caps for ctrl

     #+BEGIN_SRC conf :tangle keyboard.reg :comments no :shebang Windows Registry Editor Version 5.00
       [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
       "Scancode Map"=hex:00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00
     #+END_SRC

     Base Japanese IME on dvorak

     #+BEGIN_SRC conf :tangle keyboard.reg
       [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layouts\00000411]
       "Layout File"="kbddv.dll"
     #+END_SRC

     Tangle registry files as UTF-16LE with BOM

     #+BEGIN_SRC elisp :tangle ~/.emacs
       (add-to-list 'file-coding-system-alist '("\\.reg\\'" . utf-16le-with-signature-dos))
     #+END_SRC

     Import into registry

     #+BEGIN_SRC sh
       start regedit $PWD/*reg
     #+END_SRC

**** Pointer
     Up sensitivity

     #+BEGIN_SRC sh :tangle /sudo::/usr/local/bin/s230u :tangle-mode 320
       echo 200 > /sys/bus/serio/devices/serio2/sensitivity
     #+END_SRC

     #+BEGIN_SRC sh :dir /sudo::
       <<pacman>> -S xf86-input-libinput
     #+END_SRC

     Use natural scrolling on touchpad

     #+BEGIN_SRC conf :tangle /sudo::/etc/X11/xorg.conf.d/pointer.conf
       Section "InputClass"
               Identifier "Natural scrolling"
               MatchProduct "TouchPad"
               Driver "libinput"
               Option "NaturalScrolling" "1"
       EndSection
     #+END_SRC

**** Rotation
     #+BEGIN_SRC sh :dir /sudo::
       <<pacman>> -S acpid
     #+END_SRC

     #+BEGIN_SRC text :tangle /sudo::/etc/acpi/events/rotation-button
       event=ibm/hotkey LEN0068:00 00000080 00006020
       action=sudo -u <<username>> DISPLAY=:0 /usr/local/bin/rotate-screen
     #+END_SRC

     #+BEGIN_SRC sh :tangle /sudo::/usr/local/bin/rotate-screen :shebang #!/bin/sh :tangle-mode 365
       case $(xrandr | grep LVDS1 | cut -f 4 -d ' ' | tr -d '(') in
           normal) new="left";;
           left)   new="inverted";;
           inverted)   new="normal";;
       esac
       xrandr --output LVDS1 --rotate $new

       case $new in
           normal) matrix="1 0 0 0 1 0 0 0 1";;
           left)   matrix="0 -1 1 1 0 0 0 0 1";;
           right)  matrix="0 1 0 -1 0 1 0 0 1";;
           inverted) matrix="-1 0 1 0 -1 1 0 0 1";;
       esac
       for dev in "SynPS/2 Synaptics TouchPad" "TPPS/2 IBM TrackPoint" "Atmel Atmel maXTouch Digitizer"; do
           xinput set-prop "$dev" "Coordinate Transformation Matrix" $matrix
       done
     #+END_SRC

     #+BEGIN_SRC sh :dir /sudo::
       <<system_ctl>> enable --now acpid
     #+END_SRC

*** Picard
    #+BEGIN_SRC sh :dir /sudo::
      <<pacman>> -S picard chromaprint
    #+END_SRC

    #+BEGIN_SRC conf :tangle ~/.config/MusicBrainz/Picard.conf
      [setting]
      server_host=musicbrainz.org
      server_port=80

      fingerprinting_system=acoustid
      acoustid_apikey=<<acoustid_key>>
      acoustid_fpcalc=/usr/bin/fpcalc

      save_images_to_tags=true
      save_only_front_images_to_tags=true
      save_images_to_files=false
      ca_provider_use_amazon=true
      ca_provider_use_caa=true
      ca_provider_use_caa_release_group_fallback=true
      ca_provider_use_whitelist=true
      caa_image_size=1
      caa_approved_only=true
      caa_restrict_image_types=true
      analyze_new_files=false
      ignore_file_mbids=false
      quit_confirmation=true
      va_name=Various Artists
      nat_name=
      standardize_artists=true

      windows_compatibility=true
      ascii_filenames=false
      rename_files=true
      move_files=true
      file_naming_format="$if2(%albumartist%,%artist%)/$if($ne(%albumartist%,),%album%/)$if($gt(%totaldiscs%,1),%discnumber%-,)$if($ne(%albumartist%,),$num(%tracknumber%,2) ,)$if(%_multiartist%,%artist% - ,)%title%"
      move_files_to=<<music>>/_new
      move_additional_files=true
      move_additional_files_pattern=*.jpg *.png *.jpeg
      delete_empty_dirs=true

      browser_integration=true
      browser_integration_port=8000
      browser_integration_localhost_only=true

      dont_write_tags=false
      preserve_timestamps=false
      write_id3v1=true
      write_id3v23=true
      id3v23_join_with=/
      id3v2_encoding=utf-16
      remove_ape_from_mp3=true
      remove_id3_from_flac=true
    #+END_SRC

*** mpd
    :PROPERTIES:
    :header-args+: :dir ~
    :END:

    Create playlist
    #+BEGIN_SRC sh
      mpc listall > <<music>>/pq.m3u
    #+END_SRC

    Shuffle and play

    #+BEGIN_SRC sh :results raw
      mpc -q clear && mpc load pq && mpc -q shuffle && mpc play
    #+END_SRC

    Delete currently playing track

    #+BEGIN_SRC sh :eval query
      rm -v <<music>>/"$(mpc -f %file% | head -1)"
    #+END_SRC

*** mpv

    #+BEGIN_SRC conf :tangle ~/.config/mpv/mpv.conf
      hwdec-codecs=all
      hwdec=auto
      no-audio-display
      ontop
      shuffle
      sub-auto=fuzzy
      window-scale=0.5
    #+END_SRC

    #+BEGIN_SRC conf :tangle ~/.config/mpv/input.conf
      q quit_watch_later
      MOUSE_BTN0 cycle pause
      MOUSE_BTN1 show_progress
      MOUSE_BTN2 cycle fullscreen
      z set window-scale 2
      Z set window-scale 1

      ; show_progress
      f show_text "${filename}"
      d cycle audio
      y add volume 1
      i add volume -1
      g add sub-delay  0.1
      h add sub-delay -0.1
      x cycle mute

      k frame_step
      ' seek +5
      a seek -5
      , seek +60
      o seek -60
      . seek +300
      e seek -300

      u cycle fullscreen
    #+END_SRC

* Emacs
  :PROPERTIES:
  :header-args+: :tangle ~/.emacs
  :END:

  OOBE settings:

  #+BEGIN_SRC elisp
    (server-mode t)
    (global-set-key (kbd "C-x C-r")
                    (lambda () (interactive)
                      (revert-buffer :noconfirm t)))
    (defalias 'yes-or-no-p #'y-or-n-p)
    (defalias 'dabbrev-expand #'hippie-expand)
    (setq auto-save-default nil
          calendar-week-start-day 1
          default-input-method "vietnamese-telex"
          inhibit-startup-screen t
          make-backup-files nil
          scroll-preserve-screen-position t
          tramp-default-method "ssh"
          undo-tree-mode-lighter ""
          visible-bell t
          save-interprogram-paste-before-kill t
          frame-title-format "%b")
    (set-language-environment "UTF-8")
    (setq-default buffer-file-coding-system 'utf-8-unix)
    (setq-default sentence-end-double-space nil)
    (global-set-key (kbd "C-\\") #'toggle-input-method)
    (blink-cursor-mode -1)
    (show-paren-mode t)
    (winner-mode)
  #+END_SRC

  Package management

  #+BEGIN_SRC elisp
    (package-initialize)
    (setq package-archives
          '(("gnu" . "https://elpa.gnu.org/packages/")
            ("marmalade" . "https://marmalade-repo.org/packages/")
            ("melpa" . "http://melpa.org/packages/")))
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (setq use-package-always-ensure t)
    (require 'use-package)
  #+END_SRC

  Color theme

  #+BEGIN_SRC elisp
    (use-package color-theme-sanityinc-solarized
      :config (load-theme 'sanityinc-solarized-dark t))
  #+END_SRC

  Font on Windows

  #+BEGIN_SRC elisp
    (when (eq window-system 'w32)
      (if (> window-system-version 5)
          (set-default-font "Consolas-12" :frames t)
        (set-default-font "Lucida Console-10" :frames t)))
  #+END_SRC

** Discovery
   Learn what's available under prefix keys

   #+BEGIN_SRC elisp
     (use-package which-key :ensure
       :diminish ""
       :config (which-key-mode))
   #+END_SRC

** Editing
   Vim-style

   #+BEGIN_SRC elisp
     (use-package evil
       :config
       (evil-mode t)
       (evil-set-initial-state 'special-mode 'emacs)
       (dolist (state '(normal motion))
         (evil-define-key state global-map
           (kbd "<SPC>") #'evil-scroll-down
           (kbd "S-<SPC>") #'evil-scroll-up))
       (dolist (state '(insert motion normal))
         (evil-define-key state global-map
           (kbd "C-t") #'transpose-chars
           (kbd "C-d") #'delete-char
           (kbd "C-k") #'kill-line
           (kbd "C-y") #'evil-paste-before
           (kbd "C-a") #'beginning-of-line (kbd "C-e") #'end-of-line
           (kbd "C-f") #'forward-char   (kbd "C-b") #'backward-char
           (kbd "C-n") #'next-line      (kbd "C-p") #'previous-line
           (kbd "<down>") #'next-line   (kbd "<up>") #'previous-line
           (kbd "j") #'next-line        (kbd "k") #'previous-line
           (kbd "C-v") #'evil-scroll-down (kbd "M-v") #'evil-scroll-up
           (kbd "C-r") #'isearch-backward))
       (evil-define-key 'insert global-map
         "j" #'self-insert-command "k" #'self-insert-command)
       (evil-define-key 'motion help-mode-map
         (kbd "<tab>") #'forward-button))
   #+END_SRC

   Aggressive indent

   #+BEGIN_SRC elisp
     (setq tab-always-indent 'complete)
     (use-package aggressive-indent
       :diminish ""
       :config
       (global-aggressive-indent-mode)
       (add-to-list 'aggressive-indent-excluded-modes 'rust-mode))
   #+END_SRC

   Switch window with ace

   #+BEGIN_SRC elisp
     (use-package ace-window
       :config (ace-window-display-mode 1)
       :bind ("C-x o" . ace-window))
   #+END_SRC

   Do things with helm:

   #+BEGIN_SRC elisp
     (use-package helm
       :config
       (helm-mode 1)
       (define-key shell-mode-map (kbd "M-r") #'helm-comint-input-ring)
       :diminish helm-mode
       :bind (("C-h SPC" . helm-all-mark-rings)
              ("C-x b" . helm-mini)
              ("C-x C-b" . helm-buffers-list)
              ("C-x C-f" . helm-find-files)
              ("C-c g" . helm-do-grep)
              ("C-s" . helm-occur)
              ("M-x" . helm-M-x)))
     (require 'helm-config)
     (use-package evil
       :config (dolist (state '(insert motion normal))
                 (evil-define-key state global-map
                   (kbd "M-y") #'helm-show-kill-ring)))
   #+END_SRC

** Org

   #+BEGIN_SRC elisp
     (add-hook 'org-mode-hook
	       '(lambda ()
		  (add-hook 'before-save-hook 'org-align-all-tags
			    :local t)))
     (org-babel-do-load-languages 'org-babel-load-languages
				  '((shell . t)))
     (setq org-src-fontify-natively t)
     (use-package htmlize :ensure)
     (setq org-export-initial-scope 'subtree
	   org-babel-use-quick-and-dirty-noweb-expansion t)
     (setq org-latex-pdf-process '("xelatex -interaction nonestopmode -output-directory %o %f"))
     (setq org-html-doctype "html5"
	   org-html-html5-fancy t
	   org-html-head "<link rel=stylesheet type=text/css href=blog.css>"
	   org-html-use-unicode-chars t
	   org-html-head-include-default-style nil
	   org-html-head-include-scripts nil
	   org-html-postamble nil)
   #+END_SRC

*** Crypt

    #+BEGIN_SRC elisp
      (require 'org-crypt)
      (add-hook 'org-mode-hook
                '(lambda ()
                   (add-hook 'before-save-hook 'org-encrypt-entries
                             :local t)))
      (setq org-tags-exclude-from-inheritance '("crypt")
            org-crypt-key "<<username>>@keybase.io")
    #+END_SRC

    Make it possible to tangle encrypted block

    #+BEGIN_SRC elisp
      (remove-hook 'org-babel-pre-tangle-hook #'save-buffer)
    #+END_SRC

** Doc-View

   #+BEGIN_SRC elisp
     (eval-after-load 'doc-view
       '(bind-key (kbd "<mouse-1>") #'doc-view-scroll-up-or-next-page doc-view-mode-map))
     (setq doc-view-resolution 300
           doc-view-cache-directory (expand-file-name "~/.emacs.d/doc-view"))
     (use-package evil
       :config (add-hook 'view-mode-hook #'evil-emacs-state))
   #+END_SRC

** Dired

   #+BEGIN_SRC elisp
     (use-package dired+
       :config
       (require 'dired+)
       (global-dired-hide-details-mode -1)
       (defun dired-open ()
         (interactive)
         (dired-do-shell-command "xdg-open ;" :file-list (dired-get-marked-files)))
       (define-key dired-mode-map (kbd "RET") #'dired-open)
       (define-key dired-mode-map (kbd "<mouse-2>") #'dired-open)
       (setq dired-recursive-copies 'always
             dired-recursive-deletes 'always
             dired-listing-switches "-alh"
             async-shell-command-buffer 'new-buffer
             dired-guess-shell-alist-user
             '(("\\.cb.\\'" "okular")
               ("." "xdg-open;"))))
   #+END_SRC

** Eshell
   Put eshell on a convenient binding

   #+BEGIN_SRC elisp
     (global-set-key (kbd "C-x M-m") #'eshell)
   #+END_SRC

   I like the prompt to be on a separate line.

   #+BEGIN_SRC elisp
     (setq eshell-prompt-function
           '(lambda ()
              (concat (eshell/pwd) "\n"
                      (int-to-string eshell-last-command-status) " % "))
           eshell-prompt-regexp "^[[:digit:]]\\{1,3\\} % ")
   #+END_SRC

   These are terminal-manipulating commands

   #+BEGIN_SRC elisp
     (eval-after-load 'em-term
       '(progn
          (dolist (prog '("atop" "systemd-cgls" "journalctl"))
            (add-to-list 'eshell-visual-commands prog))
          (add-to-list 'eshell-visual-options '("ssh" "-t"))))
   #+END_SRC

   Aliases:

   #+BEGIN_SRC sh :tangle ~/.emacs.d/eshell/alias
     alias vim find-file $1
     alias j journalctl -afb $*
     alias sc <<system_ctl>> $*
     alias uc <<user_ctl>> $*
     alias fr free -h
   #+END_SRC

** Rust
   #+BEGIN_SRC elisp
     (use-package rust-mode :ensure)
     (use-package cargo :ensure)
     (use-package lsp-rust
       :ensure
       :config
       (require 'lsp-mode)
       (require 'lsp-flycheck)
       (add-hook 'rust-mode-hook #'lsp-mode))
   #+END_SRC

* Ansible

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S ansible
  #+END_SRC

  #+BEGIN_SRC elisp :tangle ~/.emacs
    (eval-after-load 'use-package
      '(progn
         (use-package yaml-mode)
         (use-package ansible-doc
           :config (add-hook 'yaml-mode-hook #'ansible-doc-mode))))
  #+END_SRC

** Inventory
   :PROPERTIES:
   :header-args+: :tangle ~/.ansible_inventory
   :END:

   Here are the hosts and their variables

   #+BEGIN_SRC conf
     [arch]
     kub ansible_python_interpreter=/usr/bin/python2
     ton ansible_python_interpreter=/usr/bin/python2 ansible_connection=local

     [all:vars]
     user=<<username>>
     home=/home/<<username>>
     h=<<storage>>
     conf="{{h}}/config/{{ansible_hostname}}"
     locale=en_US
     prefix=<<prefix>>
   #+END_SRC

** Config
   :PROPERTIES:
   :header-args+: :tangle ~/.ansible.cfg
   :END:

   Keep the inventory here

   #+BEGIN_SRC conf
     [defaults]
     inventory = ~/.ansible_inventory
   #+END_SRC

   For some reason ControlMaster isn't working

   #+BEGIN_SRC conf
     [ssh_connection]
     ssh_args=-o ControlMaster=no
   #+END_SRC

* Firefox
  :PROPERTIES:
  :header-args+: :tangle ~/.pentadactylrc
  :END:
  This file is in vimrc syntax

  #+BEGIN_SRC elisp :tangle ~/.emacs
    (eval-after-load 'use-package
      '(use-package vimrc-mode))
  #+END_SRC

  Match open buffers:
  #+BEGIN_SRC vimrc
    js <<EOF
    overlay.overlayObject(dactyl, {
	open: function open(urls, params, force) {
	    if (typeof urls === "string") {
		let matches = urls.match(/^(\d+): /);
		if (matches) {
		    tabs.switchTo(urls, true);
		    return;
		}
	    }
	    open.superapply(this, arguments);
	}
    });
    completion.addUrlCompleter("buffer", "Open Tabs", completion.buffer);
    options["complete"].splice(0, 0, "buffer");
    EOF
  #+END_SRC

  Use DuckDuckGo:

  #+BEGIN_SRC vimrc
    silent bmark -keyword ddg -t DDG https://beta.duckduckgo.com/?kp=-1&kn=1&kaj=m&kam=google-maps&kae=c&q=%s
    set defsearch=ddg
  #+END_SRC

  Use backspace to go back:

  #+BEGIN_SRC vimrc
    set! browser.backspace_action=0
  #+END_SRC

  Don't let middle mouse paste:

  #+BEGIN_SRC vimrc
    set! middlemouse.contentLoadURL=false
  #+END_SRC

  Restore C-j for Downloads:

  #+BEGIN_SRC vimrc
    map <C-j> -ex dialog downloads
  #+END_SRC

  Bind stop to an easy binding:

  #+BEGIN_SRC vimrc
    map s <C-c>
  #+END_SRC

  Make scrolling easier:

  #+BEGIN_SRC vimrc
    map <space> <C-d>
    map <S-space> <C-u>
  #+END_SRC

  Pin tab:

  #+BEGIN_SRC vimrc
    map <A-p> -ex pintab!
  #+END_SRC

  Move to first or last:

  #+BEGIN_SRC vimrc
    map <A-!> -ex tabm 1
    map <A-$> -ex tabm $
  #+END_SRC

  Fast switching:

  #+BEGIN_SRC vimrc
    map -m normal,insert <F1> -js tabs.selectAlternateTab()
    map -m insert <C-p> -ex tabprevious
    map -m insert <C-n> -ex tabnext
    map -m normal,insert <C-1> -ex buffer 1
    map -m normal,insert <C-2> -ex buffer 2
    map -m normal,insert <C-3> -ex buffer 3
    map -m normal,insert <C-4> -ex buffer 4
    map -m normal,insert <C-5> -ex buffer 5
    map -m normal,insert <C-6> -ex buffer 6
    map -m normal,insert <C-7> -ex buffer 7
    map -m normal,insert <C-8> -ex buffer 8
    map -m normal,insert <C-9> -ex buffer 9
  #+END_SRC

  Don't raise these openings:

  #+BEGIN_SRC vimrc
    set activate-=diverted,links,tabopen,paste
  #+END_SRC

  Open help in a new tab

  #+BEGIN_SRC vimrc
    set newtab=help
  #+END_SRC

  Keep hint keys under left fingers:

  #+BEGIN_SRC vimrc
    set hintkeys=12345
  #+END_SRC

  Make hint text readable

  #+BEGIN_SRC vimrc
    highlight Hint -append font-size: 14px !important
  #+END_SRC

  Unzoom image:

  #+BEGIN_SRC vimrc
    map <A-t> -js content.document.toggleImageSize()
  #+END_SRC

  Minimize GUI

  #+BEGIN_SRC vimrc
    set guioptions=bsrc
    set showstatuslinks=command
  #+END_SRC

  Scroll by one line:

  #+BEGIN_SRC vimrc
    set scrollsteps=1
  #+END_SRC

  Show feeds first in pageinfo:

  #+BEGIN_SRC vimrc
    set pageinfo=fgmse
  #+END_SRC

  Use visual bell:

  #+BEGIN_SRC vimrc
    set visualbell
  #+END_SRC

  Bookmarks and preferences:

  #+BEGIN_SRC vimrc
    if !getBoolPref("<<username>>.customized")
    set! <<username>>.customized=true
    extadd https://www.eff.org/files/https-everywhere-latest.xpi
    bmark -keyword ac -t config about:config
    bmark -keyword bgp -t BGP http://bgp.he.net/search?search[search]=%s
    bmark -keyword v -t valsi http://vlasisku.lojban.org/?query=%s
    bmark -keyword c -t camxes http://camxes.lojban.org/?text=%s
    bmark -keyword yb -t youtube https://youtube.com/watch?v=%s
    bmark -keyword cw -t 'CrawlWiki' http://crawl.chaosforge.org/index.php?title=Special%3ASearch&search=%s
    bmark -keyword bb -t burnbit http://burnbit.com/burn?file=%s
    bmark -keyword b -t btdigg https://btdigg.org/search?q=%s&order=0&p=0
    bmark -keyword ba -t btdigg https://btdigg.org/search?q=%s&order=2&p=0
    bmark -keyword m -t zing http://mp3.zing.vn/tim-kiem/bai-hat.html?q=%s
    bmark -keyword ma -t artist http://musicbrainz.org/search?advanced=1&type=artist&tport=8000&query=%s
    bmark -keyword mg -t group http://musicbrainz.org/search?advanced=1&type=release_group&tport=8000&query=%s
    bmark -keyword mr -t recording http://musicbrainz.org/search?advanced=1&type=recording&tport=8000&query=%s
    bmark -keyword gm -t gmail https://inbox.google.com/
    set! accessibility.browsewithcaret_shortcut.enabled=false
    set! browser.newtabpage.enabled=false
    set! browser.privatebrowsing.dont_prompt_on_enter=true
    set! browser.sessionstore.restore_pinned_tabs_on_demand=true
    set! browser.shell.checkDefaultBrowser=false
    set! browser.startup.homepage=about:blank
    set! browser.startup.page=3
    set! general.warnOnAboutConfig=false
    set! security.OCSP.enabled=0
    set! security.warn_viewing_mixed=false
    set! layout.spellcheckDefault=0
    set! middlemouse.paste=true
    set! ui.key.menuAccessKey=0
    set! browser.anchor_color="#6c71c4"
    set! browser.display.background_color="#fdf6e3"
    set! browser.display.foreground_color="#657b83"
    set! browser.display.use_system_colors=false
    set! browser.display.use_document_fonts=0
    set! font.language.group=ja
    set! font.name.monospace.ja="Source Han Code JP"
    set! font.name.monospace.x-western="Source Han Code JP"
    set! font.name.sans-serif.ja="Source Han Sans"
    set! font.name.sans-serif.x-western="Source Han Sans"
    set! font.name.serif.ja="Source Han Serif"
    set! font.name.serif.x-western="Source Han Serif"
    set! font.size.fixed.ja=13
    set! font.size.fixed.x-western=13
    set! font.size.variable.ja=12
    set! font.size.variable.x-western=12
    set! extensions.checkCompatibility.nightly=false
    set! extensions.https_everywhere._observatory.alt_roots=true
    set! extensions.https_everywhere._observatory.enabled=true
    set! extensions.https_everywhere._observatory.priv_dns=true
    set! plugins.hide_infobar_for_missing_plugin=true
    set! browser.download.manager.alertOnEXEOpen=false
    set! browser.download.manager.scanWhenDone=false
    set! browser.search.context.loadInBackground=true
    set! intl.charset.default=UTF-8
    set! network.http.pipelining=true
    set! network.http.pipelining.aggressive=true
    set! network.http.pipelining.ssl=true
    set! network.protocol-handler.expose.magnet=false
    set! network.proxy.socks=kub.<<domain>>
    set! network.proxy.socks_port=9050
    set! network.proxy.socks_remote_dns=true
    set! toolkit.telemetry.enabled=true
    js services.permissions.add(services.io.newURI("http:depositfiles.com",null,null), 'image', services.permissions.DENY_ACTION)
    js services.loginManager.setLoginSavingEnabled("accounts.google.com", false)
    fi
  #+END_SRC

  Strip tracker from location, thanks to [[https://userscripts.org/scripts/show/93825][Bruno Barão]] and [[https://github.com/5digits/dactyl/commit/7a1ffa5b555399c5d0925ad599e2640070bd128d][Kris Maglione]].

  #+BEGIN_SRC vimrc
    autocmd DOMLoad (utm|wa)_ -js win.history.replaceState("Remove trackers", '', doc.location.href.replace(/&?(utm|wa)_[^&]+/g,'').replace(/\?$/,''))
  #+END_SRC

  Facebook

  #+BEGIN_SRC vimrc
    bmark -keyword fb -t facebook https://fb.me/%s
    style facebook.com .carouselParent { display: none !important }
    map <A-s> -js dactyl.open("https://www.facebook.com/sharer/sharer.php?u=" + content.location)
  #+END_SRC

  #+BEGIN_SRC vimrc
    set passkeys+=memrise.com:12345678
  #+END_SRC

  Inoreader

  #+BEGIN_SRC vimrc
    map <A-f> -js dactyl.open("https://www.inoreader.com/?add_feed=" + content.location)
    map <A-w> -js dactyl.open("https://www.inoreader.com/bookmarklet/save_web_page/" + encodeURIComponent(content.location))
    autocmd DOMLoad https://www.inoreader.com/bookmarklet/save_web_page/* -javascript if (doc.title != "Inoreader - Done") { doc.querySelector("form").submit() } else { win.close() }
    js services.permissions.add(services.io.newURI("http:inoreader.com",null,null), 'popup', services.permissions.ALLOW_ACTION)
    set passkeys+=inoreader.com:jkgafswhq<left><right>
    style inoreader.com code, pre { background-color: inherit !important }
  #+END_SRC

  Get videos from starred items

  #+BEGIN_SRC sh :tangle ~/bin/videos :tangle-mode 448 :shebang #!/bin/bash
    sudo /bin/pacman -Sy --noconfirm --needed jq youtube-dl;
    curl --silent --show-error \
	 'https://www.inoreader.com/reader/api/0/stream/contents/user%2F-%2Fstate%2Fcom.google%2Fstarred?n=1000&r=o' \
	 'https://www.inoreader.com/reader/api/0/stream/contents/user%2F-%2Fstate%2Fcom.google%2Fsaved-web-pages?r=o' \
	 --header 'AppId: 1000001238' --header 'AppKey:  <<inoreader_key>> \
	 --header 'Authorization: GoogleLogin auth=<<inoreader_auth>>' \
       | jq -r '.items|.[]|.canonical|.[0]|.href' \
       | <<ytdl>> $@ -a- \
	 --no-mtime \
	 --ignore-errors \
	 --youtube-skip-dash-manifest \
	 --download-archive <<videos>>/download-archive \
	 --geo-bypass \
	 --no-progress
    find -L ~/Public -type f | grep -vE '(x|epub|zip)$' | sed 's,^.*Public/,,' | shuf > ~/Public/play.m3u8
  #+END_SRC
  #+BEGIN_SRC conf :tangle /sudo:kub:/etc/sudoers.d/videos :tangle-mode 0
    <<username>> ALL=(root) NOPASSWD: /bin/pacman -Sy --noconfirm --needed jq youtube-dl
  #+END_SRC

  Site keyboard shortcuts:

  #+BEGIN_SRC vimrc
    set passkeys+=tumblr.com:jk
    set passkeys+=inbox.google.com:'#[/? rjknpou'
    set passkeys+=docs.google.com:<C-v>
    set passkeys+=google.com/contacts/:'#jkoux,.'
  #+END_SRC

  Switch to reader mode:

  #+BEGIN_SRC vimrc
    map <A-r> -js dactyl.open("about:reader?url=" + content.location)
  #+END_SRC

  Search hanzi:
  
  #+BEGIN_SRC vimrc
    map <C-k> -js <<EOS
    if (buffer.selection.rangeCount == 0) {
        string = dactyl.clipboardRead("global");
    } else {
        string = buffer.selection.toString();
    }
    for (var c of string) {
        commands.execute("tabopen " + "http://hvdic.thivien.net/word/" + c)
    }
    EOS
  #+END_SRC

* Windows
** Portables

   #+BEGIN_SRC bat :tangle bin/pe.cmd
     cd /d %~dp0\Tools
     start /b procexp /e /accepteula
   #+END_SRC

   #+BEGIN_SRC bat :tangle bin/pi.cmd
     cd /d %~dp0\picard
     start /b picard
   #+END_SRC

   #+BEGIN_SRC bat :tangle bin/fx.cmd
     cd /d %~dp0\fx
     start /b firefox
   #+END_SRC

   #+BEGIN_SRC bat :tangle bin/tv.cmd
     cd /d %~dp0\teamviewer
     start /b teamviewer
   #+END_SRC

   #+BEGIN_SRC bat :tangle bin/kp.cmd
     cd /d %~dp0\keepass
     start /b keepass
   #+END_SRC

   #+BEGIN_SRC bat :tangle bin/ovpn.cmd
     cd /d %~dp0
     elevate openvpn --config hdhoang.ovpn
   #+END_SRC

* Secrets                                                             :crypt:
  :PROPERTIES:
  :header-args+: :comments no
  :END:
-----BEGIN PGP MESSAGE-----

hQEMA0GprIW1olW5AQf/YVCK5C8QR0ey3y55b/c9k1gSbk9M9uOdpfixv92EgFDN
uxGOEVGvWKpIVC3oC8Ce2nkIAlbrJisJHCZYDmXKYhF6RUWSIUlxK2TPQBE0Mo/c
YDsDRTNDsOAGQak2vT4bzHesxiZHwv6U+y/dDvUM/08lyfKL5BEAxOhOQexkGQ8+
pxgISLmKRBiQ5n4DECftksIJcXKlE+cNkUgQK5SBR8jNz3b9Xw2ccOB510/FYQoT
9gRq/DCu3I9JpMdNgPMw7yYZRhyOHXSK8znTyLn5291c2QImeeQgYPl9edY3L8Z8
m32zZR89SFCOfzyZ1sW6CqJXsBG7CBO6uzLner9vmdLsAYbKY4bOeg6KYWGnArks
tfnGM32k8AK8pMVq3LBKyS3VESOsDOJ0QVYciF91IQVML9RfQMEGI/YNx9nHT57K
XTX4jfbqot5i1u9rKBsl8+/y2gddev3UocT8kh7ggpHDwaAthbZPeM2Pq6zI8vF2
kmLOmDu1q1o/lIc9P3AZJTmNbrmhjwAWVnO4bS//B0/RE/wkvJBHSIIfDzeuxoya
ckXVE+Tb7OSVMcOX4gJaZ56SmBBf2THoNo35eehioLMuEvOZA/4wP1rKbGGNnRa5
Hd6c/V+7cDv3+tiZ0LYYp1HllrsXfkqQm3ylLVi8HG0fu9akzAKkfBgP7cpnOSHx
AigDQqrrX4gNK/mMaYvHKwLQn058gyTY4oQF3kE1AGv74w8zeR9jF8gh+y52BfEo
2EIk0UKQ1UGzQmrOZ4+7cK2090e2cbv23LrVrNjhV3oth47Qz5p4NXJTr3/GA7Kq
FqqrWKnIK4T9ZmUveVfYc855palyMVN0Qoj4l65EIzt9RPbTzVBaf1JvX+0oF5Fx
1Na4ETuxnr0paIdOOCY5MZ/urFgvEP9NcRaVtDjTwOvB6D+FVtHkGMYbonkMDWiS
tdcpos/LiBE8DuZhB0dbzVf4Eew864+WQhPXUMaDtm82sQkk/xKsI86IgSg7uVcd
O71V1alWKPAlenaz9qeh071353qGYGactmma4dBPqbVKj9qiasLOj7iO0vBho8Z4
h2Pc214NyAZVyeoyJbWl4TnlnLb1PGquWADgoLRSOEKk92P8xXVWObSQ29Mq0chJ
A9vrr1evD4r02+5HgdNMH0ILOd2z05E3PvgRvY/F/5fyW9FucWG2P3NJc0mFG6Qa
+SZmi23xwOhen71Rtwgt9udOwoBnGJobWqEYybGwh2Zgz9/a9zkUO3mvbIsXCDwv
EzCfIxQXF9rXWCHqD1QVsgZWe0JO/6EC29IQjlbA6Fu/axpR/3eUsqfKkv4rFjWP
dfyvOncPacNRDcn17LOfYMJTDy/ldPKGtUGW12WlQznUFUuRp9vr5FZ9YgNgFHs1
+Uv5Pm6x6wcZm+1/Yu90zKNDkZK2nxsf2i3zF4GfI0ea3Fq29FFkF6A+NcWXqglg
2NFpBstmtD7SrezwMW10g4pZbMqTg4KXHfuCF3t32wgeH1wgyu602n1c/VKbow18
kYwPEWKmHqbUIMeeb8SPoLeGtJUZRrcatWMn1YXrR+o6CXExJt26PwRVDB08mgIe
tTSMsfjPNyfogVF6TAkOPLYac5HY4y34wacy3DXzmirDzTJxH+Lr++5lxJQt2kTg
zrLgrN57ZmMFVM923J1m+FKjaJSfMcVqRYsix6fM0vGHAh048L+p0Hl/180G4MQa
9BJ9+6+eGfs82jSw8IpqO1sNYDoR6biZY4pEeT09WXAgvM915gpH3jnaBTVghCAT
QkJttIDuC/Bv9gCBfYyw1LzNWBVs21zrt1NufaLo2VE4LZaLUh6mPHxTUGYkdWwE
0L4hNae0fHUdmv8QG9Do/z/uxvhpALJKGfg5TSBTaVJZsYsd3H0FYiMw4o2hfzkc
uFpkWMD3qKnZUh+++5dMyyo/7lpccp4j8kEZzF0fRHIICCMK2LZ7xfG5qz4A8IJI
7zHI46ouDgxdFc7FrZaCzVx8BcCpeqoK+wGl7BETeC9/A16QAhpccyy8jazcs2e5
ka2yTHxOBflU5PgoNX3tg+TySwecL5/NYG6HVDD2hPJhtaLYRmpMTB/PwSNY9tf9
JQeuMEZ4VBxo4DC2zYghICcfHlvJE25iL1+kkoNZN/HyEWkjU5ybhxHaY/+zF22j
Wkc1mIq+hsNtP6q7UP4B7xSdx1ggBMiBPmYJLKE41Ax8vbbadoRz1uatqeMUMf2I
lSixd3l/B4aCQ2AMhkSooyE1pWwuDIfrVUbU3Yno55qlyxHVbZ2YhV1uW8QELm+o
dbY5FvMREYVptbrkEVeEhmbLhX9kE3VUASsvnBSd5J/VBmREwm+BC1sQw/tt+Nfw
BDp52oEmw8Z+vij3Kr2emFPQzQg1F1s7OiTW0SHNvi1k/PAqoP/no2rAnCP3fF9d
Jn+JZ0m8610vgGp0qYapK9jxC/7pQeA/5cDGFn3gYcEBPMD01faRBVtqgsS5aI5l
NYWirAccoTswa4dLpmzPMwxjB9bNYPvQH4NSmyuV4WYfaZuJojxMCwBsNvngBZyj
cHv/5U20ofyFXI1PLjZa+JJWA5iD5mOlCU1ptv+KPfyed0GGXOD4eZrYkU3XdDAU
WKaiIqdWGDm7f6hUWJTkvQCyIEd43wAmS3TErFlBWt4eZnPCOysSCh7NcOQaQ+CC
JjQOqgnFSI+GaafX5fObcinRCMRB8cKzzJXK7pV05XvTpraIDaY/WhFh1oXxYbUB
GpPf8jqGBSby8Byys3MAU7smXh6S4s5/45x3oiBSiUTMUU8xMGNgxMXNU6eGBw6h
nMINYd/cZIzt1t4aj/fGjr4yaC8rIW1WUdMkjcVl2iNXnM+QG9Q7gTtdEqDe/FeF
6hkuU8ZI2W1YSgfWl5yO7UlTsdHgC5UciP11XGs7dZFrI+I6/dOjHxr4TAnUb/5c
4aqFBDgdASQBIhY10c87EfQ0eIAJN4UzrEUhkTKILO7/0eAH3Zd5MZQzo7YnKHJH
9Y0r1czMfcmF57p9zMjJsTST3MOIGuor/mW4JGt9wZn6u95kKjBMNh8KuGp2JdDM
hLXl33edBgUXEgOrZwjFxtl7UFPFGVoN1u6bpDtUmtlA5UIyDZtsCDr9SbCN1NBs
VGfIZkQ7LkwMvQCLmZWJ/zBIsALAfRoaqbhviL+zpqUeW692cVoFwzIenbR1ywzF
dX1QOTkWqSRrbimE6MveqMb0w4qfdwmqoTN2L+wM2rdOX6xSpbu7bWzzUSUu5Ytt
yQH22iBWZr0EQWBiO7/FtI8QSBaGZAFYQgs0lMPqm9EUoiHPEWzIsGJRCUvskkc6
p0EcSxu4kLDvhxk4iG4XqmkTIk/ewHwXzivPMwIVtMj0cD7OxA8PdhgczJmOquzA
WOsuTZRjn38pI+iDs09BeWREb1PKdZUPaXx/52RDdZ+81V2VW7OM6szL/Wn+2rw/
I39UEyTOvNmw6nDTbi/2XTH624N5ht1aHHUyeDKwYKMzVYbGg6wyG+pXkr3/QjBj
sGRikORvhhIUt1oMaOwb1+MuAcmy75sVcbuzh3/RdT511VN2tDeBYnvfThAYWu/N
z2Z56yyp1IQ5CF3GbjmR7BhKpC6aBNvNe0TpQrkoVv7qVBvUoHSBZ6gEp4yk5rBo
FpQLNn82P0x8MN0E2kNSBfeUaybp9bfCnv0z5Z6JrdlHDuCiB9HpG2y67qryiSfV
RPr8lyZsHZXQyOL6DAx3jqwUoYa5gsS4WgLCJNtfxWF8V7Cl/fj99CTde2+mHllS
f/eKUBfmP+0DmHrQwsOuX/J5eCq/2W0hG6HqFW4XXBrN7ZaBNE91GFAb+iuib8kC
BxT1Ar8R9Kd8NZkuSqiRiL5luXchxXV/djtwFovK1iekVg1JB+X1vwKiM+9sFrW6
fO0n3K6SLC31Y9cv8AL6CAHz0GuWhrY7H0RIW50YWI65eh8+THX4RD2GjZvQ0o4i
DLbVWmkGBh3igm7NlFkDr7TqAdwlWioK4xWVER9w6zRlYXyOLwixa65oHU4rT4Je
TNoU020F/fokjZ3YwssXiomwbKFWa/Q8vY3ryXVk6a+8mCkL9Dkietag5WnuyT3w
Mh0VgNycgDdWXXBdr+aG1gpwd9cTBG4n6b/vpnO8IgIQ4IyGfait6W7zltDwKJY5
85VUXxQ1Xffetkv0Y7oSuU/XWzXNqWEjetwZHIBO+s7dOQnGp9QpiOV8rby6DLTW
QuelRD9XEDTIKeLBv4qOAMlzODVfXWooXUJ+Ujs2QbZqUw6bdyo5xh7CYk8IJ/2z
64vFWf5dFChb5wTjJJvQ8Nc0fL56+/jGXm3oqnWgCVvQ8jGcHsyHS6iu7l8QNef3
LdDpZ12ymVs47nb9gHVgcnhYAtFQrrFjP7If9CCY5ipVuPcsv8Y56rlYBJEaxm+w
NTFyVdT4wqYPPI6BIV+7e6+NvLCGQPwB6+RtM+Eaycf2VYLeBdypgRU66Z7McPF0
I++Sd6QH/u/4l6nChmrmVwXvasRuCXJPhk2fumNMu6AtZrGCn2DgiCoJ/cvrLnbi
k4M0IgRm+L7FvcZFVwxTr8MMcTy7BoH1GaVOnLayDGwiN7s7w8UDDDz5NLN12bre
NP++0/M4A+8qHLZmDrPCVl+Xy1TgwGg1lrHhcTmQFDpG3BBCfSefxfUs9dZgMx6a
qZML+1+RndZZVdhTEgwqpuplMeq1322Wc8rgI7Cl+/74T5ziyfdM8Yc7CTIeS3rR
dUdnHfv/BD8UsTF74v3dnMhWmhy8WfmwvlWAPwgyVIgbTvuEH6WeITtT9Tl/qE0i
WKJUB87UPq1WK5x3SIytkfdbmN2hp1dFIYR4fXgJOTqBpR6mmZ2DPzVjSx4AWT3h
wBR9V8vTIiedqn+0ESHnoK/SpYvGa9WMXKo/q4hXhmV7bhcqjnxP75mMiHZquvUE
A1nE7u8akO6ebPT3EhdGz5NiR2Tv/UuWBygqnb8PpMGfEytbFXL5PwoL51OuXN6D
Pr1eO8V1QMcM9nziZze+AjN7Shbnp6FEPhQsJ8gPm07z9pyWO34cMYJ6X99ki6bN
94vTpf6sK11TwFe9pK/3RPx9ok6GTT5CoJe3L8izIzqUFJNigFRQbDcTTAfj/lnb
BNDbipLnXj0zA/C0QhzDETXdbPz81mmuov1jkSG2wkdb1Px+wEYOVJqpjyISF4fY
DE213CTrOdqaJ7pk6qfbzWFA3CzqQWXH9sTZWhf77GLrsFsySlPssYE0IxQWMxSS
46c0chKEMXmMYPwVLGkrjwVaHWSV9KamvSX5R7usd+EsC1jl0oLYuxylVROoDfWk
E2c5qEXOf8L9lkF+rzKx6eBKog/X32gfiwHGd1zpHg9ve5gzaNI5WdHR/YIP/+U3
1m4VHjm3q+2VMGvN2tfKN+3tIzbSP8YUPF/AVnL1aW4URHMQsnisLgYahB8+jTmc
3wccg0wd1uHwCZE4ig2Oehr1n2wM+izA4cOx0HHp66oc61voiRiwqH+WXMUm0QLv
v3KZjd1p9U+XFP6juecU+xA75lenSttYnHbFdIGKl0jMDNbAad7NU8CJ5R5IBi2F
vsbZfDM+ucfve8EcntiW3gsTpl3580smXpRS4wP3nWcrwtB4imSoVm7WXRtlREVb
uyfyiKAhmKzx9XKvBs7BaEJ9/Sf8pAB05XeOJZcdsnLNlJ4/CNTZ9oT3sn6Y6aGq
wFvSES0mz4VtqVoHgJ7C1eIBGRZebfRq3K26O2eWKvnv7uyo3mdwZXm6iCX4YuLg
2Wwnuw8C/sbXUw0QCRkIUKnvbIa5dP5g74O3/nLOxA+oUbiVweNKyPYeKF/uxg4A
TsDiOSMs9mOGJvOtvAiARk1777psCJba3mLieZSy78RsxfUHTry+q30yU8bXWr+l
+9tIql5x33xi5pHZK+OC/RKakLaj8oQ8AobRIUvx7VIJARCJqt/+XZF029Zb2y1h
OAkkJBXo/9seJXQqVnz1RvL9plSOJDKkpiWXMic3Y9YmfcjnRBhvLHBEF8pjYl0j
MJA2i6zh9VVMabs5aqecvjcVlR93j1tBl/sFt6IhV/qkUQVU4lLNrQREbxQQKR6x
XyMCBz9j4U+viJGWRMooompKARbUY4+Co38OvVbTMqZ+8LrxwodmRfBvAVHTR8E5
WcoW/pDGv8dslKmFYLG3oZhl1t7JekEd3XOGF3fn1EpvX4Mvd0kyJTvS2r0nMq7C
npap8LouO6IsSQBtQGO2uJJ/2Ryox7LD5zAuy+kcOUTObtjpL8lfuire5mFxARO1
sp8gkvS75sk+gEfaCqiCYCLjdHokTlnsvTG6QRzG2R11oBFLt/MRaYUlCR25Or6A
oOdnyasvrh2phTZ2S9B9Ia0tvdrQUbfgUoG+xOYxgdVOQvfzsg==
=NOS4
-----END PGP MESSAGE-----
