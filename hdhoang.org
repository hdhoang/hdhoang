#+STARTUP: showall
#+PROPERTY: header-args+ :cache yes
#+PROPERTY: header-args+ :comments org
#+PROPERTY: header-args+ :mkdirp yes
#+PROPERTY: header-args+ :noweb yes
#+PROPERTY: header-args+ :results silent
#+PROPERTY: header-args+ :tangle-mode 384
#+PROPERTY: header-args:text+ :eval no
* Hoàng Đức Hiếu
  :PROPERTIES:
  :EXPORT_OPTIONS: toc:nil date:nil arch:nil num:nil author:nil email:t tags:nil
  :END:
#+EMAIL: 1988 / +84-166-241-9526 / cv@hdhoang.space
#+SELECT_TAGS: vi
#+LATEX_CLASS_OPTIONS: [twocolumn]
#+LATEX_HEADER: \usepackage{libertine}
#+LATEX_HEADER: \usepackage{xcolor-solarized, sectsty}
#+LATEX_HEADER: \usepackage[pagecolor={solarized-base3}]{pagecolor}
#+LATEX: \sectionfont{\color{solarized-blue}}
#+LATEX: \subsectionfont{\color{solarized-cyan}}
#+LATEX: \vspace*{-197pt}\includegraphics{Pictures/mug/img078}
#+LATEX_HEADER: \usepackage{titling}
#+LATEX_HEADER: \pretitle{\begin{flushright}\LARGE}
#+LATEX_HEADER: \posttitle{\par\end{flushright}}
#+LATEX_HEADER: \preauthor{\begin{flushright}}
#+LATEX_HEADER: \postauthor{\end{flushright}}
#+LATEX_HEADER: \pagenumbering{gobble}
** Education								 :en:
   - 2014 - now :: Studying System Administration and software testing
                   at Bachkhoa-Aptech (graduating 2016H2)
   - 2013 - 2014 :: Finished K12 and completed accounting course at
                    Quang Trung private school
   - 2007 - 2012 :: Self-learned various topics
     - Programming languages (Python, shells, HTML5, Emacs Lisp, Rust)
     - History of free software
     - Hanoi GNU/Linux user community
     - Wing-chun martial art
     - The constructed logical language Lojban
   - 2006 - 2007 :: Freshman in computer programming at Monash
                    College, Australia (earned Distinction and High
                    Distinction in most subjects)
   - 2003 - 2006 :: Chu Van An Highschool, majoring in English
#+LATEX: \newpage
** Tiểu sử								 :vi:
   - 2014 - nay :: học quản trị mạng và kiểm thử phần mềm tại
                   Bachkhoa-APTECH (dự kiến tốt nghiệp năm 2016)
#+LATEX: \newpage
** Qualifications and skills						 :en:
*** IT skills
   - In-depth GNU/Linux usage and administration, experienced in
     self-hosting web sites (ownCloud on Debian Apache, ArchLinux nginx)
   - Comprehensive network understanding (routing, firewall, encryption)
   - Using version control systems, especially git
   - Contributing to free software projects ([[https://www.openhub.net/accounts/hdhoang/positions][hdhoang on OpenHub]])
   - Office equipment troubleshooting
*** Language skills
   - Fluency in English (990 in TOEIC, 2015)
   - Elementary Japanese (N4 equivalent)
*** Others
   - Self-teaching discipline
   - Strong interest in learning new topics
** Kĩ năng								 :vi:
*** Kĩ năng IT
     - Sử dụng và quản trị các hệ thống GNU/Linux chuyên sâu, tự quản
       trị dịch vụ web (owncloud, Debian Apache, ArchLinux nginx)
     - Hiểu biết rõ hệ thống mạng (định tuyến, tường lửa)
     - Sử dụng hệ thống quản lí phiên bản, đặc biệt là git
     - Đóng góp vào các dự án phần mềm tự do ([[https://www.openhub.net/accounts/hdhoang][hdhoang trên OpenHub]])
     - Xử lý vấn đề các thiết bị văn phòng
*** Kĩ năng ngôn ngữ
     - Tiếng Anh thuần thục (TOEIC 990, 2015)
     - Tiếng Nhật cơ bản (tương đương N4)
** Interests								 :en:
   - Exploring science, history, and natural subjects
   - Science-fiction novels, rational fanfictions
   - Electric guitar riffs
   - Frequent blood donor until no longer eligible
** Sở thích								 :vi:
    - Khám phá các chủ đề khoa học, lịch sử, tự nhiên
    - Tiểu thuyết khoa học viễn tưởng, ???
    - Nghe solo guitar điện
    - Thường xuyên hiến máu cho đến khi hết khả năng

* Places and names
  #+NAME: username
  #+BEGIN_SRC text
    hdhoang
  #+END_SRC

  #+NAME: domain
  #+BEGIN_SRC text
    <<username>>.space
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs
    (setq user-mail-address "<<username>>@<<domain>>")
  #+END_SRC

  #+NAME: storage
  #+BEGIN_SRC text
    /home/<<username>>/sync
  #+END_SRC

  #+NAME: videos
  #+BEGIN_SRC text
    /home/<<username>>/Public/Videos
  #+END_SRC

  #+NAME: prefix
  #+BEGIN_SRC text
    10.117.14.
  #+END_SRC

  #+NAME: prefix6
  #+BEGIN_SRC text
    2001:470:36:62a::
  #+END_SRC

  #+NAME: system_ctl
  #+BEGIN_SRC text
    systemctl --system --no-pager
  #+END_SRC

  #+NAME: user_ctl
  #+BEGIN_SRC text
    systemctl --user --no-pager
  #+END_SRC

  #+NAME: pacman
  #+BEGIN_SRC text
    yaourt --noconfirm --needed
  #+END_SRC

  #+NAME: ytdl
  #+BEGIN_SRC text
    youtube-dl --format "[height <=? 480]" --output <<videos>>/"%(uploader)s %(upload_date)s %(title)s@%(id)s.%(ext)s"
  #+END_SRC

* Blog
  :PROPERTIES:
  :EXPORT_OPTIONS: toc:nil num:nil
  :END:

  #+BEGIN_SRC css :tangle ~/Public/blog.css
    body {
        background: #fdf6e3; color: #657b83;
        margin: 0 25%;
        line-height: 1.5;
    }
    pre {
        padding: 1em;
        border: dotted 1px #657b83;
        border-right: none;
    }
    .src-rust::before,
    .src-python::before {
        content: attr(class);
        display: block;
        float: right;
    }
  #+END_SRC

** hdhoang
   :PROPERTIES:
   :EXPORT_FILE_NAME: ~/Public/index
   :END:
   Elsewhere on the net:
   - realtime ::
     + [[https://telegram.me/hdhoang][Telegram]]
     + [[skype:lazni0][Skype]]
     + [[https://facebook.com/hdh000][Facebook]]
   - feeds ::
     + [[http://www.inoreader.com/stream/user/1005933915/tag/user-favorites][Inoreader]]
     + [[https://gitlab.com/u/hdhoang][GitLab]]
     + [[https://github.com/hdhoang?tab%3Dactivity][GitHub]]
     + [[http://www.last.fm/user/hdhoang][Last.fm]]
     + [[https://twitter.com/lasigmaz][Twitter]]
     + [[https://steamcommunity.com/id/lasigmaz][Steam]]
     + [[https://www.openhub.net/accounts/hdhoang][OpenHub]]
     + [[https://www.linkedin.com/in/hdhoang][LinkedIn]]

   I have a maybe-blog:
   - [[file:vanity-irc.org][Showing a custom hostname to Freenode]]
   - [[file:borrow-die.org][Borrow checker analogy]]
   - [[file:luser.org][Writing an IRC bot]]

** Consumption
*** <2016-01-18 Mon> Rạng Đông A55N2/5W (42,200đ)
** Borrow-checking with friends
   :PROPERTIES:
   :EXPORT_FILE_NAME: ~/Public/borrow-die
   :END:

   #+BEGIN_SRC rust :tangle ~/Public/die.rs
     #[derive(Debug)]
     enum D3 { One, Two, Three }
     impl D3 {
         fn peek(self: &D3, name: &str) {
             println!("{} sees that it's {:?}.", name, self);
         }
     }
   #+END_SRC

   Our main character, named Max, has a d3.

   #+BEGIN_SRC rust :tangle ~/Public/die.rs
     fn main() {
         print!("Hi, I'm Max. ");
         let mut die = D3::Two;
         die.peek("Max");
   #+END_SRC

   Max can rolls his die:

   #+BEGIN_SRC rust :tangle ~/Public/die.rs
         die = D3::One;
         die.peek("Max");
   #+END_SRC

   Max invites Alice and Bob over for a game of dice. The die is on the table and everyone can see what it's showing.

   #+BEGIN_SRC rust :tangle ~/Public/die.rs
         'table: loop {
             let bob = &die;
             bob.peek("Bob");
             die.peek("Everyone"); // same thing
             break 'table; // that's enough peeking for now
         }
    #+END_SRC

    It's Alice's turn, she picks up the die and rolls.

    #+BEGIN_SRC rust :tangle ~/Public/die.rs
         'alices_turn: loop {
             let alice = &mut die;
             *alice = D3::Three;
             alice.peek("Alice");
             break 'alices_turn;
         }
    #+END_SRC

    It lands on the table and now everyone sees what Alice rolled.

    #+BEGIN_SRC rust :tangle ~/Public/die.rs
         die.peek("Max");
     }
   #+END_SRC

   [[file:borrow-die.rs][Full code.]]
** Vanity plate on IRC
   :PROPERTIES:
   :EXPORT_FILE_NAME: ~/Public/vanity-irc
   :END:
*** Ingredients:
    - An IPv6 block whose PTR you can delegate (I use Hurricane Electric's [[https://tunnelbroker.net][tunnelbroker service]])
    - A hostname whose AAAA you can change (I'm using a full domain, hosted on [[https://cloudflare.com][CloudFlare]], but it should works [[https://freedns.afraid.org][with subdomains]])
    - I'm using a Debian machine to connect to Freenode
*** Recipes:
    1. Request an IPv6 tunnel with HE
    2. Delegate its rDNS to [[https://dns.he.net][dns.he.net]]
    3. Match forward and reverse DNS between an address and your hostname:

       #+BEGIN_SRC sh :results replace
         bash -c 'diff <(nslookup test-plate.hdhoang.space.) <(nslookup 2001:470:36:62a::cccc)'
       #+END_SRC

       #+RESULTS[b43b6d2d898df8156aa60d0405a8b2f68660f12d]:

       - Choose an address, point it to your hostname
       - Add the address to the hostname's AAAA records
    6. Connect to Freenode with that address as the source, for example:

       #+BEGIN_SRC sh
         for fn in $(dig +short -t aaaa chat.freenode.net); do
             ip -6 route add $fn src $address dev $tunnel_interface;
         done;

       #+END_SRC
       or

       #+BEGIN_SRC sh
         ip -6 route replace default src $address dev $tunnel_interface
       #+END_SRC

** IRC bot
   :PROPERTIES:
   :EXPORT_FILE_NAME: ~/Public/luser
   :END:
   [[irc:chat.freenode.net/#vnluser][#vnluser]] used to have a bot to grab link titles and search google.
   It didn't work very well with Vietnamese characters, so it was
   retired. Here's a replacement in rust and python. Its name is

   #+NAME: botname
   #+BEGIN_SRC text
     luser
   #+END_SRC

   There are several things it could improve on:
    - [X] Handle gzip responses (news.zing.vn and baomoi.com): These
      sites always return gzip-encoded HTML, even when Accept-Encoding
      doesn't list it. You can check by comparing =curl= vs =curl
      --compressed=.
    - [ ] Configurable multiple channels support, possibly as
      commandline arguments, should also set owners.
    - [ ] Reading secrets from files: API keys, identify passwords,
      channel passwords.
    - [ ] Tests: It would be difficult to interface with IRC servers,
      but at least the handling functions should be tested.
    - [ ] CLI interface: Like chatbot's, this will speed up testing.
    - [X] NYtimes access: The cookie needs to be periodically rebaked.
      Theoretically cloaking as googlebot should work.
    - [ ] Pod titles in rust: Quick-xml doesn't return the attributes
      iterator currently.
    - [ ] Reconnection on ping timeout: [[https://github.com/aatxe/irc/blob/46f9136c93063e8abb01b063df53897615007791/src/client/server/mod.rs#L208][IrcServer should already
      reconnect automatically]], but possibly ipv6 tunneling is
      interfering.

   Compilation to ARMv7 is a bit tricky:

    1. Set up [[https://github.com/japaric/rust-cross][cross-compilation toolchain]]
    2. Copy the target's =/usr/include/openssl=, =lib{crypto,ssl,z}.so= to $PWD
    3. Run cargo with:
       #+BEGIN_SRC sh
         TARGET_CFLAGS="-I $PWD" cargo rustc --release --target armv7-unknown-linux-gnueabihf -- -C linker=arm-linux-gnueabihf-gcc -lz -L $PWD
       #+END_SRC
    4. Copy =target/armv7-unknown-linux-gnueabihf/release/luser= to the target

   You can run tests for the python version:

   #+NAME: doctest_luser
   #+BEGIN_SRC sh
     python -m doctest ~/Public/<<botname>>.py
   #+END_SRC

   Now on to the code. Unfortunately, tangling from this Org source
   loses indentations, so the python code can't be commented on line
   by line. Here are the API keys and rust build setup:

   #+NAME: wolframalpha_key
   #+BEGIN_SRC text
     3JEW42-4XXE264A93
   #+END_SRC

   #+NAME: yandex_key
   #+BEGIN_SRC text
     trnsl.1.1.20160210T093900Z.c6eacf09bbb65cfb.cc28de2ba798bc3bc118e9f8201b6e6cea697810
   #+END_SRC

   #+BEGIN_SRC conf :tangle ~/Public/luser.toml
     [package]
     name = "<<botname>>"
     version = "0.1.0"
     authors = ["Hoàng Đức Hiếu <<username>>@<<domain>>"]

     [dependencies]
     irc = "*"
     scraper = "*"
     hyper = "*"
     regex = "*"
     quick-xml = "*"
     rustc-serialize = "*"
     url = "*"
   #+END_SRC

   Importing dependencies. Python really comes with batteries.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     extern crate regex;
     extern crate irc;
     extern crate scraper;
     extern crate hyper;
     extern crate quick_xml;
     extern crate rustc_serialize;
     extern crate url;

     use regex::Regex;
     use irc::client::prelude::{IrcServer, Server, ServerExt, Config, Command, Response};
     use hyper::client::Client;
     use std::io::Read;
     use std::collections::HashMap;
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py :shebang #!/usr/bin/env python3
     # -*- coding: utf-8 -*-
     # external batteries
     from bs4 import BeautifulSoup
     from irc import bot

     from collections import defaultdict
     from random import randint
     from gzip import GzipFile
     import xml.etree.ElementTree as ET
     import json
     import sys
     import os

     if sys.version_info.major == 3:
         from urllib.request import urlopen, build_opener, HTTPCookieProcessor
         from urllib.parse import quote
         from http.client import HTTPConnection
         import html.parser as h
     else:
         from urllib2 import urlopen, quote, build_opener, HTTPCookieProcessor
         from httplib import HTTPConnection
         from StringIO import StringIO
         from HTMLParser import HTMLParser
         h = HTMLParser()
         reload(sys)
         sys.setdefaultencoding('utf8')
   #+END_SRC

   Set up logging.

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     import logging
     import logging.handlers
     logger = logging.getLogger(__file__)

     def setup_logging(filename, path=None, verbose=False):
         if not path:
             path = os.path.dirname(os.path.realpath(__file__))
         file_log = logging.handlers.TimedRotatingFileHandler(
             os.path.join(path, filename),
             when="midnight",
             backupCount=31)
         file_log.setLevel(logging.DEBUG if verbose else logging.INFO)
         file_log.setFormatter(logging.Formatter(
             '%(asctime)-15s (%(name)s) %(message)s'))
         logger.addHandler(file_log)
   #+END_SRC

   Set up connection details. People should claim their names here.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     const NAME: &'static str = "<<botname>>";
     fn main() {
         let freenode = IrcServer::from_config(Config {
                            owners: Some(vec![env!("USER").into()]),
                            nickname: Some(NAME.into()),
                            alt_nicks: Some((0..10).map(|n| format!("{}-{}", NAME, n)).collect()),
                            server: Some("chat.freenode.net".into()),
                            port: Some(8000),
                            channels: Some(vec![format!("#vn{}", NAME), format!("#{}-test", NAME)]),
                            ..Default::default()
                        })
                            .unwrap();
         freenode.identify().unwrap();
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     NAME = "<<botname>>"
     <<botname>> = bot.SingleServerIRCBot([("chat.freenode.net", 8000)], NAME, NAME)

     def main():
         setup_logging("<<botname>>.log")
         <<botname>>.start()

     def change_nick(c, e):
         new_nick = '{}-{}'.format(NAME, str(randint(0, 9)))
         print("Changing nick to", new_nick)
         c.nick(new_nick)
     <<botname>>.on_nicknameinuse = change_nick

     <<botname>>.on_nickcollision = lambda c, _: c.reconnect()

     def join_channels(c, e):
         c.join("#{}-test".format(NAME))
         c.join("#vn" + NAME)
     <<botname>>.on_welcome = join_channels
   #+END_SRC

   Handling scaffolding

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
         let get_title = &get_title;
         let wolframalpha = &wolframalpha;
         let google = &google;
         let translate = &translate;
         let handlers = [Handler(Regex::new(TITLE_REGEX).unwrap(), get_title),
                         Handler(Regex::new(WA_REGEX).unwrap(), wolframalpha),
                         Handler(Regex::new(GOOGLE_REGEX).unwrap(), google),
                         Handler(Regex::new(TRANSLATE_REGEX).unwrap(), translate)];

   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def handling(c, e):
         return <<botname>>s[len(e.source) % len(<<botname>>s)] == c.get_nickname()

     def handle(c, e, msg):
         try:
             titles = title(msg)
             if titles and handling(c, e):
                 c.privmsg(e.target, titles)
             if msg[0] not in ('.', '!', ':'): return
             if msg[1:6] == 'tell ':
                 source = e.source.nick
                 (target, _, line) = msg[6:].partition(' ')
                 return relay_msg[target.lower()].append((source, line))
             reply = ''
             if msg[1:3] == 'g ':
                 reply = google(msg[3:])
             if msg[1:4] == 'wa ':
                 reply = wolframalpha(msg[4:])
             if msg[1:4] == 'tr ':
                 (lang, _, text) = msg[4:].partition(' ')
                 reply = translate(lang, text)
             if reply:
                 # Keep PRIVMSG under 512bytes
                 c.privmsg(e.target, reply[:512 - len(e.target) - 50])
         except Exception as e:
             logger.error('"%s" causes: %s' % (msg, str(e)))
   #+END_SRC

   List other lusers, and update that list when one joins or quits.
   This list is used by the lusers to decide whether to handle
   unaddressed messages. If the length of the IRC prefix
   'nick!user@host' for a message indexes to its name, that luser
   responses.

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     <<botname>>s = []
     def list_<<botname>>s(c, e):
         for <<botname>> in filter(lambda n: n.startswith(NAME),
                                   e.arguments[-1].split(' ')):
             if <<botname>> not in <<botname>>s:
                 <<botname>>s.append(<<botname>>)
         <<botname>>s.sort()
     <<botname>>.on_namreply = list_<<botname>>s
   #+END_SRC

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
         let mut last_lines = HashMap::new();
         let mut <<botname>>s = vec![];
         'messages: for message in freenode.iter() {
             let msg = message.unwrap();
             if let Command::Response(Response::RPL_NAMREPLY, _, Some(ref names)) = msg.command {
                 <<botname>>s.extend(names.split(' ')
                                    .filter(|n| n.starts_with(NAME))
                                    .map(String::from));
                 <<botname>>s.sort();
                 <<botname>>s.dedup();
                 if !<<botname>>s.contains(&freenode.current_nickname().into()) {
                     let _ = freenode.reconnect();
                 }
                 continue 'messages;
             }
             if let Some(nick) = msg.source_nickname() {
   #+END_SRC

   Ignore bots and freenode

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
                 if nick.contains("bot") || nick.contains("freenode") {
                     continue 'messages;
                 }
   #+END_SRC

   Update <<botname>>s list

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
                 if nick.starts_with(NAME) {
                     let nick = String::from(nick);
                     match msg.command {
   #+END_SRC

   Do not merge the following arms. Otherwise a join #c1 -> insert ->
   join #c2 -> remove sequence might happen.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
                         Command::JOIN(..) => {
                             if let Err(idx) = <<botname>>s.binary_search(&nick) {
                                 <<botname>>s.insert(idx, nick)
                             }
                         }

   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     relay_msg = defaultdict(list) # dict<nick.lower(), [(source, line)]>
     def relay(c, target, nick):
         for (source, line) in relay_msg[nick.lower()]:
             c.privmsg(target, "{}: <{}> {}".format(nick, source, line))
         del relay_msg[nick.lower()]
     <<botname>>.on_nick = lambda c, e: relay(c, "#vn<<botname>>", e.target)
   #+END_SRC

   The next lambdas are abusing python logical operator, but they read
   like English.

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def <<botname>>_joins(e):
         if e.source.nick not in <<botname>>s:
             <<botname>>s.append(e.source.nick)
             <<botname>>s.sort()

     def on_join(c, e):
         nick = e.source.nick
         if nick.startswith(NAME):
             return <<botname>>_joins(e)
         relay(c, e.target, nick)
     <<botname>>.on_join = on_join
   #+END_SRC

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
                         Command::QUIT(..) => {
                             if let Ok(idx) = <<botname>>s.binary_search(&nick) {
                                 <<botname>>s.remove(idx);
                             }
                         }
                         _ => (),
                     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     <<botname>>.on_quit = lambda c, e: e.source.startswith(NAME) and <<botname>>s.remove(e.source.nick)
   #+END_SRC

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
                     continue 'messages;
                 }
             }
   #+END_SRC

   Actual message processing. Ignore the other lusers.

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     last_lines = defaultdict(list) # dict<nick, line>
     def on_pubmsg(c, e):
         nick = e.source.nick
         if nick.startswith(NAME): return
         my_nick = c.get_nickname()
         msg = e.arguments[0]
         if msg == "report!":
             return c.privmsg(e.target, report())
         if msg.startswith('s/'):
             parts = msg.split('/')
             if (len(parts) >= 3 and handling(c, e)
                 and parts[1] in last_lines[nick]):
                 return c.privmsg(e.target, "{} meant: {}".format(
                     nick, last_lines[nick].replace(parts[1], parts[2])))
         else:
             last_lines[nick] = msg
         addressed = msg.startswith(my_nick)
         if addressed or handling(c, e) or 'http' in msg:
             if addressed:
                 msg = msg[len(my_nick) + 2:]  # remove addressing
                 if msg.startswith('quit'): sys.exit()
                 if msg.startswith('reload'):
                     os.execl(sys.executable, sys.executable, __file__)
             handle(c, e, msg)
     <<botname>>.on_pubmsg = on_pubmsg
   #+END_SRC

   =trimmed_line= is here to hoist the trimmed line out of its
   assignment block. Rust: the compiler knows better than you do.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
             let channel;
             let trimmed_line;
             let mut line;

             if let Command::PRIVMSG(ref target, ref message) = msg.command {
                 channel = target;
                 line = message
             } else {
                 continue 'messages;
             }

             if line == "report!" {
                 freenode.send(Command::PRIVMSG(channel.clone(),
                                                format!("operated by {} with source code {}",
                                                        freenode.config()
                                                                .owners
                                                                .as_ref()
                                                                .map(|v| v.join(", "))
                                                                .unwrap_or("someone anonymous"
                                                                               .into()),
                                                        post_source_code())))
                         .unwrap();
                 continue 'messages;
             }
             if line.starts_with("s/") {
                 let parts = line.split('/').collect::<Vec<_>>();
                 if parts.len() < 3 {
                     continue 'messages;
                 }
                 if let Some(old_line) = last_lines.get(&msg.source_nickname().map(String::from)) {
                     if <<botname>>s[msg.prefix.clone().unwrap().len() % <<botname>>s.len()] ==
                        freenode.current_nickname() {
                         freenode.send(Command::PRIVMSG(channel.clone(),
                                                        format!("{} meant to say \"{}\"",
                                                                msg.source_nickname().unwrap(),
                                                                (old_line as &str)
                                                                    .replace(parts[1], parts[2]))))
                                 .unwrap();
                     }
                 }
             } else {
                 last_lines.insert(msg.source_nickname().map(String::from), line.clone());
             }

             let addressed = line.starts_with(freenode.current_nickname());
             if addressed ||
                <<botname>>s[msg.prefix.unwrap().len() % <<botname>>s.len()] == freenode.current_nickname() {
                 if addressed {
                     trimmed_line = line[freenode.current_nickname().len() + 2..].into();
                     line = &trimmed_line;
                 }
                 'handling: for h in &handlers {
                     if h.can_handle(line) {
                         match h.run(line) {
                             Err(e) => println!("{:?} causes {:?}", line, e),
                             Ok(reply) => {
                                 if !reply.is_empty() {
                                     freenode.send(Command::PRIVMSG(channel.clone(), reply)).unwrap();
                                     continue 'messages;
                                 }
                             }
                         }
                     }
                 }
             }
         }
     }
   #+END_SRC

   Rust handler scaffolding: casting into a common =Error= type and
   associating regexes with their handling function. Rust is
   surprisingly more object-happy than python.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     #[derive(Debug)]
     enum Error {
         Data(String),
         Io(std::io::Error),
         Hyper(hyper::error::Error),
         Xml(quick_xml::error::Error),
         Json(rustc_serialize::json::ParserError),
     }

     struct Handler<'a>(Regex, &'a (Fn(&Regex, &str) -> Result<String, Error>));
     impl<'a> Handler<'a> {
         fn can_handle(&self, line: &str) -> bool {
             self.0.is_match(&line)
         }
         fn run(&self, line: &str) -> Result<String, Error> {
             self.1(&self.0, &line)
         }
     }
   #+END_SRC

   Get title from URLs. The rust version only grabs the first URL in
   each message. Some domains with uninteresting titles are ignored:

   #+NAME: uninteresting
   #+BEGIN_SRC text
     "smbc-comics.com/", "libgen.io/", "xkcdb.com/"
   #+END_SRC

   #+NAME: uninteresting_titles
   #+BEGIN_SRC text
     "XKCDB: The: The #xkcd Quote Database", "Saturday Morning Breakfast Cereal", "Library Genesis"
   #+END_SRC

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     const TITLE_REGEX: &'static str = r"https?:[^\s]+";
     fn get_title(regex: &Regex, line: &str) -> Result<String, Error> {
         use hyper::header::{UserAgent, Cookie, CookiePair};
         use scraper::{Html, Selector};

         let url = regex.captures(&line).unwrap().expand("$0");
         if [<<uninteresting>>].iter().any(|domain| url.contains(domain)) {
             return Ok(String::new());
         }
         let mut response = try!(Client::new()
                                 .get(&url)
                                 .header(UserAgent("Firefox".into()))
                                 .header(Cookie(vec![CookiePair::new(// cookie to access NYtimes articles
                                     "NYT-S".into(),
                                     "0MOTYRtE4oUSHDXrmvxADeHEluv5kUWdpUdeFz9\
                                      JchiAKuaKkdl/6loIV.Ynx4rkFI"
                                         .into())]))
                                 .send()
                                 .map_err(Error::Hyper));
         let mut body = [0; 50_000];
         response.read_exact(&mut body).ok();
         if let Some(title_elem) = Html::parse_fragment(&String::from_utf8_lossy(&body))
                                       .select(&Selector::parse("title").unwrap())
                                       .next() {
             Ok(title_elem.first_child()
                          .unwrap()
                          .value()
                          .as_text()
                          .unwrap()
                          .replace("\n", " ")
                          .trim()
                          .into())
         } else {
             Err(Error::Data("Response has no title".into()))
         }
     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def title(text):
         """
         Retrieve titles from URL in text.

         >>> len(title('no url here'))
         0

         TODO This case should ignore the 404.
         >>> print(title('https://hdhoang.space/404 https://hdhoang.space/')) # doctest: +IGNORE_EXCEPTION_DETAIL
         Traceback (most recent call last):
           ...
         urllib.error.HTTPError: HTTP Error 404: Not Found

         >>> print(title('https://hdhoang.space/luser.html https://hdhoang.space/luser.html'))
         IRC bot / IRC bot

         >>> print(title('http://www.nytimes.com/2016/01/26/business/marvin-minsky-pioneer-in-artificial-intelligence-dies-at-88.html'))
         Marvin Minsky, Pioneer in Artificial Intelligence, Dies at 88 - The New York Times

         >>> print(title('http://www.baomoi.com/bao-nhieu-tan-bot-trung-quoc-da-duoc-nhap-ve-lam-tra-o-long-tea-plus/c/18486151.epi'))
         Bao nhiêu tấn bột Trung Quốc đã được nhập về làm trà Ô long TEA Plus? - GĐ&XH;

         >>> print(title('http://news.zing.vn/chi-tiet-ban-do-cam-duong-dip-29-o-ha-noi-post574142.html'))
         Chi tiết bản đồ cấm đường dịp 2/9 ở Hà Nội - Thời sự - Zing.vn

         >>> print(title('https://www.facebook.com/photo.php?fbid=261863914155282&set=a.261860180822322.1073742015.100009950253866&type=3&theater')) # doctest: +ELLIPSIS
         Vo Thanh Thuy - Vo Thanh Thuy ... | Facebook

         >>> print(title('https://imgur.com/M18GYfw?r https://imgur.com/GUFyoUa?r'))
         Glorious new key cap set for my work keyboard! - Imgur
         """
         uninteresting = [<<uninteresting_titles>>]
         titles = []
         urls = filter(lambda w: w.startswith('http'), text.split())
         for u in urls:
             request = build_opener(HTTPCookieProcessor())
             request.addheaders = [('Accept-Encoding', 'gzip'), ('User-Agent', 'Mozilla/5.0')]
             response = request.open(u)
             if response.info().get('Content-Encoding') == 'gzip':
                 if sys.version_info.major == 3:
                     response = GzipFile(fileobj=response)
                 else:
                     response = GzipFile(fileobj=StringIO(response.read()))
             title = BeautifulSoup(response.read(50000), 'html.parser').title
             response.close()
             if (title
                 and 'Imgur:' not in title.string
                 and title.string not in uninteresting):
                 titles.append(title.string.replace('\n', '').strip())
         return ' / '.join(titles)
   #+END_SRC

   Ask Wolfram|Alpha, the knowledge engine.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     const WA_REGEX: &'static str = concat!(r"^(\.|!|:)", "wa (?P<query>.+)");
     fn wolframalpha(regex: &Regex, line: &str) -> Result<String, Error> {
         use hyper::header::ContentLength;
         use quick_xml::{XmlReader, Event};

         let mut response = try!(Client::new()
                                     .get(&regex.captures(&line)
                                                .unwrap()
                                                .expand("http://api.wolframalpha.\
                                                         com/v2/query?format=plaintext&appid=\
                                                         <<wolframalpha_key>>&input=$query"))
                                     .send()
                                     .map_err(Error::Hyper));
         let mut xml =
             String::with_capacity(**response.headers.get::<ContentLength>().unwrap() as usize);
         try!(response.read_to_string(&mut xml).map_err(Error::Io));
         let tree = XmlReader::from_str(&xml).trim_text(true);
         let mut answers = vec![];
         for event in tree {
             match event {
                 Ok(Event::Start(ref elem)) if elem.name() == b"pod" => {
                     answers.push(String::from_utf8(try!(elem.attributes()
                                                             .next()
                                                             .unwrap()
                                                             .map_err(Error::Xml))
                                                        .1
                                                        .into())
                                      .unwrap() + ": ")
                 }
                 Ok(Event::Text(elem)) =>{
                     answers.push(try!(elem.into_string().map_err(Error::Xml)) + " /")
                 }
                 _ => (),
             }
         }
         Ok(answers.join(" "))
     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def wolframalpha(text):
         """
         Query WolframAlpha about text.

         >>> print(wolframalpha('mass of sol'))
         Input interpretation: Sun | mass / Result: 1.988435×10^30 kg  (kilograms) / Unit conversions: 4.383749×10^30 lb  (pounds) / 2.191874×10^27 sh tn  (short tons) / 1.988435×10^33 grams / 1 M_☉  (solar ma http://wolframalpha.com/?input=mass%20of%20sol

         Check URL encoding:
         >>> print(wolframalpha('4+6'))
         Input: 4+6 / Result: 10 / Number name: ten / Number line: Manipulatives illustration:  | + |  |  |  4 |  | 6 |  | 10 / Typical human computation times: age 6:  5.3 seconds  |  age 8:  2.6 seconds  |  age 10:  1.7 seconds  |   age 18:  0.93 seconds (ignoring concentration, repetition, variations in education, etc.) / 

         >>> print(wolframalpha('é'))
         Input interpretation: é  (character) / Visual form: Name: Latin small letter e with acute / Positions in alphabets: Czech | 9th letter (33rd letter from the end) Slovak | 12th letter (35th letter from http://wolframalpha.com/?input=%C3%A9
         """
         r = urlopen(
             'http://api.wolframalpha.com/v2/query?format=plaintext&appid=<<wolframalpha_key>>&input='
             + quote(text))
         tree = ET.parse(r)
         reply = ''
         for n in tree.iter():
             if n.tag == 'pod':
                 reply += n.attrib['title'] + ': '
             if n.tag == 'plaintext' and n.text and len(n.text.strip()):
                 reply += n.text + ' / '
         if len(reply) > 512:
             reply = reply[:200] + " http://wolframalpha.com/?input=" + quote(text)
         r.close()
         return reply.replace('\n', ' ')
   #+END_SRC

   Returns the first Google result.

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     const GOOGLE_REGEX: &'static str = concat!(r"^(\.|!|:)", "g (?P<query>.+)");
     fn google(regex: &Regex, line: &str) -> Result<String, Error> {
         use rustc_serialize::json::Json;
         // API: https://developers.google.com/web-search/docs/#code-snippets
         let mut response = try!(Client::new()
                                     .get(&regex.captures(&line)
                                                .unwrap()
                                                .expand("https://ajax.googleapis.\
                                                         com/ajax/services/search/web?v=1.\
                                                         0&rsz=1&q=$query"))
                                     .send()
                                     .map_err(Error::Hyper));
         let json = try!(Json::from_reader(&mut response).map_err(Error::Json));
         let results = try!(json.search("results").ok_or(Error::Data("No results".into())));
         if results.as_array().unwrap().is_empty() {
             return Ok("No results".into());
         }
         let url = try!(results[0]
                            .find("unescapedUrl")
                            .ok_or(Error::Data("No url".into()))
                            .map(|j| j.as_string().unwrap()));
         let title = try!(results[0]
                              .find("titleNoFormatting")
                              .ok_or(Error::Data("No title".into()))
                              .map(|j| j.as_string().unwrap()));
         Ok(format!("{} {}", title, url))
     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def google(text):
         """
         Retrieve the first result from a google for text.

         >>> print(google('á'))
         Á - Wikipedia, the free encyclopedia https://en.wikipedia.org/wiki/%C3%81

         >>> print(google('trump south-china sea'))
         Donald Trump weighs in on China's island-building in the South ... http://www.politifact.com/truth-o-meter/statements/2016/apr/04/donald-trump/donald-trump-weighs-chinas-island-building-south-c/

         >>> print(google('naesuth no result here'))
         0 result
         """
         r = urlopen(
             'https://ajax.googleapis.com/ajax/services/search/web?v=1.0&rsz=1&q=' +
             quote(text))
         data = json.loads(r.read().decode())['responseData']
         r.close()
         if not data['results']:
             return '0 result'
         return h.unescape(data['results'][0]['titleNoFormatting']) + \
         ' ' +  data['results'][0]['unescapedUrl']
   #+END_SRC

   Translates using [[https://tech.yandex.com/translate/doc/dg/reference/translate-docpage/][Yandex]]:

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     const TRANSLATE_REGEX: &'static str = concat!(r"^(\.|!|:)", "tr (?P<lang>[^ ]+) (?P<text>.+)");
     fn translate(regex: &Regex, line: &str) -> Result<String, Error> {
         use rustc_serialize::json::Json;
         let mut response = try!(Client::new()
                                     .get(&regex.captures(&line)
                                                .unwrap()
                                                .expand("https://translate.yandex.\
                                                                  net/api/v1.5/tr.\
                                                                  json/translate?key=<<yandex_key>>&text=$text&\
                                                                  lang=$lang"))
                                     .send()
                                     .map_err(Error::Hyper));
         let json = try!(Json::from_reader(&mut response).map_err(Error::Json));
         let reply = match json.find("code").unwrap().as_u64().unwrap() {
             200 => {
                 format!("{}: {}",
                         json.find("lang").unwrap().as_string().unwrap(),
                         json.find("text").unwrap()[0].as_string().unwrap())
             }
             501 => json.find("message").unwrap().as_string().unwrap().into(),
             _ => format!("{:?}", json.as_string()),
         };
         Ok(reply)
     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def translate(direction, text):
         """
         Translate text according to direction.

         >>> print(translate('la-en', 'ad astra per aspera'))
         la-en: to the stars through rough

         >>> print(translate('vi', "you think you're good?"))
         en-vi: ngươi nghĩ ngươi giỏi không?

         >>> print(translate('en', 'mày nghĩ mày ngon?'))
         vi-en: you think you're so tough?

         >>> print(translate('jbo', 'hello')) # doctest: +IGNORE_EXCEPTION_DETAIL
         Traceback (most recent call last):
           ...
         urllib.error.HTTPError: HTTP Error 400: BAD REQUEST
         """
         if not text:
             return 'Missing text'
         r = urlopen(
             'https://translate.yandex.net/api/v1.5/tr.json/translate?key=<<yandex_key>>&text={}&lang={}'
             .format(
                 quote(text), direction))
         data = json.loads(r.read().decode())
         r.close()
         return data['lang'] + ": " + data['text'][0]
   #+END_SRC

   Posts its own source code:

   #+BEGIN_SRC rust :tangle ~/Public/luser.rs
     fn post_source_code() -> String {
         use url::form_urlencoded;
         let form = [("read:1", "3"),
                     ("name:1", "main.rs"),
                     ("f:1", include_str!("main.rs")),
                     ("read:2", "3"),
                     ("name:2", "Cargo.toml"),
                     ("f:2", include_str!("../Cargo.toml"))];
         let result = Client::new()
                          .post("http://ix.io")
                          .body(&form_urlencoded::serialize(form.iter()))
                          .send();
         match result {
             Ok(mut response) => {
                 let mut reply = String::new();
                 let _ = response.read_to_string(&mut reply);
                 reply.replace('\n', " ")
             }
             Err(e) => format!("unable to post: {:?}", e),
         }
     }
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     def report():
         """
         Return owner and source code

         >>> print(report()) # doctest: +ELLIPSIS
         operated by ... with source code http://ix.io/...
         """
         conn = HTTPConnection('ix.io')
         conn.request(
             'POST', '/',
             'read:1=3&name:1=<<botname>>.py&f:1=' + quote(open(__file__).read()))
         return "operated by {} with source code {}".format(
                 os.getenv('USER'), conn.getresponse().read().decode().strip())
   #+END_SRC

   #+BEGIN_SRC python :tangle ~/Public/luser.py
     if __name__ == '__main__':
         main()
   #+END_SRC

* OpenVPN
  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S openvpn
  #+END_SRC

  #+NAME: openvpn_common
  #+BEGIN_SRC conf
    dev tun
    topology subnet
    persist-key
    persist-tun
    keepalive 10 30
    tls-version-min 1.2
    tls-cipher TLS-DHE-RSA-WITH-AES-128-CBC-SHA
    <tls-auth>
    <<ta_key>>
    </tls-auth>
    <ca>
    -----BEGIN CERTIFICATE-----
    MIIEYTCCA0mgAwIBAgIJAPxrcItU3yz8MA0GCSqGSIb3DQEBCwUAMH0xCzAJBgNV
    BAYTAlZOMQswCQYDVQQIEwJITjEOMAwGA1UEBxMFSGFOb2kxDTALBgNVBAoTBHph
    aGUxEDAOBgNVBAMTB3phaGUgQ0ExEDAOBgNVBCkTB3phaGUubWUxHjAcBgkqhkiG
    9w0BCQEWD2hkaG9hbmdAemFoZS5tZTAeFw0xNTA5MjYxMTM0NTRaFw0yNTA5MjMx
    MTM0NTRaMH0xCzAJBgNVBAYTAlZOMQswCQYDVQQIEwJITjEOMAwGA1UEBxMFSGFO
    b2kxDTALBgNVBAoTBHphaGUxEDAOBgNVBAMTB3phaGUgQ0ExEDAOBgNVBCkTB3ph
    aGUubWUxHjAcBgkqhkiG9w0BCQEWD2hkaG9hbmdAemFoZS5tZTCCASIwDQYJKoZI
    hvcNAQEBBQADggEPADCCAQoCggEBANXOfdISWeotIr3neKpj6IGBlCLMEBNtMB1r
    bTIgkxe9tnNd4jBufq6duLK91ioqcJiAxMLRovYtaRTOpQit5/PnAm2Iwu3u2mGX
    EftWEBSVt437NMVA6L2Jemv1lp81vmzJIODgPQ9elrNteQ3ccAMCpuj/l6PhGeFq
    JvK+dNIJcm2+xM15S6ESwjsZxwijiT3TMJAjXJPC5R3gpULoTHrphPGrS/0RIq9c
    Bd/+4Q7k1MguPK2XSKHiJnUIkQJ/m/XGT2iXVEzhOsHZ8vlaNq1xBzTko10nEb7I
    sOQjuH4GCZMeoYnF3egg534fg+BYPAecuKglqdIpnm4+syJsrR0CAwEAAaOB4zCB
    4DAdBgNVHQ4EFgQUsDCM7/aJ6AjPVQPEbdDTiTa9WIswgbAGA1UdIwSBqDCBpYAU
    sDCM7/aJ6AjPVQPEbdDTiTa9WIuhgYGkfzB9MQswCQYDVQQGEwJWTjELMAkGA1UE
    CBMCSE4xDjAMBgNVBAcTBUhhTm9pMQ0wCwYDVQQKEwR6YWhlMRAwDgYDVQQDEwd6
    YWhlIENBMRAwDgYDVQQpEwd6YWhlLm1lMR4wHAYJKoZIhvcNAQkBFg9oZGhvYW5n
    QHphaGUubWWCCQD8a3CLVN8s/DAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUA
    A4IBAQAKkiDOWmwu1D+qbCSYaSxiMfJ70FyA/o+AuCDeaGxKdFLZ2JQgYK/az3y8
    tGQKBc6AdUY7BoN1Ab/6TOz+hWvmyNOOvq2AMgt2bHHA+JquRZMdgw59OtbB2BjC
    vBs2cxRJWdmv8aSltcqVpm2HNHy3mzcq8i0CdFluxDV+zQmvhGVypAipYTlhdi0l
    KLJlB+3fqS5GQB0wPmkV2N6WJdm0NfoTbBOCXwVb4ChyrgryQaOQi5nu8wO9tzeO
    kK/jQJRFKpdwBYqAe0Q/JP95pVjctyiVFg97ppvQ557QFcY1pHapAwhyBmxYiLak
    W4pz42IduC2pnZ3ut4C7UzpeDMRr
    -----END CERTIFICATE-----
    </ca>
  #+END_SRC

* SSH
  :PROPERTIES:
  :header-args+: :tangle ~/.ssh/config
  :END:

  SSH encryption settings by https://stribika.github.io/2015/01/04/secure-secure-shell.html

  #+BEGIN_SRC conf
    Host *
    KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
    Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
    MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,hmac-ripemd160,umac-128@openssh.com,hmac-sha1
  #+END_SRC

  Machines
  #+BEGIN_SRC conf :tangle ~/.ssh/known_hosts
    <<prefix>>1 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBL5T08oNKjMm7yWA0zqqqSwl6Vn0nlpoAlpP9USh0NewyfVO/xOGgkUWIlUU8p85Z3zK9YY3pl0zfQQrQHvp88Y=
    <<prefix>>185 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMCCrxVyoz4ekNh2zAbr2JzvJdojMMoHYnbo20Qjn3sW+P7FUuuiknzbX0aX81BZWdKFwspNLJAXHLoiS8zy8Wc=
  #+END_SRC

  #+BEGIN_SRC conf
    Host <<prefix>>1
    User root
    IdentityFile ~/.ssh/kub
  #+END_SRC

  #+BEGIN_SRC elisp :tangle ~/.emacs
    (eval-after-load 'tramp
      '(add-to-list 'tramp-default-method-alist '("vorme" nil "scp")))
  #+END_SRC

  #+BEGIN_SRC conf
    Host <<prefix>>185
    User <<username>>
    IdentityFile ~/.ssh/kub
  #+END_SRC

  #+BEGIN_SRC elisp :tangle ~/.emacs
    (eval-after-load 'tramp
      '(add-to-list 'tramp-default-proxies-alist '("<<prefix>>185" "root" "/ssh:<<prefix>>185:")))
  #+END_SRC

* GUI

  #+BEGIN_SRC sh :tangle ~/.pam_environment
    SSH_AUTH_SOCK=/home/<<username>>/.gnupg/S.gpg-agent.ssh

    CUPS_SERVER=kub:631
    BROWSER=firefox

    PATH=/home/<<username>>/.cargo/bin:$PATH
    RUST_BACKTRACE=1
  #+END_SRC

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S fcitx-{gtk2,gtk3,qt4,qt5,kkc,unikey}
  #+END_SRC

  #+BEGIN_SRC sh :tangle ~/.pam_environment
    XMODIFIERS=@im=fcitx
    QT_IM_MODULE=fcitx
    GTK_IM_MODULE=fcitx
  #+END_SRC

  #+BEGIN_SRC conf :tangle ~/.config/fcitx/config
    [Hotkey]
    # Trigger Input Method
    TriggerKey=ALT_Z
    # Use extra trigger key only after using it to inactivate
    # Available Value:
    # True False
    #UseExtraTriggerKeyOnlyWhenUseItToInactivate=True
    # Extra key for trigger input method
    # Available Value:
    # R_CTRL
    # R_SHIFT
    # L_SHIFT
    # L_CTRL
    # ALT_L_SHIFT
    # ALT_R_SHIFT
    # CTRL Both
    # SHIFT Both
    # L_ALT
    # R_ALT
    # ALT Both
    # Left Super
    # Right Super
    # Super Both
    # Ctrl+Left Super
    # Ctrl+Right Super
    # Super+Left Ctrl
    # Super+Right Ctrl
    # Disabled
    # Custom
    SwitchKey=Disabled
    # Custom switch key
    #CustomSwitchKey=
    # Activate input method
    #ActivateKey=
    # Inactivate Input Method
    #InactivateKey=
    # Enable Hotkey to scroll Between Input Method
    # Available Value:
    # True False
    #IMSwitchKey=True
    # Include Inactivate when scrolling between Input Method
    # Available Value:
    # True False
    IMSwitchIncludeInactive=True
    # Scroll between Input Method
    # Available Value:
    # CTRL_SHIFT
    # ALT_SHIFT
    # CTRL_SUPER
    # ALT_SUPER
    #IMSwitchHotkey=CTRL_SHIFT
    # Reload configuration
    #ReloadConfig=CTRL_5
    # Interval of Two Key Input
    #TimeInterval=250
    # Switching Virtual Keyboard
    #VKSwitchKey=CTRL_ALT_B
    # Switching Remind Mode
    #RemindSwitchKey=
    # Switching Full Width Character Mode
    #FullWidthSwitchKey=
    # Switch Full Width Punc Mode
    #PuncSwitchKey=CTRL_.
    # Prev Page
    #PrevPageKey=- UP
    # Next Page
    #NextPageKey== DOWN
    # Choose Second and Third Candidate Word
    #SecondThirdCandWordKey=
    # Saving All Config and Input History
    #SaveAllKey=CTRL_ALT_S
    # Switch Embeded Preedit
    #SwitchPreedit=CTRL_ALT_P
    # Previous Candidate Word
    #PrevWord=SHIFT_TAB
    # Next Candidate Word
    #NextWord=TAB

    [Program]
    # Seconds sleep before fcitx really start
    #DelayStart=0
    # Share State Among Window
    # Available Value:
    # No
    # All
    # PerProgram
    ShareStateAmongWindow=All
    # Default Input Method State
    # Available Value:
    # Inactive
    # Active
    #DefaultInputMethodState=Inactive

    [Output]
    # Type half width Punc After a Number
    # Available Value:
    # True False
    #HalfPuncAfterNumber=True
    # Disable Paging in Remind Mode
    # Available Value:
    # True False
    #RemindModeDisablePaging=True
    # Commit when toggle state
    # Available Value:
    # True False
    #SendTextWhenSwitchEng=True
    # Candidate Word Number
    #CandidateWordNumber=5
    # Give the tips of Phrase
    # Available Value:
    # True False
    #PhraseTips=True
    # Do not commit preedit text when unfocus a window
    # Available Value:
    # True False
    #DontCommitPreeditWhenUnfocus=False

    [Appearance]
    # Show Input Method Hint After Input method changed
    # Available Value:
    # True False
    #ShowInputWindowAfterTriggering=True
    # Show Input Method Hint After Input method changed and Focus in
    # Available Value:
    # True False
    #ShowInputWindowWhenFocusIn=False
    # Input Method Hint will be only shown when state is active
    # Available Value:
    # True False
    #ShowInputWindowOnlyWhenActive=True
    # Show Input Speed
    # Available Value:
    # True False
    #ShowInputSpeed=False
    # Show Version
    # Available Value:
    # True False
    #ShowVersion=False
    # Do not show input window if there is only preedit string
    # Available Value:
    # True False
    #HideInputWindowWhenOnlyPreeditString=False
    # Do not show input window if there is only one candidate and preedit
    # Available Value:
    # True False
    #HideInputWindowWhenOnlyOneCandidate=False
  #+END_SRC

  #+BEGIN_SRC sh :tangle ~/.config/openbox/autostart
    fcitx &
  #+END_SRC

  #+BEGIN_SRC sh :tangle ~/.config/openbox/autostart
    gpg-agent --daemon --enable-ssh-support
    compton &
    xbacklight =30 &
    tint2 &
    kwalletd &
    lxpolkit &
    firefox &
    emacs &
    yakuake &
    keepass &
    pragha -p &
  #+END_SRC

  Communication
  #+BEGIN_SRC sh :tangle ~/.config/openbox/autostart
    quasselclient &
    viber &
    skype &
  #+END_SRC

** kwin
   :PROPERTIES:
   :header-args+: :tangle ~/.config/kwinrulesrc
   :END:

   #+BEGIN_SRC conf
     [1]
     Description=Window settings for firefox
     shortcut=F5
     shortcutrule=2
     windowrole=browser
     windowrolematch=1
     wmclass=navigator firefox
     wmclasscomplete=true
     wmclassmatch=1
   #+END_SRC

   Put emacs on F4

   #+BEGIN_SRC conf
     [2]
     Description=Application settings for emacs
     shortcut=F4
     shortcutrule=2
     wmclass=emacs
     wmclasscomplete=false
     wmclassmatch=1
   #+END_SRC

   Put konsole on F6

   #+BEGIN_SRC conf
     [3]
     Description=Application settings for konsole
     shortcut=F6
     shortcutrule=2
     wmclass=konsole
     wmclasscomplete=false
     wmclassmatch=1
   #+END_SRC

   #+BEGIN_SRC conf
     [4]
     Description=No border on anything
     noborder=true
     noborderrule=2
   #+END_SRC

   #+BEGIN_SRC conf
     [General]
     count=4
   #+END_SRC

* Git
  #+BEGIN_SRC conf :tangle .git/config
    [core]
            repositoryformatversion = 0
            filemode = true
            bare = false
            logallrefupdates = true
    [remote "origin"]
            url = https://gitlab.com/<<username>>/<<username>>
            pushUrl = gitlab.com:<<username>>/<<username>>
            pushUrl = github.com:<<username>>/<<username>>
            pushUrl = bitbucket.org:<<username>>/<<username>>
            fetch = +refs/heads/*:refs/remotes/origin/*
    [branch "master"]
            remote = origin
            merge = refs/heads/master
  #+END_SRC

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S git
  #+END_SRC

  #+BEGIN_SRC conf :tangle ~/.gitconfig
    [user]
    name = Hoàng Đức Hiếu
    email = <<username>>@<<domain>>
    [color]
    ui = auto
    [core]
    eol = lf
    whitespace = trailing-space,space-before-tab
    [alias]
    ml = log --reverse --topo-order ORIG_HEAD..
    [merge]
    conflictstyle = diff3
    [push]
    default = simple
    [pull]
    rebase = true
    [rebase]
    stat = true
  #+END_SRC

  Code hosting sites:

  #+BEGIN_SRC conf :tangle ~/.ssh/known_hosts
    github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
    bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
    gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
  #+END_SRC

  #+BEGIN_SRC conf :tangle ~/.ssh/config
    Host gitlab.com github.com bitbucket.org
    User git
    IdentityFile ~/.ssh/git
    Host git.kde.org
    User git
    IdentityFile ~/.ssh/kde
    Host heroku.com
    IdentityFile ~/.ssh/heroku
  #+END_SRC

  Magit is awesome.

  #+BEGIN_SRC elisp :tangle ~/.emacs
    (eval-after-load 'use-package
      '(progn
         (use-package magit
           :bind ("C-x g" . magit-status)
           :config
           (setq magit-save-repository-buffers 'dontask
                 magit-push-always-verify nil))))
  #+END_SRC

* Crawl

  #+BEGIN_SRC conf :tangle ~/.crawlrc
    tile_full_screen = false
    autopickup_exceptions += <tomahawk, <throwing net, <javelin, <rock, <immol
    autopickup_exceptions += <misc, <ego, <artefact, <mutagenic
  #+END_SRC

* ArchLinux
  Pacman config

  #+NAME: pacman_common
  #+BEGIN_SRC conf
    [options]
    VerbosePkgLists
    UseSyslog
    CheckSpace
    HoldPkg = pacman glibc
    SigLevel = Required DatabaseOptional
    LocalFileSigLevel = Optional

    [core]
    Include = /etc/pacman.d/mirrorlist
    [extra]
    Include = /etc/pacman.d/mirrorlist
    [community]
    Include = /etc/pacman.d/mirrorlist
    [blackarch]
    Server = http://f.archlinuxvn.org/$repo/$repo/os/$arch
  #+END_SRC

  Refresh database

  #+BEGIN_SRC sh :dir /sudo::
    dirmngr --daemon
    pacman-key -r 7533BAFE69A25079
    pacman-key --lsign 7533BAFE69A25079
    <<pacman>> -S -y
  #+END_SRC

  AUR helper

  #+BEGIN_SRC yaml :tangle ~/Copy/bin/aur :shebang #!/bin/ansible-playbook
    - hosts: arch
      gather_facts: no
      vars:
        store: /tmp/aur
      vars_prompt:
        - name: package
          private: no
      tasks:
        - file: state=directory path={{store}}
        - get_url: url=https://aur4.archlinux.org/cgit/aur.git/snapshot/{{package}}.tar.gz dest={{store}}/
        - unarchive: copy=no src={{store}}/{{package}}.tar.gz dest={{store}}
        - command: nice makepkg --noconfirm --install --force --syncdeps chdir={{store}}/{{package}}
  #+END_SRC

  Yaourt config

  #+BEGIN_SRC conf :tangle ~/.yaourtrc
    AURUPGRADE=1
    EXPORT=1
    EXPORTDIR=~
    BUILD_NOCONFIRM=1
    EDITFILES=0
  #+END_SRC

  Base utils

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S haveged p7zip parallel pkgfile yaourt
    <<system_ctl>> enable --now haveged
  #+END_SRC

  #+BEGIN_SRC sh
    pkgfile -u
  #+END_SRC

  Dev-env:

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S base-devel rust android-tools
  #+END_SRC

  Monitoring:

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S ethtool lm_sensors traceroute psmisc \
        procps-ng inetutils ltrace sysdig atop iotop
  #+END_SRC

  #+BEGIN_SRC sh :tangle ~/Copy/bin/strace :shebang #!/bin/sh :no-expand
    exec /usr/bin/ltrace -CSn2 $@
  #+END_SRC

  Of course emacs is installed, now run it

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S emacs-pkgbuild-mode
  #+END_SRC

  #+BEGIN_SRC conf :tangle ~/.config/systemd/user/emacs.service
    [Unit]
    Description=Emacs

    [Service]
    ExecStart=/bin/emacs
    Restart=always
    RestartSec=1sec

    [Install]
    WantedBy=default.target
  #+END_SRC

  #+BEGIN_SRC sh :dir ~
    <<user_ctl>> enable --now emacs syncthing pulseaudio
  #+END_SRC

** kub
   :PROPERTIES:
   :header-args+: :dir /sudo:10.117.14.185:
   :END:
*** Network
    :PROPERTIES:
    :header-args+: :tangle-mode 260
    :END:
    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/systemd/network/eth0.network
      [Match]
      Name = eth0

      [Network]
      Address = <<prefix>>185/24
      Gateway = <<prefix>>1
      DNS = <<prefix>>1
      IPForward = yes

      Tunnel=he-ipv6
      Address=<<prefix6>>1/64
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/systemd/network/he-ipv6.netdev
      [NetDev]
      Name=he-ipv6
      Kind=sit
      MTUBytes=1472

      [Tunnel]
      Local=<<prefix>>185
      Remote=216.218.221.42
      TTL=255
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/systemd/network/he-ipv6.network
      [Match]
      Name=he-ipv6
      [Network]
      Address=2001:470:35:62a::2/64
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/systemd/system/he-ipv6-route.service
      [Unit]
      After=network.target

      [Service]
      Type=oneshot
      RemainAfterExit=yes
      ExecStart=/bin/ip -6 route add default src <<prefix6>>1 dev he-ipv6
      ExecStop=/bin/ip -6 route del default

      [Install]
      WantedBy=multi-user.target
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/radvd.conf
      interface eth0 {
      AdvSendAdvert on;
      MinRtrAdvInterval 3;
      MaxRtrAdvInterval 10;
      AdvLinkMTU 1472;
      prefix <<prefix6>>/64 {
      AdvOnLink on;
      AdvRouterAddr on;
      };
      };
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/resolv.conf
      nameserver <<prefix>>1
    #+END_SRC

*** Pacman
    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/pacman.conf :tangle-mode 260
      <<pacman_common>>

      [options]
      Architecture = armv7h

      [alarm]
      Include = /etc/pacman.d/mirrorlist
      [aur]
      Include = /etc/pacman.d/mirrorlist
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/pacman.d/mirrorlist
      Server = http://vn.mirror.archlinuxarm.org/$arch/$repo
    #+END_SRC

*** LED blinking
    #+BEGIN_SRC sh :tangle /sudo:10.117.14.185:/usr/local/bin/leds :shebang #!/bin/sh
      echo none > /sys/class/leds/cubieboard:green:usr/trigger
      echo mmc0 > /sys/class/leds/cubieboard:blue:usr/trigger
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/systemd/system/leds.service
      [Service]
      Type=oneshot
      ExecStart=/usr/local/bin/leds
      RemainAfterExit=true

      [Install]
      WantedBy=basic.target
    #+END_SRC

*** tmux
    #+BEGIN_SRC conf :tangle /ssh:10.117.14.185:.config/systemd/user/tmux.service
      [Unit]
      Description=Start tmux in detached session

      [Service]
      Type=forking
      ExecStart=/usr/bin/tmux new-session -s %u -d
      ExecStop=/usr/bin/tmux kill-session -t %u
      Restart=always

      [Install]
      WantedBy=multi-user.target
    #+END_SRC

    #+BEGIN_SRC conf :tangle /ssh:10.117.14.185:.tmux.conf
      new-window -n Journal journalctl -afb
      new-window -n ipfs ipfs daemon
      new-window -n luser cp /var/lib/minidlna/Public/luser.py ~ && python2 ~/luser.py
    #+END_SRC

*** Torrent
    #+BEGIN_SRC sh :dir /sudo:10.117.14.185:
      <<pacman>> -S deluge python2-mako
    #+END_SRC

    #+BEGIN_SRC conf :tangle /10.117.14.185:.config/systemd/user/deluge.service
      [Unit]
      Description=Deluge

      [Service]
      ExecStart=/usr/bin/deluged -d

      [Install]
      WantedBy=default.target
    #+END_SRC

    #+BEGIN_SRC conf :tangle /10.117.14.185:.config/systemd/user/deluge-web.service
      [Unit]
      Description=Deluge Web

      [Service]
      ExecStart=/usr/bin/deluge-web -b /deluge/

      [Install]
      WantedBy=default.target
    #+END_SRC

*** Tor
    #+BEGIN_SRC sh :dir /sudo:10.117.14.185:
      <<pacman>> -S tor
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/tor/torrc :tangle-mode 420
      ContactInfo tor at <<domain>>
      Nickname kub
      DirPort 4660
      ORPort 34289
      SOCKSPort <<prefix>>185:9050
      MaxAdvertisedBandwidth 40 KBytes
      ExitPolicy reject *:*

      DataDirectory /var/lib/tor
      Log notice syslog
   #+END_SRC

*** HTTP
    #+BEGIN_SRC sh
      <<pacman>> -S nginx-mainline php-fpm
    #+END_SRC

    #+NAME: php
    #+BEGIN_SRC text
      location ~ \.php(?:$|/) {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_pass unix:/run/php-fpm/php-fpm.sock;
      }
    #+END_SRC

    #+BEGIN_SRC doctex :tangle /sudo:10.117.14.185:/etc/nginx/nginx.conf
      events {}
      stream {
        server {
          listen 8443;
          listen [::]:8443;
          proxy_pass [::1]:4242;
          error_log /var/log/nginx/quassel.log debug;
        }
      }
      http {
        include mime.types;
        charset utf-8;
        gzip off;
        client_max_body_size 10G;
        fastcgi_buffers 64 4K;
        root /srv/http;
        autoindex on;
        index index.html index.php;

        access_log off;
        log_not_found off;

        server {
          return 301 https://$host$request_uri;
        }

        ssl_certificate /etc/letsencrypt/live/kub.<<domain>>/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/kub.<<domain>>/privkey.pem;
        ssl_protocols TLSv1.2;
        ssl_ciphers EECDH+CHACHA20:EECDH+AES128;
        ssl_prefer_server_ciphers on;
        add_header Strict-Transport-Security "max-age=31536000; preload; includeSubdomains";

        server {
          listen 443 ssl http2 default_server;
          listen [::]:443 ssl http2 default_server;
          server_name <<domain>>;

          location /deluge {
            proxy_pass http://127.0.0.1:8112/;
          }
          location /zabbix {
            root /usr/share/webapps;
            <<php>>
          }
          location /netdata {
            proxy_pass http://127.0.0.1:19999;
          }
        }
        server {
          listen 443 ssl http2;
          listen [::]:443 ssl http2;
          server_name kub.<<domain>>;
          root /usr/share/webapps/owncloud;
          location ~ \.htaccess|/data/|/config/|db_structure\.xml|README {
            deny all;
          }
          location / {
            rewrite ^/.well-known/carddav /owncloud/remote.php/carddav/ redirect;
            try_files $uri $uri/ =404;
          }
          <<php>>
        }
      }
     #+END_SRC

*** DLNA
    #+BEGIN_SRC sh :dir /sudo:10.117.14.185:
      <<pacman>> -S minidlna
    #+END_SRC

    #+BEGIN_SRC sh :dir /sudo:10.117.14.185:
      <<system_ctl>> enable --now minidlna
     #+END_SRC

*** IPsec
    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/ipsec.conf
      ca letsencrypt
          auto=add
          cacert=/etc/letsencrypt/live/kub.<<domain>>/chain.pem

      conn kub
          auto=add
          left=<<prefix>>185
          leftid=kub.<<domain>>
          leftcert=/etc/letsencrypt/live/kub.<<domain>>/cert.pem
          leftsubnet=<<prefix>>0/24
          leftfirewall=yes
          leftdns=<<prefix>>1

          rightauth=eap-mschapv2
          eap_identity=%any
          rightsourceip=%dhcp
    #+END_SRC

*** OpenVPN
    #+BEGIN_SRC conf :tangle-mode 256 :tangle /sudo:10.117.14.185:/etc/openvpn/kub.conf
      <<openvpn_common>>

      key-direction 0
      tls-server
      <pkcs12>
      <<kub_pfx>>
      </pkcs12>
      <dh>
      -----BEGIN DH PARAMETERS-----
      MIIBCAKCAQEAoioJw6aUXmgBDSw6SzbSZww6i7eH0MC+Eba5qGmYJnKn2zI8dBH6
      JZKnAyz9MbD21loI6KjAnOzZkBp7DKle1cACLS229Olycr22rXWPFuhMV15TohDJ
      ArazVXSJGDL9OXhdHei96K3qXofz/3AzXEVxD0unQd5sRlgNGmunofvgWBechdmn
      YQl44SZ0asC8uUY1uiKjVyQzqeNDi3rjJtTobcPdR6Pb8CnS3cfwoWzXMwUexmfJ
      VQSNaDZIeQcwV5MEHs1XViOTiEvT8IHbJojJri0geUSJ+HkX1JTxGIUj4xxKHQ0j
      AFEjqDYFh3q7U6QgFLRWZffVLgxIZVopIwIBAg==
      -----END DH PARAMETERS-----
      </dh>
      user nobody
      group nobody

      mode server

      server 10.255.0.0 255.255.255.0
      push "route <<prefix>>54"
    #+END_SRC

*** SSH
    #+BEGIN_SRC conf :tangle /sudo:10.117.14.185:/etc/ssh/sshd_config
      Protocol 2
      HostKey /etc/ssh/ssh_host_ed25519_key

      KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
      Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
      MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,hmac-ripemd160,umac-128@openssh.com

      AllowGroups wheel
      PasswordAuthentication no
      ChallengeResponseAuthentication no
      UsePrivilegeSeparation sandbox

      Subsystem sftp /usr/lib/ssh/sftp-server
    #+END_SRC

** ton
*** Hardware
    Fix USB interfering with suspending

    #+BEGIN_SRC sh :tangle /sudo::/usr/local/bin/s230u :tangle-mode 320
      echo EHC1 > /proc/acpi/wakeup
      echo EHC2 > /proc/acpi/wakeup
    #+END_SRC

    Let powertop autotune. This conveniently waits for the trackpoint to become available for the last section.

    #+BEGIN_SRC sh :tangle /sudo::/usr/local/bin/s230u :tangle-mode 320
      powertop --auto-tune
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo::/etc/systemd/system/s230u.service
      [Service]
      Type=oneshot
      RemainAfterExit=yes
      ExecStart=/usr/local/bin/s230u

      [Install]
      WantedBy=basic.target
    #+END_SRC

    #+BEGIN_SRC sh :dir /sudo::
      <<system_ctl>> enable --now s230u
    #+END_SRC
*** Mounts
    #+BEGIN_SRC sh
      fallocate -l 2G /swap
      chmod u=rw,go= /swap
      mkswap /swap
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo::/etc/fstab
      LABEL=home /home/<<username>> ntfs-3g noatime,nofail
      LABEL=ESP /boot vfat
      /swap none swap
    #+END_SRC

*** Network
    #+BEGIN_SRC conf :tangle /sudo::/etc/systemd/network/00-bkap.network
      [Match]
      Name = enp4s0

      [Network]
      DNS = 8.8.8.8
      Address = 192.168.0.252/24
      Gateway = 192.168.0.1
      Address = 192.168.1.252/24
      Gateway = 192.168.1.1
      Address = 192.168.4.252/24
      Gateway = 192.168.4.1
      Address = 192.168.5.252/24
      Gateway = 192.168.5.1

      [Route]
      Destination=192.168.1.1
      Source=192.168.1.252
    #+END_SRC

    #+BEGIN_SRC conf :tangle /sudo::/etc/systemd/network/dhcp.network
      [Network]
      DHCP=ipv4
    #+END_SRC

*** Pacman
  #+BEGIN_SRC conf :tangle /sudo::/etc/pacman.conf :tangle-mode 260
    <<pacman_common>>

    [options]
    Architecture = auto

    [multilib]
    Include = /etc/pacman.d/mirrorlist

    [antergos]
    SigLevel = PackageRequired
    Include = /etc/pacman.d/antergos-mirrorlist
  #+END_SRC

  #+BEGIN_SRC conf :tangle /sudo::/etc/pacman.d/mirrorlist
    Server = http://f.archlinuxvn.org/archlinux/$repo/os/$arch
  #+END_SRC

*** OpenVPN
    #+BEGIN_SRC conf :tangle-mode 256 :tangle /sudo::/etc/openvpn/kub.conf
      <<openvpn_common>>

      key-direction 1
      tls-client
      <pkcs12>
      <<ton_pfx>>
      </pkcs12>

      nobind
      pull

      remote k.<<domain>> 22
      verify-x509-name kub.<<domain>> name
      remote-cert-tls server
      resolv-retry infinite
    #+END_SRC

*** Fonts
    #+BEGIN_SRC sh :dir /sudo::
      <<pacman>> -S adobe-source-{sans,serif,code}-pro-fonts adobe-source-han-sans-otc-fonts
    #+END_SRC

    #+BEGIN_SRC xml :tangle ~/.config/fontconfig/fonts.conf :padline no :comments no
      <?xml version='1.0'?>
      <!DOCTYPE fontconfig SYSTEM 'fonts.dtd'>
      <fontconfig>
        <match target="font">
          <edit mode="assign" name="rgba">
            <const>none</const>
          </edit>
        </match>
        <match target="font">
          <edit mode="assign" name="hinting">
            <bool>true</bool>
          </edit>
        </match>
        <match target="font">
          <edit mode="assign" name="hintstyle">
            <const>hintslight</const>
          </edit>
        </match>
        <match target="font">
          <edit mode="assign" name="antialias">
            <bool>true</bool>
          </edit>
        </match>
        <dir>~/.fonts</dir>
        <match target="pattern">
          <test qual="any" name="family"><string>Arial</string></test>
          <edit name="family" mode="assign" binding="same"><string>sans-serif</string></edit>
        </match>
        <match target="pattern">
          <test qual="any" name="family"><string>DejaVu Sans</string></test>
          <edit name="family" mode="assign" binding="same"><string>sans-serif</string></edit>
        </match>
        <alias>
          <family>sans-serif</family>
          <prefer>
            <family>Source Sans Pro</family>
          </prefer>
        </alias>
        <alias>
          <family>serif</family>
          <prefer>
            <family>Source Serif Pro</family>
          </prefer>
        </alias>
        <alias>
          <family>monospace</family>
          <prefer>
            <family>Source Code Pro</family>
          </prefer>
        </alias>
        <selectfont>
          <rejectfont>
            <glob>/usr/share/fonts/default/Type1/*</glob>
            <pattern>
              <patelt name="scalable">
                <bool>false</bool>
              </patelt>
            </pattern>
          </rejectfont>
        </selectfont>
      </fontconfig>
     #+END_SRC

*** Desktop
    These DBus services are provided by plasma-workspace-units.

    #+BEGIN_SRC sh :dir /sudo::
      rm /usr/share/dbus-1/services/org.kde.{kded5,kglobalaccel,kuiserver,kwalletd5}.service
    #+END_SRC

**** Inside VM
     #+BEGIN_SRC sh :dir /sudo::
       <<system_ctl>> enable --now systemd-networkd-wait-online sshd
     #+END_SRC

     #+BEGIN_SRC conf :tangle /sudo::/etc/fstab
       //192.168.208.1/home /home/<<username>> cifs credentials=/etc/cifs,uid=1000,gid=1000,file_mode=0600
     #+END_SRC

     On the host side, open 445/tcp to this VM, and run emacs over X with MobaXterm:

     #+BEGIN_SRC conf :tangle bin/emacs.moba
       emacs =  #109#0%192.168.208.128%22%<<username>>%%-1%0%cp -r ~/.gnupg /run/user/1000 && chmod -R 700 /run/user/1000/.gnupg && export GNUPGHOME__EQUAL__/run/user/1000/.gnupg && setxkbmap dvorak && gpg-agent --enable-ssh-support --daemon emacs%%22%%0%0%Interactive shell%h:\.ssh\kub%%0%0%0%0%%1080%%0#MobaFont%10%0%0%0%15%236,236,236%0,0,0%180,180,192%0%-1%0%%xterm%-1%0%0,0,0%54,54,54%255,96,96%255,128,128%96,255,96%128,255,128%255,255,54%255,255,128%96,96,255%128,128,255%255,54,255%255,128,255%54,255,255%128,255,255%236,236,236%255,255,255%80%24%0#0
     #+END_SRC

     Remember to quit emacs before suspending.
***** Megasync
      #+BEGIN_SRC sh :dir /sudo::
       <<pacman>> -S xorg-server-xvfb megasync
      #+END_SRC

      #+BEGIN_SRC conf :tangle ~/.config/systemd/user/megasync.service
       [Unit]
       Description=Headless megasync

       [Service]
       ExecStart=/usr/bin/xvfb-run megasync

       [Install]
       WantedBy=default.target
      #+END_SRC

      #+BEGIN_SRC sh
       <<user_ctl>> enable --now megasync
      #+END_SRC

**** Keyboard
     Use dvorak, swap caps for ctrl

     #+BEGIN_SRC conf :tangle /sudo::/usr/share/kbd/keymaps/caps2ctrl.map
       include "/usr/share/kbd/keymaps/i386/dvorak/dvorak.map.gz"
       keycode 58 = Control
     #+END_SRC

     #+BEGIN_SRC sh :dir /sudo::
       localectl set-keymap caps2ctrl
     #+END_SRC

     Base Japanese IME on dvorak, swap caps for ctrl

     #+BEGIN_SRC conf :tangle keyboard.reg :comments no
       Windows Registry Editor Version 5.00

       [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
       "Scancode Map"=hex:00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00

       [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layouts\00000411]
       "Layout File"="kbddv.dll"
     #+END_SRC

     Tangle registry files as UTF-16LE with BOM

     #+BEGIN_SRC elisp :tangle ~/.emacs
       (add-to-list 'file-coding-system-alist '("\\.reg\\'" . utf-16le-with-signature-dos))
       (add-hook 'org-babel-post-tangle-hook 'strip-initial-newline)
       (defun strip-initial-newline ()
         (when (string-match "^Windows Registry" (buffer-string))
           (join-line 1)))
     #+END_SRC

     Import into registry

     #+BEGIN_SRC sh
       start regedit $PWD/*reg
     #+END_SRC

**** Pointer
     Up sensitivity

     #+BEGIN_SRC sh :tangle /sudo::/usr/local/bin/s230u :tangle-mode 320
       echo 200 > /sys/bus/serio/devices/serio2/sensitivity
     #+END_SRC

     #+BEGIN_SRC sh :dir /sudo::
       <<pacman>> -S xf86-input-libinput
     #+END_SRC

     Use natural scrolling on touchpad

     #+BEGIN_SRC conf :tangle /sudo::/etc/X11/xorg.conf.d/pointer.conf
       Section "InputClass"
               Identifier "Natural scrolling"
               MatchProduct "TouchPad"
               Driver "libinput"
               Option "NaturalScrolling" "1"
       EndSection
     #+END_SRC

**** Rotation
     #+BEGIN_SRC sh :dir /sudo::
       <<pacman>> -S acpid
     #+END_SRC

     #+BEGIN_SRC text :tangle /sudo::/etc/acpi/events/rotation-button
       event=ibm/hotkey LEN0068:00 00000080 00006020
       action=sudo -u <<username>> DISPLAY=:0 /usr/local/bin/rotate-screen
     #+END_SRC

     #+BEGIN_SRC sh :tangle /sudo::/usr/local/bin/rotate-screen :shebang #!/bin/sh :tangle-mode 365
       case $(xrandr | grep LVDS1 | cut -f 4 -d ' ' | tr -d '(') in
           normal) new="left";;
           left)   new="inverted";;
           inverted)   new="normal";;
       esac
       xrandr --output LVDS1 --rotate $new

       case $new in
           normal) matrix="1 0 0 0 1 0 0 0 1";;
           left)   matrix="0 -1 1 1 0 0 0 0 1";;
           right)  matrix="0 1 0 -1 0 1 0 0 1";;
           inverted) matrix="-1 0 1 0 -1 1 0 0 1";;
       esac
       for dev in "SynPS/2 Synaptics TouchPad" "TPPS/2 IBM TrackPoint" "Atmel Atmel maXTouch Digitizer"; do
           xinput set-prop "$dev" "Coordinate Transformation Matrix" $matrix
       done
     #+END_SRC

     #+BEGIN_SRC sh :dir /sudo::
       <<system_ctl>> enable --now acpid
     #+END_SRC

*** Picard
    #+BEGIN_SRC sh :dir /sudo::
      <<pacman>> -S picard chromaprint
    #+END_SRC

    #+BEGIN_SRC conf :tangle ~/.config/MusicBrainz/Picard.conf
      [setting]
      server_host=musicbrainz.org
      server_port=80

      fingerprinting_system=acoustid
      acoustid_apikey=<<acoustid_key>>
      acoustid_fpcalc=/usr/bin/fpcalc

      save_images_to_tags=true
      save_only_front_images_to_tags=true
      save_images_to_files=false
      ca_provider_use_amazon=true
      ca_provider_use_caa=true
      ca_provider_use_caa_release_group_fallback=true
      ca_provider_use_whitelist=true
      caa_image_size=1
      caa_approved_only=true
      caa_restrict_image_types=true
      analyze_new_files=false
      ignore_file_mbids=false
      quit_confirmation=true
      va_name=Various Artists
      nat_name=
      standardize_artists=true

      windows_compatibility=true
      ascii_filenames=false
      rename_files=true
      move_files=true
      file_naming_format="$if2(%albumartist%,%artist%)/$if($ne(%albumartist%,),%album%/)$if($gt(%totaldiscs%,1),%discnumber%-,)$if($ne(%albumartist%,),$num(%tracknumber%,2) ,)$if(%_multiartist%,%artist% - ,)%title%"
      move_files_to=<<music>>/_new
      move_additional_files=true
      move_additional_files_pattern=*.jpg *.png *.jpeg
      delete_empty_dirs=true

      browser_integration=true
      browser_integration_port=8000
      browser_integration_localhost_only=true

      dont_write_tags=false
      preserve_timestamps=false
      write_id3v1=true
      write_id3v23=true
      id3v23_join_with=/
      id3v2_encoding=utf-16
      remove_ape_from_mp3=true
      remove_id3_from_flac=true
    #+END_SRC

*** mpd
    :PROPERTIES:
    :header-args+: :dir ~
    :END:

    Create playlist
    #+BEGIN_SRC sh
      mpc listall > <<music>>/pq.m3u
    #+END_SRC

    Shuffle and play

    #+BEGIN_SRC sh :results raw
      mpc -q clear && mpc load pq && mpc -q shuffle && mpc play
    #+END_SRC

    Delete currently playing track

    #+BEGIN_SRC sh :eval query
      rm -v <<music>>/"$(mpc -f %file% | head -1)"
    #+END_SRC

*** mpv

    #+BEGIN_SRC conf :tangle ~/.config/mpv/mpv.conf
      sub-auto=fuzzy
      hwdec=auto
      hwdec-codecs=all
    #+END_SRC

    #+BEGIN_SRC conf :tangle ~/.config/mpv/input.conf
      q quit_watch_later
      MOUSE_BTN0 cycle pause
      MOUSE_BTN1 show_progress
      MOUSE_BTN2 cycle fullscreen
      z set window-scale 2
      Z set window-scale 1

      ; show_progress
      f show_text "${filename}"
      d cycle audio
      y add volume 1
      i add volume -1
      g add sub-delay  0.1
      h add sub-delay -0.1
      x cycle mute

      k frame_step
      ' seek +10
      a seek -10
      , seek +60
      o seek -60
      . seek +300
      e seek -300

      u cycle fullscreen
    #+END_SRC

* Emacs
  :PROPERTIES:
  :header-args+: :tangle ~/.emacs
  :END:

  OOBE settings:

  #+BEGIN_SRC elisp
    (server-mode t)
    (global-set-key (kbd "C-x C-r")
                    (lambda () (interactive)
                      (revert-buffer :noconfirm t)))
    (defalias 'yes-or-no-p #'y-or-n-p)
    (defalias 'dabbrev-expand #'hippie-expand)
    (setq auto-save-default nil
          calendar-week-start-day 1
          default-input-method "vietnamese-telex"
          inhibit-startup-screen t
          make-backup-files nil
          scroll-preserve-screen-position t
          tramp-default-method "ssh"
          undo-tree-mode-lighter ""
          visible-bell t
          frame-title-format "%b")
    (set-language-environment "UTF-8")
    (setq-default buffer-file-coding-system 'utf-8-unix)
    (setq-default sentence-end-double-space nil)
    (global-set-key (kbd "C-\\") #'toggle-input-method)
    (blink-cursor-mode -1)
    (show-paren-mode t)
    (winner-mode)
  #+END_SRC

  Package management

  #+BEGIN_SRC elisp
    (package-initialize)
    (setq package-archives
          '(("gnu" . "https://elpa.gnu.org/packages/")
            ("marmalade" . "https://marmalade-repo.org/packages/")
            ("melpa" . "http://melpa.org/packages/")))
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (setq use-package-always-ensure t)
    (require 'use-package)
  #+END_SRC

  Color theme

  #+BEGIN_SRC elisp
    (use-package color-theme-sanityinc-solarized
      :config (load-theme 'sanityinc-solarized-light t))
  #+END_SRC

  Font on Windows

  #+BEGIN_SRC elisp
    (when (eq window-system 'w32)
      (if (> window-system-version 5)
          (set-default-font "Consolas-12" :frames t)
        (set-default-font "Lucida Console-10" :frames t)))
  #+END_SRC

** Discovery
   Learn what's available under prefix keys

   #+BEGIN_SRC elisp
     (use-package which-key :ensure
       :diminish ""
       :config (which-key-mode))
   #+END_SRC

** Editing
   Vim-style

   #+BEGIN_SRC elisp
     (use-package evil
       :config
       (evil-mode t)
       (evil-set-initial-state 'special-mode 'emacs)
       (dolist (state '(normal motion))
         (evil-define-key state global-map
           (kbd "<SPC>") #'evil-scroll-down
           (kbd "S-<SPC>") #'evil-scroll-up))
       (dolist (state '(insert motion normal))
         (evil-define-key state global-map
           (kbd "C-t") #'transpose-chars
           (kbd "C-d") #'delete-char
           (kbd "C-k") #'kill-line
           (kbd "C-y") #'evil-paste-before
           (kbd "C-a") #'beginning-of-line (kbd "C-e") #'end-of-line
           (kbd "C-f") #'forward-char   (kbd "C-b") #'backward-char
           (kbd "C-n") #'next-line      (kbd "C-p") #'previous-line
           (kbd "<down>") #'next-line   (kbd "<up>") #'previous-line
           (kbd "j") #'next-line        (kbd "k") #'previous-line
           (kbd "C-v") #'evil-scroll-down (kbd "M-v") #'evil-scroll-up
           (kbd "C-r") #'isearch-backward))
       (evil-define-key 'insert global-map
         "j" #'self-insert-command "k" #'self-insert-command)
       (evil-define-key 'motion help-mode-map
         (kbd "<tab>") #'forward-button))
   #+END_SRC

   Aggressive indent

   #+BEGIN_SRC elisp
     (setq tab-always-indent 'complete)
     (use-package aggressive-indent
       :diminish ""
       :config
       (global-aggressive-indent-mode)
       (add-to-list 'aggressive-indent-excluded-modes 'rust-mode))
   #+END_SRC

   Switch window with ace

   #+BEGIN_SRC elisp
     (use-package ace-window
       :config (ace-window-display-mode 1)
       :bind ("C-x o" . ace-window))
   #+END_SRC

   Do things with helm:

   #+BEGIN_SRC elisp
     (use-package helm
       :config
       (helm-mode 1)
       (define-key shell-mode-map (kbd "M-r") #'helm-comint-input-ring)
       :diminish helm-mode
       :bind (("C-h SPC" . helm-all-mark-rings)
              ("C-x b" . helm-mini)
              ("C-x C-b" . helm-buffers-list)
              ("C-x C-f" . helm-find-files)
              ("C-c g" . helm-do-grep)
              ("C-s" . helm-occur)
              ("M-x" . helm-M-x)))
     (require 'helm-config)
     (use-package evil
       :config (dolist (state '(insert motion normal))
                 (evil-define-key state global-map
                   (kbd "M-y") #'helm-show-kill-ring)))
   #+END_SRC

** Org

   #+BEGIN_SRC elisp
     (add-hook 'org-mode-hook
               '(lambda ()
                  (add-hook 'before-save-hook 'org-align-all-tags
                            :local t)))
     (org-babel-do-load-languages 'org-babel-load-languages
                                  '((sh . t)))
     (setq org-src-fontify-natively t)
     (use-package htmlize :ensure)
     (setq org-export-initial-scope 'subtree
           org-babel-use-quick-and-dirty-noweb-expansion t)
     (setq org-latex-pdf-process '("xelatex -interaction nonestopmode -output-directory %o %f"))
     (setq org-html-doctype "html5"
           org-html-html5-fancy t
           org-html-head "<link rel=stylesheet type=text/css href=blog.css>"
           org-html-use-unicode-chars t
           org-html-head-include-default-style nil
           org-html-head-include-scripts nil
           org-html-postamble nil)
   #+END_SRC

*** Crypt

    #+BEGIN_SRC elisp
      (require 'org-crypt)
      (add-hook 'org-mode-hook
                '(lambda ()
                   (add-hook 'before-save-hook 'org-encrypt-entries
                             :local t)))
      (setq org-tags-exclude-from-inheritance '("crypt")
            org-crypt-key "<<username>>@keybase.io")
    #+END_SRC

    Make it possible to tangle encrypted block

    #+BEGIN_SRC elisp
      (remove-hook 'org-babel-pre-tangle-hook #'save-buffer)
    #+END_SRC

** Doc-View

   #+BEGIN_SRC elisp
     (eval-after-load 'doc-view
       '(bind-key (kbd "<mouse-1>") #'doc-view-scroll-up-or-next-page doc-view-mode-map))
     (setq doc-view-resolution 300
           doc-view-cache-directory (expand-file-name "~/.emacs.d/doc-view"))
     (use-package evil
       :config (add-hook 'view-mode-hook #'evil-emacs-state))
   #+END_SRC

** Dired

   #+BEGIN_SRC elisp
     (use-package dired+
       :config
       (require 'dired+)
       (global-dired-hide-details-mode -1)
       (defun dired-open ()
         (interactive)
         (dired-do-shell-command "xdg-open &" :file-list (dired-get-marked-files)))
       (define-key dired-mode-map (kbd "RET") #'dired-open)
       (define-key dired-mode-map (kbd "<mouse-2>") #'dired-open)
       (setq dired-recursive-copies 'always
             dired-recursive-deletes 'always
             dired-listing-switches "-alh"
             dired-guess-shell-alist-user
             '(("\\.cb.\\'" "okular")
               ("." "xdg-open;"))))
   #+END_SRC

** Eshell
   Put eshell on a convenient binding

   #+BEGIN_SRC elisp
     (global-set-key (kbd "C-x M-m") #'eshell)
   #+END_SRC

   I like the prompt to be on a separate line.

   #+BEGIN_SRC elisp
     (setq eshell-prompt-function
           '(lambda ()
              (concat (eshell/pwd) "\n"
                      (int-to-string eshell-last-command-status) " % "))
           eshell-prompt-regexp "^[[:digit:]]\\{1,3\\} % ")
   #+END_SRC

   These are terminal-manipulating commands

   #+BEGIN_SRC elisp
     (eval-after-load 'em-term
       '(progn
          (dolist (prog '("atop" "systemd-cgls" "journalctl"))
            (add-to-list 'eshell-visual-commands prog))
          (add-to-list 'eshell-visual-options '("ssh" "-t"))))
   #+END_SRC

   Profile:

   #+BEGIN_SRC sh :tangle ~/.emacs.d/eshell/profile :no-expand
     addpath ~/Copy/bin
   #+END_SRC

   Aliases:

   #+BEGIN_SRC sh :tangle ~/.emacs.d/eshell/alias
     alias vim find-file $1
     alias j journalctl -afb $*
     alias sc <<system_ctl>> $*
     alias uc <<user_ctl>> $*
     alias ytdl <<ytdl>> -a /home/<<username>>/q.txt
     alias fr free -h
   #+END_SRC

* Ansible

  #+BEGIN_SRC sh :dir /sudo::
    <<pacman>> -S ansible
  #+END_SRC

  #+BEGIN_SRC elisp :tangle ~/.emacs
    (eval-after-load 'use-package
      '(progn
         (use-package yaml-mode)
         (use-package ansible-doc
           :config (add-hook 'yaml-mode-hook #'ansible-doc-mode))))
  #+END_SRC

** Inventory
   :PROPERTIES:
   :header-args+: :tangle ~/.ansible_inventory
   :END:

   Here are the hosts and their variables

   #+BEGIN_SRC conf
     [arch]
     kub ansible_python_interpreter=/usr/bin/python2
     ton ansible_python_interpreter=/usr/bin/python2 ansible_connection=local

     [all:vars]
     user=<<username>>
     home=/home/<<username>>
     h=<<storage>>
     conf="{{h}}/config/{{ansible_hostname}}"
     locale=en_US
     prefix=<<prefix>>
   #+END_SRC

** Config
   :PROPERTIES:
   :header-args+: :tangle ~/.ansible.cfg
   :END:

   Keep the inventory here

   #+BEGIN_SRC conf
     [defaults]
     inventory = ~/.ansible_inventory
   #+END_SRC

   For some reason ControlMaster isn't working

   #+BEGIN_SRC conf
     [ssh_connection]
     ssh_args=-o ControlMaster=no
   #+END_SRC

* Firefox
  :PROPERTIES:
  :header-args+: :tangle ~/.pentadactylrc
  :END:
  This file is in vimrc syntax

  #+BEGIN_SRC elisp :tangle ~/.emacs
    (eval-after-load 'use-package
      '(use-package vimrc-mode))
  #+END_SRC

  Use DuckDuckGo:

  #+BEGIN_SRC vimrc
    silent bmark -keyword ddg -t DDG https://duckduckgo.com/?kn=1&kp=-1&kae=c&q=%s
    set defsearch=ddg
  #+END_SRC

  Use backspace to go back:

  #+BEGIN_SRC vimrc
    set! browser.backspace_action=0
  #+END_SRC

  Don't let middle mouse paste:

  #+BEGIN_SRC vimrc
    set! middlemouse.contentLoadURL=false
  #+END_SRC

  Restore C-j for Downloads:

  #+BEGIN_SRC vimrc
    map <C-j> -ex dialog downloads
  #+END_SRC

  Bind stop to an easy binding:

  #+BEGIN_SRC vimrc
    map s <C-c>
  #+END_SRC

  Make scrolling easier:

  #+BEGIN_SRC vimrc
    map <space> <C-d>
    map <S-space> <C-u>
  #+END_SRC

  Pin tab:

  #+BEGIN_SRC vimrc
    map <A-p> -ex pintab!
  #+END_SRC

  Move to first or last:

  #+BEGIN_SRC vimrc
    map <A-!> -ex tabm 1
    map <A-$> -ex tabm $
  #+END_SRC

  Fast switching:

  #+BEGIN_SRC vimrc
    map -m normal,insert <F1> <C-^>
  #+END_SRC

  Don't raise these openings:

  #+BEGIN_SRC vimrc
    set activate-=diverted,links,tabopen,paste
  #+END_SRC

  Open help in a new tab

  #+BEGIN_SRC vimrc
    set newtab=help
  #+END_SRC

  Keep hint keys under left fingers:

  #+BEGIN_SRC vimrc
    set hintkeys=12345
  #+END_SRC

  Make hint text readable

  #+BEGIN_SRC vimrc
    highlight Hint -append font-size: 14px !important
  #+END_SRC

  Unzoom image:

  #+BEGIN_SRC vimrc
    map <A-t> -js content.document.toggleImageSize()
  #+END_SRC

  Replace the status line with navigation bar, and show link in the commandline:

  #+BEGIN_SRC vimrc
    set guioptions=bTrc
    set showstatuslinks=command
  #+END_SRC

  Scroll by one line:

  #+BEGIN_SRC vimrc
    set scrollsteps=1
  #+END_SRC

  Show feeds first in pageinfo:

  #+BEGIN_SRC vimrc
    set pageinfo=fgmse
  #+END_SRC

  Use visual bell:

  #+BEGIN_SRC vimrc
    set visualbell
  #+END_SRC

  Bookmarks and preferences:

  #+BEGIN_SRC vimrc
    if !getBoolPref("<<username>>.customized")
    set! <<username>>.customized=true
    bmark -keyword ac -t config about:config
    bmark -keyword bgp -t BGP http://bgp.he.net/search?search[search]=%s
    bmark -keyword v -t valsi http://vlasisku.lojban.org/?query=%s
    bmark -keyword c -t camxes http://camxes.lojban.org/?text=%s
    bmark -keyword yb -t youtube https://youtube.com/watch?v=%s
    bmark -keyword cw -t 'CrawlWiki' http://crawl.chaosforge.org/index.php?title=Special%3ASearch&search=%s
    bmark -keyword bb -t burnbit http://burnbit.com/burn?file=%s
    bmark -keyword b -t btdigg https://btdigg.org/search?q=%s&order=0&p=0
    bmark -keyword ba -t btdigg https://btdigg.org/search?q=%s&order=2&p=0
    bmark -keyword m -t zing http://mp3.zing.vn/tim-kiem/bai-hat.html?q=%s
    bmark -keyword ma -t artist http://musicbrainz.org/search?advanced=1&type=artist&tport=8000&query=%s
    bmark -keyword mg -t group http://musicbrainz.org/search?advanced=1&type=release_group&tport=8000&query=%s
    bmark -keyword mr -t recording http://musicbrainz.org/search?advanced=1&type=recording&tport=8000&query=%s
    bmark -keyword gm -t gmail https://mail.google.com/mail/#spam
    set! accessibility.browsewithcaret_shortcut.enabled=false
    set! browser.newtabpage.enabled=false
    set! browser.privatebrowsing.dont_prompt_on_enter=true
    set! browser.sessionstore.restore_pinned_tabs_on_demand=true
    set! browser.shell.checkDefaultBrowser=false
    set! browser.startup.homepage=about:blank
    set! browser.startup.page=3
    set! general.warnOnAboutConfig=false
    set! security.OCSP.enabled=0
    set! security.warn_viewing_mixed=false
    set! layout.spellcheckDefault=0
    set! middlemouse.paste=true
    set! ui.key.menuAccessKey=0
    set! browser.anchor_color="#6c71c4"
    set! browser.display.background_color="#fdf6e3"
    set! browser.display.foreground_color="#657b83"
    set! browser.display.use_system_colors=false
    set! font.default.x-western="sans-serif"
    if /NT 6/.test(window.navigator.oscpu)
    set! font.name.monospace.x-western=Consolas
    fi
    set! extensions.checkCompatibility.nightly=false
    set! extensions.https_everywhere._observatory.alt_roots=true
    set! extensions.https_everywhere._observatory.enabled=true
    set! extensions.https_everywhere._observatory.priv_dns=true
    set! plugins.hide_infobar_for_missing_plugin=true
    set! browser.download.manager.alertOnEXEOpen=false
    set! browser.download.manager.scanWhenDone=false
    set! browser.search.context.loadInBackground=true
    set! intl.charset.default=UTF-8
    set! network.http.pipelining=true
    set! network.http.pipelining.aggressive=true
    set! network.http.pipelining.ssl=true
    set! network.protocol-handler.expose.magnet=false
    set! network.proxy.socks=kub.<<domain>>
    set! network.proxy.socks_port=9050
    set! network.proxy.socks_remote_dns=true
    set! toolkit.telemetry.enabled=true
    js services.permissions.add(services.io.newURI("http:depositfiles.com",null,null), 'image', services.permissions.DENY_ACTION)
    js services.loginManager.setLoginSavingEnabled("accounts.google.com", false)
    fi
  #+END_SRC

  Strip tracker from location, thanks to [[https://userscripts.org/scripts/show/93825][Bruno Barão]] and [[https://github.com/5digits/dactyl/commit/7a1ffa5b555399c5d0925ad599e2640070bd128d][Kris Maglione]].

  #+BEGIN_SRC vimrc
    autocmd DOMLoad (utm|wa)_ -js win.history.replaceState("Remove trackers", '', doc.location.href.replace(/&?(utm|wa)_[^&]+/g,'').replace(/\?$/,''))
  #+END_SRC

  Facebook

  #+BEGIN_SRC vimrc
    bmark -keyword fb -t facebook https://fb.me/%s
    map <A-s> -js dactyl.open("https://www.facebook.com/sharer/sharer.php?u=" + content.location)
  #+END_SRC

  Inoreader

  #+BEGIN_SRC vimrc
    map <A-f> -js dactyl.open("https://www.inoreader.com/?add_feed=" + content.location)
    map <A-w> -js dactyl.open("https://www.inoreader.com/bookmarklet/save_web_page/" + encodeURIComponent(content.location))
    js services.permissions.add(services.io.newURI("http:inoreader.com",null,null), 'popup', services.permissions.ALLOW_ACTION)
    set passkeys+=inoreader.com:jkgafswhq
  #+END_SRC

  Get videos from starred items

  #+BEGIN_SRC sh :tangle ~/.bash_login
    function videos() {
        wget -O- \
             'https://www.inoreader.com/reader/api/0/stream/contents/user%2F-%2Fstate%2Fcom.google%2Fstarred?n=1000&r=o' \
             --header 'AppId: 1000001238' --header 'AppKey: <<inoreader_key>>' \
             --header 'Authorization: GoogleLogin auth=<<inoreader_auth>>' \
            | grep -o 'href":"[^"]*' | uniq | sed 's/href":"//' | tr -d '\\' \
            | grep -vE 'reader/api|rapidgator|escapistmag|muspy' \
            | <<ytdl>> -a- --no-mtime --ignore-errors 2>/dev/null \
            | grep -B1 100%
    }
  #+END_SRC

  ownCloud News

  #+BEGIN_SRC vimrc
    set passkeys+=kub.<<domain>>/index.php/apps/news/:jkrolfA
    js services.permissions.add(services.io.newURI("https:kub.<<domain>>",null,null), 'popup', services.permissions.ALLOW_ACTION)
  #+END_SRC

  Site keyboard shortcuts:

  #+BEGIN_SRC vimrc
    set passkeys+=tumblr.com:jk
    set passkeys+=mail.google.com/mail/:'#!ms+-/? jknpux'
    set passkeys+=google.com/contacts/:'#jkoux,.'
  #+END_SRC

  Switch to reader mode:

  #+BEGIN_SRC vimrc
    map <A-r> -js dactyl.open("about:reader?url=" + content.location)
  #+END_SRC

* Windows
** Portables

   #+BEGIN_SRC bat :tangle bin/pe.cmd
     cd /d %~dp0\Tools
     start /b procexp /e /accepteula
   #+END_SRC

   #+BEGIN_SRC bat :tangle bin/pi.cmd
     cd /d %~dp0\picard
     start /b picard
   #+END_SRC

   #+BEGIN_SRC bat :tangle bin/fx.cmd
     cd /d %~dp0\fx
     start /b firefox
   #+END_SRC

   #+BEGIN_SRC bat :tangle bin/tv.cmd
     cd /d %~dp0\teamviewer
     start /b teamviewer
   #+END_SRC

   #+BEGIN_SRC bat :tangle bin/kp.cmd
     cd /d %~dp0\keepass
     start /b keepass
   #+END_SRC

   #+BEGIN_SRC bat :tangle bin/ovpn.cmd
     cd /d %~dp0
     elevate openvpn --config hdhoang.ovpn
   #+END_SRC

* Secrets							      :crypt:
-----BEGIN PGP MESSAGE-----
Version: GnuPG v2

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
BZButzEAIeapTwCaolnWWyI/4oSIU8x+sYJeeeecslLqUZs/eQIIxoSX5Tzg2bhl
go8zcm7EPnR5P6YFLVB0R64gviVMkvqK4OLeadv63OFY5rgefG0Utk63gn9b9Ya4
Mr1t1W2nAXYaNtYSUZ6srzQVxJG+OukzHcb6d1XNYq/MoQyjdWKou53Pf1NiRtob
rqcKc9qVMtq5noijcDK8ZJ2Fr4JyU7Ug5GDzRlLTu7ff89F6Z2PVYP8lXQoK72dM
RjDdza04uNNVlMGwTGoS5r68wwh4adit530p29zjHgSmNLmw46LKRQrWwUEAbcjZ
nREzOBWRzwvaOPuNb/3GkWrHKMSdYhkt8WqPj0aS35WClC6zSXQ3/eWOegF+GxkM
RDN9y0VJ6R0ZJeDVGnJ4/izYaIFri63CkS1eV07H/sbQcxU/W+CF9FQT1CIR1R8c
SLkjDBNMgQ/2QiLr27jC7Ryuf/TTHrwtUWbbPCstmxOrVBthmjFIWcoZHjjGOO1x
kH1WhBtlBfSc5vSqTPsVeJADDtTWBAYfvME2lmmZJZ5uiD4pyalGKgGKPK5PlRB4
mpzeQsfdaowl5/zLcW1ZkxOngkN1twPpNCISxbtbbPORFFFzC8S+X4hxhXBgC3rR
AV/EEkrYIarrYOSYI5yM5/wGkeo0zX00l+sp93/spbStHzGto25aSgAwQbihNU/Q
3wYRf5CbRBsRuER00iYM2yfBKGkfoKJ31dBk1abEbTqa7cOzIl4k4lK8W0/S+L53
Hv4tnPHQ8a0KHdMovZXVYlzKeq7j5cu6E4+ba6u2lu5dFluTxVF3DwQdBqUFpjOQ
sC/14p3tZXVqcOAo+nxhmDtt+VSRvqn53tPoPDLn4xul/U1ZznzJ2zDY8xNKfFS9
wwS+oZIU6W+NaU1NXJ/2i237jblayv2iyyi2OKc303YvxLXfCs6eu4pqOVjxZigo
LqlH2Zlx1Vgcko/wrLL+4g1IgT+7aIOaZiUpyY62UqfC/cLvPcAdMplIApb/W8rg
IPMnHX+MyXYS+sn2OgGlWVasIvDx8p+8u5+UUvOVcW69z/gF1P6QjNts+GzOaByv
kSCale3kv7uLly6R22IDTkE7TCCyf1JlmtVskwgF/pGHiAnFHt32JSopCiJzeAJm
elofK+4hxFABnwXITSySAOYSuMIcpnQt5tiqFEVal5KfteszrJWSjPoKwz8UNTwP
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
PGRMXaAUibo9
=hr1V
-----END PGP MESSAGE-----
