#+title: emacs customization
#+startup: showall
* Who am I?
  #+begin_src emacs-lisp
    (setq user-full-name "Hоàng Đức Hiếu"
          user-login-name "hdhoang"
          user-mail-address "hdhoang@zahe.me"
          pkgbuild-user-mail-address "arch@zahe.me")
  #+end_src
* Start up
  #+begin_src emacs-lisp
    (server-mode t)
    (setq
     auto-save-default nil
     make-backup-files nil
     desktop-load-locked-desktop t ;  Load locked desktop from crashed emacs
     inhibit-startup-screen t)
  #+end_src
  Install packages
  #+begin_src emacs-lisp
    (package-initialize)
    (setq package-archives
          '(("gnu" . "http://elpa.gnu.org/packages/")
            ("marmalade" . "http://marmalade-repo.org/packages/")
            ("melpa" . "http://melpa.milkbox.net/packages/")))
    (require 'cl-lib)
    (setq package-pinned-packages
          '((magit . "marmalade")))
    (let ((missing-packages (cl-remove-if 'package-installed-p
                                          '(ace-window
                                            color-theme-sanityinc-solarized
                                            evil
                                            magit
                                            rainbow-delimiters
                                            smex
                                            expand-region))))
      (unless (null missing-packages)
        (package-refresh-contents)
        (mapc 'package-install missing-packages)))
  #+end_src
* Input
  #+begin_src emacs-lisp
    (set-language-environment "UTF-8")
    (setq-default buffer-file-coding-system 'unix)
    (setq-default sentence-end-double-space nil)
    (setq default-input-method "vietnamese-telex")
    (global-set-key (kbd "C-\\") 'toggle-input-method)
  #+end_src
** Ace-window
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-x o") 'ace-window)
   #+end_src
** Evil
   #+begin_src emacs-lisp
     (evil-mode t)
   #+end_src
   Mimic [[file+emacs:_pentadactylrc][dactyl]] scrolling
   #+begin_src emacs-lisp
     (dolist (state '(normal motion))
       (evil-define-key state global-map
         (kbd "<SPC>") 'evil-scroll-down
         (kbd "S-<SPC>") 'evil-scroll-up))
     (global-set-key (kbd "C-v") 'evil-scroll-down)
     (global-set-key (kbd "M-v") 'evil-scroll-up)
   #+end_src
   Restore some emacs bindings
   #+begin_src emacs-lisp
     (dolist (state '(insert motion normal))
       (evil-define-key state global-map
         (kbd "C-t") 'transpose-chars
         (kbd "C-d") 'delete-char
         (kbd "C-k") 'kill-line
         (kbd "C-y") 'evil-paste-before
         (kbd "M-y") 'evil-paste-pop (kbd "M-Y") 'evil-paste-pop-next
         (kbd "C-e") 'end-of-line
         (kbd "C-f") 'forward-char   (kbd "C-b") 'backward-char
         (kbd "C-n") 'next-line      (kbd "C-p") 'previous-line
         (kbd "C-r") 'isearch-backward))
     (evil-define-key 'motion help-mode-map
       (kbd "<tab>") 'forward-button)
   #+end_src
** Ido and Smex
   #+begin_src emacs-lisp
     (ido-mode t)
     (setq ido-use-virtual-buffers t)
     (global-set-key (kbd "M-x") 'smex)
     (dolist (state '(normal motion))
       (evil-define-key state global-map
         ":" 'smex))
   #+end_src
** Expand-region
   #+begin_src emacs-lisp
     (global-set-key (kbd "C-=") 'er/expand-region)
   #+end_src
** Other convenient bindings
   #+begin_src emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
     (defalias 'dabbrev-expand 'hippie-expand)
     (global-set-key (kbd "<M-f4>") 'delete-frame)
   #+end_src
* Major modes
  #+begin_src emacs-lisp
    (dolist (assoc '(("PKGBUILD" . pkgbuild-mode)
                     ("\\.install\\'" . sh-mode)
                     ("\\.do\\'" . sh-mode)
                     ("\\.service\\'" . conf-windows-mode)
                     ("\\.socket\\'" . conf-windows-mode)
                     ("\\.timer\\'" . conf-windows-mode)
                     ("\\.directory\\'" . conf-windows-mode)))
      (add-to-list 'auto-mode-alist assoc))
  #+end_src
** Desktop files
   #+begin_src emacs-lisp
     (add-hook 'conf-windows-mode-hook
               '(lambda ()
                  (setq comment-start "#")
                  (glasses-mode t)))
   #+end_src
** ERC
   #+begin_src emacs-lisp
     (setq erc-autojoin-channels-alist '(("freenode" "#lojban" "#jbopre" "#vnluser"))
                erc-hide-list '("JOIN" "PART" "QUIT"))
     (evil-set-initial-state 'erc-mode 'normal)
   #+end_src
** Magit
   Enter commit buffer in insert state
   #+begin_src emacs-lisp
     (evil-set-initial-state 'magit-log-edit-mode 'insert)
     (setq vc-follow-symlinks t)
     (global-set-key (kbd "C-x g") 'magit-status)
   #+end_src
** Org
   #+begin_src emacs-lisp
     (setq org-M-RET-may-split-line nil
           org-latex-default-packages-alist (delete '("AUTO" "inputenc" t)
                                                    org-latex-default-packages-alist)
           org-latex-packages-alist '(("" "libertine" t))
           org-latex-pdf-process '("xelatex %f")
           org-src-fontify-natively t
           org-use-speed-commands t)
     (add-to-list 'org-babel-load-languages '(sql . t))
   #+end_src
** Proced
   #+begin_src emacs-lisp
     (setq proced-filter 'all
           proced-tree-flag t)
     (global-set-key (kbd "C-x p") 'proced)
   #+end_src
** Shell
   #+begin_src emacs-lisp
     (defadvice shell (around prev-buffer activate)
       "Switch back to the previous buffer if already in shell"
       (if (string= (buffer-name) "*shell*")
         (switch-to-prev-buffer)
         ad-do-it))
     (if (eq system-type 'windows-nt)
         (setq shell-file-name "bash")
       (setq shell-file-name "zsh"))
     (global-set-key (kbd "C-x M-m") 'shell)
     (global-set-key (kbd "C-x M-t") 'term)
     (define-key comint-mode-map (kbd "<SPC>") 'comint-magic-space)
   #+end_src
** SQL
   Wrap Cygwin mysql with [[https://github.com/Shougo/fakecygpty/blob/master/fakecygpty.c][fakecygpty]]
   #+begin_src emacs-lisp
     (when (string-prefix-p "CYGWIN" (shell-command-to-string "uname"))
       (setq sql-mysql-program "fakecygpty"
             sql-mysql-options '("mysql")))
   #+end_src
*** Connections
    #+begin_src emacs-lisp
      (setq sql-connection-alist '(
          ("selfoss"
            (sql-product 'mysql)
            (sql-user "selfoss")
            (sql-database "selfoss")
            (sql-server "192.168.1.54"))))
    #+end_src
* Appearance
  Set terminal title
  #+begin_src emacs-lisp
    (add-hook 'post-command-hook
              '(lambda ()
                 (unless window-system
                   (send-string-to-terminal (concat "\033]2; " (buffer-name) "\007")))))
  #+end_src
  #+begin_src emacs-lisp
    (setq frame-title-format "%f"
          calendar-week-start-day 1)
    (blink-cursor-mode -1)
    (global-rainbow-delimiters-mode t)
    (setq undo-tree-mode-lighter "")
  #+end_src
  #+begin_src emacs-lisp
    (load-theme 'sanityinc-solarized-light t)
  #+end_src
  On newer Windows, use Consolas
  #+begin_src emacs-lisp
    (if (eq window-system-version 6)
        (set-default-font "Consolas-12" :frames t))
  #+end_src
* Finalize start up
  Restore the desktop when settings have been applied
  #+begin_src emacs-lisp
    (desktop-save-mode t)
    (desktop-read)
  #+end_src
